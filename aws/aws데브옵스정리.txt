1.데브옵스란?
스킵



2.aws툴
1.iac란?
	iac는 코드기반 인프라로,클라우드포메이션이나 그런걸 써서 세팅을 코드화 시켜놓고,클라우드에서 서버를 할당받은다음 그코드대로 세팅을 하는식임
	이떄 쉘스크립트 기반으로 인프라를 구성하게 됨
	iac의 장점으론,세팅에 드는 비용이 감소하고,시간이 줄어듬(한번만들어두면 재사용되니까)
	그리고 실수로인한 리스크가 감소함(한번ok나면 리스크가 0임 두번쨰부턴)
	
	iac도구로는 클라우드포메이션이나 테라폼듬이 있음


2.aws cloudformation
	클라우드포메이션은 aws에서 사용하는 iac임
	얘는 모든 aws리소스에 사용가능하고,여기다 템플릿을 넣으면 해당 리소스를 프로비저닝하고 구성함(세팅)
	즉 리소스를 개별적으로 생성하고 구성할필요가 없고,어디에 의존하는지 파악할필요도 없음
	
	클라우드포메이션의 장점은
		인프라 관리가 간소화됨
		인프라 복제가 간편해짐
		인프라 변경사항 추적이 쉬워짐
	이 있음
	
	클라우드포메이션의 방식은,
		yaml로 템플릿을 작성하고
		그걸 aws에 올리면
		aws가 그걸보고 스택을 생성하고
		스택순서대로 리소스를 생성하고
		완료되면 완료신호를 줌
	으로 구성됨
	이떄 템플릿은 직접작성할수도있고,샘플템플릿을 받아서 수정할수도 있음
	여기서 리소스생성에 실패하면(스택생성에 실패),생성된 리소스들을 삭제하고,변경사항을 롤백함
	
	클라우드포메이션은
		템플릿
		클라우드포메이션
		스택
	으로 구성됨
	
	템플릿으로 스택을 만드는게 클라우드포메이션
	스택으로 리소스를 만드는게 aws가 할일
	
	이때 탬플릿을 쓸수도있고,aws cloudformation designer로 gui기반으로 템플릿을 뽑아낼수도 있음
	
	템플릿의 구성요소는
		AWSTemplateFormatVersion:버전날짜
		Description:주석
		Metadata:{템플릿 추가정보}
		Parameters:{템플릿실행시 전달할 파라미터값들(용량같은거)}
		Mapping:{템플릿 실행시 선택해야하는값(리전같은거)}
		Conditions:{특정자원에 대한 생성여부조건}
		Transform:{서버리스앱용 }
		Resources:{생성할aws 리소스 나열(필수)}
		Outputs:{생성완료후 리턴할거}
	로 구성되어있음
	
	여기서 파라메터는 스택생성시 리소스와 아웃풋세션에서 참조할값을 지정하는 섹션으로,직접타이핑하거나 선택할수있음,여기를 참조해갈수있음(쿠버네티스 볼륨쓸때처럼)
	리소스는 실제로 생성할 리소스를 선언함,리소스섹션은 인스턴스나 버킷을 생성할때 필요한 속성값과 키페어파라미터를 참조해서 구성함
	아웃풋섹션은 스택생성후 리소스생성을 완료하고나서 결과값을 리턴받을수있음

	생성시엔
	템플릿은 책 참조하고
	이걸 클라우드포메이션 스택에서 스택생성을 누르고 템플릿업로드하고
	vpc같은거 선택사항있으면 선택하고 완료누르면됨
	
	업데이트할땐
	생성된 스택을 누르고 업데이트를 누르고 파일을 업로드하고
	변경세트보기로 변경점 확인하고 실행하면됨
	
	삭제할땐 스택가서 삭제하면됨
	
	
	
	그리고 클라우드포메이션으로 생성된 인스턴스에 접속하려면 키페어를 부여하고,ssh접속을위해 시큐리티그룹을 변경하고,앱을 변경할때 업데이트해야함
	키페어 생성은 서비스-컴퓨팅-ec2-네트워크및 보안-키페어-키페어 생성으로 생성하고
	거기서 나온키를 파라메터에 넣고,리소스에서 가져다쓰면됨
	ssh로케이션도 동일
	그리고 리소스에서 webserversecurityhroup에 ssh접속을 위한 포트와 ssh접속을 위한 보안그룹규칙에 추가함
	그리고 이걸 업데이트하면됨
	


3.aws opsworks
	opsworks는 chef나 puffet기반으로 클라우드에서 iac를 하는 도구임
	opsworks는 chef와 puppet,stacks기반으로 할수있음
	칩과 퍼펫은 원래있던걸 클라우드에서 쓰는거고
	스택은 aws기반으로 서버관리하는건데,aws에서 만든거
	칩과 퍼펫도 내부적으론,스택으로 돌아감(레시피를 번역해서 스택으로 바꿈)
	
	칲은 레시피기반으로 자동화관리,보안자동화테스트등을 하는 플랫폼으로
	이걸기반으로 aws에서 돌릴수있음
	
	칲은
		iac가능
		확장이 쉬움
		인아웃바운드 제어가능
		서버가 있고,클라이언트를 배포해서 선언된 상태와 일치시킴
	등의 장점이 있음
	얘도 뭐 클라우드포메이션이랑 비슷한방식으로 제어됨
	얘는 쿠버네티스처럼 원하는상태를 서버에선언하면,클라이언트에서 그상태와 일치시키는방식으로 유지/관리하니까 변경사항이있을떄도 변경이쉬움
	
	
	퍼펫도 똑같이 퍼펫을 aws에서 사용하는것
	퍼펫은
		iac가능
		스케일아웃시 자동으로 퍼펫마스터(서버)와 연결(데몬셋같은)
		인아웃바운드 제어
	등이 있고,칩과 비슷함
	얘는 이벤트기반의 상황인식및 대응이 가능함
	
	
	
	스택은 별도의 관리서버를 필요로 하지않고,칩솔로를 통한 칩레시피를 통해 관리서비스를 함
	얘를 쓰면 로드밸런싱,db,앱서버와 같이 다양한 인프라층을 스택으로 쌓아서 모델링할수있음
	각 레이어에 ec2를 매칭해서 배포하거나,db를 rds에 연결하거나,트래픽에 따른 오토스케일링을 설정할수있음
	
	스택은
		스택:한 분류에따른 전체집합(어떤 앱의 전체인프라같은)
		레이어:각각 다른 역할을 하는 인스턴스나 리소스의 집합
		스케일:특정 조건으로 확장을하는 조건
		칩레시피:특정 스크립트등 작업을 실행하기위해 사용됨
	으로 구성되어있음





4.aws lambda
	람다는 서버리스코드임(faas),즉 서버에서 코드를 실행하고,그결과값만 restapi로 보내줌
	얘는 작성엔 코스트가 들지않고,컴퓨팅 사용시간에 대해 주로 과금이 됨
	이걸 사용하는 방식은
		프로그램내에서 api로 호출
		특정 트리거가 발생하면 함수를 호출(인프라관리할때나 db변경사항있을때)
	가 있음
	
	람다는 컴퓨팅사용시간에 대해 과금이되니까,단위시간이 오래걸리는 작업에 대해선 적합하지않고(머신러닝훈련같은)
	짤막짤막하게 필요하거나,인프라에 대해 코드를 실행시켜야할때(s3버킷에 뭐가 들어왔을때 발생해서 새로운 파일을 생성한다던가)
	사용됨,즉 파이프라인에 유용함
	
	람다는 4가지 절차를 걸쳐 구현됨
		이벤트가 호출되면(트리거발생)
		권한을 확인하고(키기반)
		함수를 실행해서
		리턴함
	
	여기서 권한은,전체오픈할수도있고,키기반으로 체크할수도있고 다양한 방식이 있음,기본적으론 코스트나가니까 키기반으로 체크하는듯
	
	실제 사용법은 보면서하자 필요해지면
	파이썬에서 s3버킷 접근할떈 boto3라이브러리쓰는듯


5.aws cloudwatch
	클라우드와치는 모니터링을 할수있는 서비스임
	얘는 메트릭을 받아서 현재 상태를 모니터링하고,상태변화에 따른 이벤트를(오토스케일링같은) 발생시킬수있는 도구임
	얘는 얘로 이벤트를 발생시키고,ec2나 람다,eks등등에 신호를 줄수있음
	
	얘는 당연히 리전이나 앱별로 메트릭을 따로받을수도있고 같이받을수도있음
	기본적으론 5분단위로 데이터를 저장받고,돈더내면 1분단위도됨
	
	받을수있는 메트릭은
		오토스케일링관련 그룹크기,최소최대크기,보류중인 인스턴스수,종료중인수 등등
		
		ec2에서 cpu사용률,디스크 읽기쓰기성능,읽고쓴 바이트수,네트워크보낸바이트수,패킷수
		
		로드밸런서에서 연결된 인스턴스수,연결실패인스턴스수,인스턴스에서 응답한수,인스턴스에서 오류날린수(400,500),레이턴시,특정시간에 완료수,
		대기열차서 거부한수,대기중인수
		
		rds에서 cpu사용률,사용중인db커넥션수,엑세스대기중i/o수,실패한작업수,송수신트래픽,초당평균i/o수,평균처리시간,초당처리바이트수 등
		
	등이 잇음
	
	클라우드와치의 이벤트는 특정 상황이 일어나면(메트릭이 임계치를 넘으면)발생하게할수도있고,특정시간마다 발생하게할수도있음(크론잡같은)
	이때 내부의 리소스가 변경되면 발생하게할수도있고(ec2가 실행되면 안에세팅한다던가),
	이벤트도 특정룰로 분류해서 실행되던가 안되던가할수도있고,한이벤트가 여러 인스턴스에 전달되게할수도있음
	
	그리고 처리한이벤트와 메트릭을 로그파일로 저장할수도있고,그걸 조회할수있음(쿼리가능)
	
	
		
6.ci/cd
	ci/cd는 지속적인통합과 지속적인배포,ci로 코드를 통합하면서,안정성을 체크하고,
	cd는 안정화된코드를 스테이지에 배포해서 테스트하고 정상이면 상용에 배포하는것
	
	보통 ci는 깃헙액션이나 깃랩으로 하고,cd는 젠킨스등을 사용하는듯
	
	ci를 하면 작은변경사항부터 계속 누적시키니까 문제가생겨도 작게생기고 롤백도 조금만하면됨
	cd를하면 매번 뭐 귀찮게할일이 없으니까 편함



7.aws cloud9
	클라우드나인은 웹기반 ide임
	얘는 에디터,디버거,터미널을 내장하고있고,js,파이썬,c등 40개정도 언어를 쓸수있음
	그리고 기본적인 라이브러리는 패키징되어있음
	그리고 라이브러리도 추가할수있음
	내장형으로 github도 가지고있고,람다 블루포인트도 지원함
	
	얘는 ec2인스턴스기반으로 돌아가서,ec2에 라이브러리를 올리면됨(그냥 파이썬은 pip로 올리면됨)
	좋은건 서버리스앱을 개발할때,이거만들기 좋은 환경(자동으로 연결되고 테스트도 됨)임


8.aws codecommit




