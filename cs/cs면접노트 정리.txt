1.디자인패턴
	싱글톤:하나의 클래스에 딱 하나의 인스턴스만 생성되게 강제하는패턴,db에 많이 사용되고 생성자에서 없을시 생성,있으면 있는거 리턴하는식으로 작동시키면됨
		단점으로는 유닛테스트를 할때도 딱 하나만 생성돼서,각 유닛별로 분리가 어려워짐
		그리고 이걸 사용하면 모듈간의 의존성이 강해지는데,
		이걸 해결하기위해 의존성주입(상위 하위 중간에 인터페이스를 두고,양쪽다 그거에 의존하는거)을 하면 해결할수있음
		
	팩토리:객체 생성을 하는 부분을 떼어내서,그부분만 추상화하는 패턴,
		이걸하면 상속관계에 있는 두 클래스에서 상위클래스가 중요한 뼈대를 결정하고,하위클래스는 객체생성에 관한 구체적내용을 결정할수있음
		그래서 상위와 하위가 분리되니까 느슨한 결합을 가지게되고,유연성이 높아지고,객체생성이 떨어져나가서 코드수정할때 한곳만 고치면됨
		
	전략:객체의 행위를 바꾸고싶을때,직접 수정하지않고 전략클래스를 교체해가면서 사용할수 있게 만드는 패턴,passport같은곳에서 사용됨
	
	옵저버:객체가 자기 상태가 바뀌었을때 자기를 구독한 애들한테 바뀌었다고 신호를 보내주는 패턴
		이렇게하면 객체와 구독자들 간에 연결이 끊기고,밑에를 생각할필요없이 객체는 자기자신을 수정할수있음,
		주로 mvc패턴에도 사용되고,이벤트기반ms에도 사용됨
		js에서는 프록시를 통해 구현할수있음
	
	프록시:객체의 앞에 프록시객체를 둬서 프록시객체가 객체를 실행하게 하는패턴,
		객체 앞에 프록시가 있으니까,거기서 추가작업을 하든가,객체연결을 거부하든가 등등 여러가지 일을 할수있음
		프록시에 캐시를 넣어서 캐시프록시로도 사용할수있음
		웹서버에선 nodejs앞에 nginx를 넣어서 사용하기도 하고,프런트엔드 앞단에 프록시를 둬서 cors에러를 막을수도있음
		
	이터레이터:반복자를 사용해서 컬렉션들을 같은인터페이스로 조회하는 패턴,foreach임
	
	노출모듈:private나 public가 없는 자바스크립트에서 그걸 생성하는패턴,클로저를 사용함
		  클로저를 만들고,그 클로저가 public고 그외의 내부변수가 private인 식임
		  
	mvc:앱을 모델,뷰,컨트롤러로 분할하고,뷰는 진짜 보이는것만,모델은 실제 상태변화나 db같은걸 넣고,
		컨트롤러는 실제 이벤트등 메인로직으로 뷰가 변경되면 컨트롤러가 작동해서 모델을 건드림,컨트롤러는 간단한 뷰컨트롤(버튼비활성화정도)을 할수있음		
		모델과 컨트롤러,뷰는 서로 옵저버패턴으로 연결되어있고,뷰와 컨트롤러는 뷰가 컨트롤러를 전략패턴으로 사용할수있음
		
	
2.프로그래밍 패러다임
	기본적으로 선언형과 명령형으로 나뉘고,선언형은 하위에 함수형을 포함하고,명령형은 객체지향과 절차지향으로 나뉨
	
	함수형 프로그래밍은,순수함수들을 쌓아나가서 로직을 구현하고,고차함수(함수가 함수를 매개변수로 받는거)를 통해 재사용성을 높이는 방식임
	이러려면 일급객체(변수나 메서드에 함수할당가능,함수안에 함수 매개변수담기 가능,함수가함수를 반환가능)여야 함
	
	객체지향은 객체들의 집합으로 상호작용을 표현하고,데이터를 객체로 취급해서 객체 내부에 선언된 메서드를 활용하는식임
	얘는 추상화,캡슐화,상속성,다형성등이 특징임
	설계원칙으로는 
		단일책임원칙,
		개방폐쇄원칙,
		리스코프치환원칙(부모객체대신 자식객체를 넣어도 동작해야함),
		인터페이스분리원칙(인터페이스 하나보단 구체적인 여러개),
		의존역전원칙(상위와 하위의 중간에 인터페이스를 둬서,상위가 하위에 의존하는걸 역전시킴)
	등이 있음
	
	절차지향은 로직이 수행되는 순서대로 구현하는식,머신러닝같은데에 자주쓰임,단점으로 모듈화가 어렵고 유지보수성이 떨어짐
	
	
	
3.네트워크
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	