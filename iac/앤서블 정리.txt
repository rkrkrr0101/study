앤서블은,주로 만들어진 인프라에 설치하거나 뭐 스크립트돌리거나 하는식으로 사용되는 ioc툴임


앤서블에서 인벤토리는,여러 컴퓨터를 묶어둔거,ssh를 사용해서 수행됨
앤서블은 에이전트리스임,그래서 os자체의 기능을 사용해서 연결해서 작업을 함
그때 연결할 대상들이 모여있는게 인벤토리파일임

만약 인벤토리파일이 없으면,기본인벤토리파일을 사용함
이건 /etc/ansible/hosts에 있음

인벤토리파일은 ini와 유사한형태임
그형태로 서버들이 나열되어있음(서버주소,ip형태나 dns형태)
	server1.company.com
	server2.company.com
	[mail]
	server3.company.com
	server4.company.com
이걸 그룹화 시킬수도 있음
단일 인벤토리파일에 여러 그룹이 들어갈수있음

그리고 각 서버에 별칭을 붙이려면(alias)
	web ansible_host=server1.company.com
	db ansible_host=server2.company.com	
이런식으로
	붙일이름 ansible_host=서버주소
하면됨
그리고 이걸 그룹화할땐
	web ansible_host=server1.company.com
	db ansible_host=server2.company.com
	[webserver]
	web
	[dbserver]
	db
이렇게 쓰면됨
만약 그룹의 그룹을 넣고싶으면
	[그룹이름:children]
	자식그룹이름1
	자식그룹이름2
이렇게 넣으면됨,children선언해주고 그대로쓰면됨

이건 ini방식이고,yaml방식도 있음
	all:
		hosts://뭘 생성할떈 이게 필요함
			주소ipdns1:
		children:
			그룹의그룹이름:
				그룹명1:
					hosts:
						주소ipdns2:
						주소ipdns3:
				그룹명2:
					hosts:
						주소ipdns4:
						주소ipdns5:
		


이런 앤서블인벤토리 매개변수엔 여러개가있는데
	ansible_connection=ssh/winrm/localhost(연결방법을 정의)
		web ansible_host=server1.company.com ansible_connection=ssh //이런식
		localhost ansible_connection=localhost
	ansible_port=22/5986(연결할포트를 정의,ssh의경우 기본값은 22임)
		
	ansible_user=root/adminstrator(연결할계정을 정함)
		web ansible_host=server1.company.com ansible_connection=ssh ansible_user=root
		web ansible_host=server1.company.com ansible_connection=ssh ansible_user=admin//이런식
		
	ansible_ssh_pass=패스워드(ssh연결할때 패스워드필요하면 여기적을수있음)
		web ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=123qk
	ansible_password=패스워드(이건 윈도우용)
여기서 패스워드는 가능하면 ssh키기반으로 하고,패스워드는 없애는게좋음,플레인텍스트로 주고받아야하는데 보안에안좋음


그리고 
	ansible 대상서버별칭 -m ping -i 인벤토리파일.txt
로 핑을 날려볼수있음
그러면 TF로 리턴이옴

그리고 
	ansible --list-hosts abcd.example.com
으로 현재 저 값이 있는지없는지를 확인할수있고,제대로 인벤토리가 물렸는지도 확인할수있음
그리고


아예 저거 ssh 패스워드체크를 없애버리고싶으면
	/etc/ansible/ansible/cfg의 host_key_checking=False를 주석을 제거하면 됨
근데 이건 추천하진않는대 프로덕션에서
애초에 패스워드를쓰면안되고,ssh키써야된다고함





앤서블은 yaml로 작업을 함
근데 내가 지금 야믈을 할이유가잇을까



앤서블 플레이북은 앤서블의 언어임
앤서블에 일을 시킬땐,이 언어로 적어야함

기본적으론
	run command1 on server1
	run command2 on server2
	Restarting server1
	Restarting server2
이런식으로 적을수도있지만,이러면 대량의 서버에서 쓰기힘들고,재사용도 힘듬

모든 플레이북은 yaml포멧으로 적히고,확장자도 .yml임
앤서블 플레이북은 단일 yaml파일이고,
그안에서 대상을 지정하고(그룹같은 인벤토리에 들어있는),명령이나 스크립트를 실행(패키지설치같은)하거나 재시작하는거임
플레이북의 형태는
	-  name: 플레이북이름
	   hosts:localhost //대상,인벤토리에 들어있는 그룹같은거
	   tasks:
	   -  name: 명령이름
	      command: date//리눅스커맨드
	   -  name: 명령이름
	      script: test.sh//스크립트실행
	   -  name: 명령이름
	      yum:
		   name: httpd
		   state: present
	   -  name: 명령이름
	      service:
		    name: httpd
			stete: started

그리고 플레이북은,위에서부터 순서대로 실행됨
그리고
	-  name: 플레이북이름1
	   hosts:localhost //대상,인벤토리에 들어있는 그룹같은거
	   tasks:
	   -  name: 명령이름
	      command: date//리눅스커맨드
	   -  name: 명령이름
	      script: test.sh//스크립트실행
	   -  name: 명령이름	
	   
	-  name: 플레이북이름2
	   hosts:localhost //대상,인벤토리에 들어있는 그룹같은거
	   tasks:
	   -  name: 명령이름
	      yum:
		   name: httpd
		   state: present
	   -  name: 명령이름
	      service:
		    name: httpd
			stete: started

이런식으로 두개이상으로 나누는거도 가능함,그리고 야믈이니까,서순은 별상관없음 당연히,name이 젤위에오는게 기본적이긴하지만,호스트랑 자리바꿔도됨
그렇지만 task는 리스트니까,순서가 있고,순서대로 실행됨

앤서블에서 모듈은,테스크에서 사용하는 command,script,yum,service같은거임
상세정보는 공식도큐에서 볼수있고,
기본적으로 쓰는건 저거정도만 알고있으면됨

그리고 앤서블을 실행할땐
	ansible-playbook 앤서블파일이름.yaml -i 인벤토리파일.txt
하면됨



간단한 명령을할때,플레이북을 작성하고싶지않으면
	ansible 호스트(대상) -a 커맨드 -i 인벤토리파일.txt
	ansible 호스트(대상) -m 모듈 -i 인벤토리파일.txt
를 할수있긴함,선언형이라는거에선 많이 어긋나지만
	ansible target1 -m ping
이런식


자기는 atom ide쓰고있는데 좋으니까 써보래


그리고 핑모듈은
	tasks:
	-  name:이름
	   ping:
이러면 나감 

카피모듈은
	tasks:
	-  name:이름
	   copy:
	     src:원본경로
		 dest:복사할경로
이러면 원본경로에 있는 파일이나  폴더를 복사경로에 붙여넣음		 

그리고 yamllint.com에서 yaml문법테스트 할수있다고함,그리고 atom에 플러그인을 깔아서 yaml문법을 인식할수잇게 할수있다고함(linter-js-yaml)

atom의 remote sync를 깔면,리눅스머신의 파일을 윈도우에서 열수있다고함
설치하고나서 폴더를 오른쪽클릭하면 밑에 리모트싱크있는데 거기서 설정하고(ip,포트 22,동기화할 경로,패스워드,유저네임)
업로드 폴더,다운로드폴더로 파일을 올리거나 받을수있음


앤서블은 멱등성이 있기때문에,선언한 형태에 맞추려고 하니까,이미 상태가 같다면 추가작업을 하지않음




앤서블의 모듈은 크게
	시스템
	커맨드
	파일
	데이터베이스
	클라우드
	윈도우
등으로 나눠짐
시스템은,시스템에서 하는일을 함,
	user //사용자나 
	group //그룹수정
	iptables // iptable수정
	방화벽구성
	논리볼륨그룹작업
	mount //마운팅,서비스동작확인
	systemd //서비스 시작,중지,재시작 등등
	service  //서비스 시작,중지,재시작 등등
커맨드는 호스트에서 명령이나 스크립트를 실행시킴
	command
	expect
	script
	shell
이렇게 단줄실행,파일실행등

파일은
	acl //파일의 정보보기
	copy //파일카피
	archive //파일의 압축또는 압축해제
	find //파일찾기
	lineinfile //파일내용검색 또는 수정

데이터베이스는
	mongodb
	mysql
	mssql
	...
등 각각 db를 추가제거,수정

클라우드는
	amazon
	atomic
	azure
	google
	docker
등등 각 회사마다 하나씩 있고,그안에서 많은 서브커맨드들이있음
여기서 인스턴스생성,파괴,네트워크보안에서 구성변경,컨테이너,데이터센터,클러스터,vpc관리 등등 많은서브커맨드가있음

윈도우모듈은 윈도우에서 앤서블쓸때 도움되는것들이 있음
보통 시스템이나 파일,커맨드에 있던게
	win_
을 붙이면 같은동작을 함


그리고 각 모듈에 파라미터는 각각 도큐멘트가서 확인해봐야함
대표적으로 command는
	command: cat re.conf chdir=/etc
저기서 chdir은 /etc로 이동해서 명령을 실행하라는소리
	command: cat re.conf creates=/ff
creates는 폴더가 없으면 폴더를 만들라는소리

그리고 free_form은,실행형식으로 자유형태문자열을 받는다는소리,
커맨드같은경우 알아서 입력해서 받으니까 저렇고
카피는 입력형식이 디렉토리주소로 정해져있으니까 프리폼이 아님

script는 로컬에 위치한 스크립트를 실행함
이건 실행명령을 내린 시스템에 있는 스크립트를 실행함,즉 내가 가진 스크립트를 리모트머신에 복사해서 실행하는것
	script:/경로/파일명.sh
 
service는 서비스를 중지하거나 재시작함,그 쿠버네티스 13점짜리 재시작하던 그거
	service: name=서비스이름 state=상태
	service: name=postgresql state=started
이름으로 서비스를 지정하고,그서비스를 스테이트의 상태에 맞춤
	service:
		name: postgresql
		state: started
이런식으로 적을수도있음
얜 프리폼이 아님,서비스를 받아서 상태를 지정하는거니 당연하지만
이거도 started인 이유는,선언형으로 하기떄문에 시작이 안되어있으면 시작시키고 시작했으면 아무것도 하지마라는 멱등성지키라는소리

state에는 대표적으로
	started

	stopped //종료할때
	restarted //재시작할떄
	reloaded //변경된설정 적용할때
	present //뭘 설치할때,installed랑 같음
	removed //삭제할때
	latest //마지막버전으로 업데이트

lineinfile은 파일의 라인을 찾고 추가하는데 사용됨,없을경우 추가할수도있음
	lineinfile:
		path: 파일경로/파일이름.txt
		line: 'abc123'
이러면 저 파일에 abc123이 있으면 아무것도안하고,없으면 마지막에 추가함
인벤토리할때 사용하기좋음
얘도 멱등성이 지켜짐 


앤서블에서 변수는,각 서버마다 다른 정보를 가져오거나(대표적으로 id패스워드)할때 사용됨

이건 인벤토리에서 했던거임
	web1 ansible_host=server1.company.com ansible_connection=ssh ansible_user=root
이건 web1에 저걸 다 박아둔거임

그리고 인벤토리에서 특정 그룹의 변수를 정의할떈
[server]
qqq.ex.com
ivv.ex.com
[server:vars]
user=joe

이런식으로 특정 그룹에 속한 변수를 정할수있음

우선순위는 명령줄입력-플레이북-인벤토리순으로 덮어씌워짐
명령줄이 최우선으로 나옴



플레이북에서 사용은
	-  name: 플레이북이름
	   hosts:localhost //대상,인벤토리에 들어있는 그룹같은거
	   vars:
	     변수명1:변수값2
	   tasks:
	   -  name: 명령이름
		  lineinfile:
			path: 파일경로/파일이름.txt
			line: 'abc123{{변수명1}}'	
저렇게 vars를 선언하고 {{변수명}} 으로 사용하면됨
{{}}이걸 사용하는건,변수가 문자열내에 들어가야할때 사용함
만약 변수가 그자체로 들어가야하면
	"{{변수명1}}"
을 넣으면됨
변수가 맨앞에오면 ""쳐줘야하고,뒤에나오면 상관없는듯(이상함)

변수도 배열을 쓸수있는데

	users:
		aaa:
			first:aab
			last:rrr
		bbb:
			first:qqq
			last:ivv

이런식으로 쓰고
	{{users.aaa.first}}
이런식으로 참조하면됨

그리고 아예 varuables파일에 따로 담아둘수도있음
이렇게쓰면 재사용하기좋음 하드코딩하는거보다
이렇게 {{}}하는걸 jinja2 템플릿이라고 함



앤서블에서 조건문 쓰는건 테스크밑에 네임과 같은칸에 when을 넣고 조건을 달면됨
when이 true인경우에 그 테스크를 실행함

	-name:install nginx
	 hosts:all
	 tasks:
	 -  name:install nginx on debian
	    apt:
		  name: nginx
		  state: present
		when: ansible_os_family=="debian" and ansible_distribution_version=="16.04"
	 -  name:install nginx on redhat
	    yum:
		  name: nginx
		  state: present
		when: ansible_os_family=="redhat" or ansible_os_family=="suse"

이런식으로 각 os마다 설치방법을 바꿀수있음
ansible_os_family는 빌트인함수로,현재 os의 값을 줌

앤서블에서 패키지 여러개를 설치해야할떈,변수목록에 준다음,required로 필수인지 아닌지를 체크하고 그걸설치하는식으로 함
	vars:
		packages:
			-name: nginx
			 required: True
			-name: mysql
			 required: True
			-name: apache
			 required: False
그리고 이걸 반복문돌림		 
	tasks:
	-  name: install "{{item.name}}"
	   apt:
	     name:"{{item.name}}"
		 state: present
		 
	   loop: "{{packages}}"

		
루프에서도 제어문을 사용할수있음
	tasks:
	-  name: install "{{item.name}}"
	   apt:
	     name:"{{item.name}}"
		 state: present
	   when: item.required==True
	   loop: "{{packages}}"
이러면 required이 true인거만 작동하고 아니면 작동하지않음



앤서블에서 한작업의 출력을 기록하려면 register를 쓰면됨
	tasks:
		-command:service httpd status
		 register:result

만약 한작업에서 출력을 받아서 그걸가지고 조건문을 돌려서 체크하고 다음작업을 하려면
	tasks:
		-command:service httpd status
		 register:result
		 
		-mail:
		  to: abc@naver.com
		  subject:메일제목
		  body: service다운
		  when: result.stdout.find('down') != -1

이런식으로하면 위에서 한값에서 down이 있으면 메일을 보냄


앤서블에서 루프는 반복문임
기본적으로 foreach식으로 작동함
현재 작업하고있는 값은 item이라는 변수에 들어가고,거기서 item.name 이런식으로 빼다가 쓸수있음

루프의 작동방식은
	loop: {{변수명}}
	loop:
	-  qqq
	-  ivv
	-  sqqq
이런식으로 배열변수를 넣어주거나,배열을 넣어주면됨
사용할떈
	name:{{item.name}}
이런식으로 빼주면됨,만약 뭘로 래핑이 안되고(딕셔너리가 아니고) 그냥 값만 쌩으로 있으면
	name:{{item}}
이러면됨

그리고 with_items는 loop랑 같은거임,with_items잇으면 그냥 루프라고생각하면됨

그리고 파일을 반복할땐
	with_file:
		-"파일경로/파일이름"
		-"파일경로/파일이름"
url반복은 
	with_url:
	-  "naver1.com"
	-  "naver2.com"
db반복은
	with_mongodb:
	-  database:dev
	   connection_string:"mongodb://dev.mongo"
	-  database:prod
	   connection_string:"mongodb://prod.mongo"

이럭식으로 with가 붙은 여러개가 있음
with_items은 안쓰고,쟤들은 조회플러그인으로 잘 사용함




앤서블에서 롤은,k8s와 똑같은데 이건 서버별로 역할을 구분하는것임
즉 인벤토리에 있는 그룹별로 역할을 박아두는것
즉,특정 롤에 따른 필수작업을 미리 설정해두고,거기 들어가면 자동으로 그 테스크를 실행하는식임
다시말해서,롤은 미리 정해두거나 만들어둔 테스크를 함수처럼 만들어서 재사용이 쉽게 만들어둔거임
사용법은
	-name:abcd
	 hosts:db-group
	 roles:
	 -  mysql
이런식으로 tasks자리에 들어가면됨

만약 롤에서 매개변수같은걸 주고싶으면
	-name:abcd
	 hosts:db-group
	 roles:
	 - role:  mysql
	   vars:
		 mysql_user_name: abcdfff
이런식으로 주면됨

그리고 롤의 폴더는,플레이북의 하위디렉토리로 roles라는 폴더를 만들고 그안에 mysql이라는 이름을 가진 폴더속에 내용물이있으면 그걸읽음
또 다른방법은,/etc/ansible/roles폴더에 넣어도 됨

롤을 만드는방법은
	tasks파일
		tasks:
			작업들
	vars파일
		mysql_package:
		-  mysql
		   mysql-server
		db_config:
			db_name: db1
	defaults파일
		mysql_user_name:root
		mysql_user_password:root
	handlers
	templates
	
그리고 ansible galaxy에가면 많은 롤을 찾을수있음(사람들이 만들어둔)
가장 간단하게 롤을 만드는건
	ansible-galaxy init mysql
하면 뼈대가 나오는데 그걸 채우면됨


뭐 고급과정으로 윈도우에서 앤서블돌리는거 그런거도 잇긴하대 필요하면보자
여기선 파워쉘스크립트를 써서 하나봄


인벤토리같은 호스트에선 패턴을 사용할수있음
	hosts: host1,host2 //이렇게 병렬도 가능하고
	hosts: group1,host2 //그룹과 호스트도 가능
	hosts: host*  //호스트의 같은패턴에 대한 와일드카드도 가능(host22도 됨,즉 host로 시작하는 모든인벤토리내 호스트)
	hosts: *.coma.com //특정 패턴으로 끝나는 인벤토리에 있는 모든것

앤서블 pattern에 들어가면 예제들이있고,더많은패턴이 있음


동적 인벤토리는,정적 파일(yml이나 ini파일을 -i로 넣는것)이 아닌,스크립트를 넣는것
즉
	ansible-playbook -i inventory.txt playbook.yaml
이 아닌
	ansible-playbook -i inventory.py playbook.yaml
이렇게 파이썬을 넣어서 저기서 받는 리턴을 쓰는것
특히 이건,쿠버네티스처럼 파드들같이 계속 바뀌는 대상을 사용할떄 유용함 

모듈생성은 특정 형식으로 작성되어야함
이건 도큐가서 보면됨




기본적으로 배포를할떈,리눅스,아파치,mysql,php 이런 구성(os,웹서버,db,웹언어)으로 사용됨
리눅스에선 
	install firewall
아파치에선 
	install httpd
	configure httpd
	configure firewall
	start httpd
mariadb에선
	install mariadb
	configure mariadb
	start mariadb
	configure firewall
	configure database
	load data
php에선
	install php
	configure code
이 작업들을 해야함
이걸 순서를 좀 바꿔서
	install firewall
	
	install mariadb
	configure mariadb
	start mariadb
	configure firewall
	configure database
	load data

	install httpd
	install php
	configure firewall
	configure httpd
	start httpd
	download code
	test

이런식으로 하면됨
install firewall은
	sudo yum install firewalld
	sudo service firewalld start
	sudo systemctl enalble firewalld
이러면 설치후 시작하고

install mariadb는
	sudo yum install mariadb-server
configure mariadb는
	sudo vi/etc/my.cnf //쓸포트로 바꾸기
start mariadb는
	sudo service mariadb start
	sudo systemctl enalble mariadb

configure firewall은
	sudo firewall-cmd --permanent --zone=public --add-port=3306/tcp //3306포트(db포트)액세스 활성화
	sudo firewall-cmd --reload //리로드하면 포트가 적용됨

configure database는
	mysql
		create database ecomdb; //db접속해서 sql로 db생성하고 유저생성하고 권한부여
		create user 'ecom@localhost' identfied by 'ecompassword'
		grant all privileges on *.* to 'ecom'@'localhost
		flush privileges //그리고 리로드

load data는
	mysql < db백업파일.sql //db로드

이러면 여기까지가 db설치임

그리고 아파치랑 php설치는

install httpd과 install php는
	sudo yum install -y httpd php php-mysql //httpd와 php,php-mysql 설치
	
configure firewall는
	sudo firewall-cmd --permanent --zone=public --add-port=80/tcp //80포트 액세스활성화
	sudo firewall-cmd --reload //리로드

configure httpd는
	sudo vi /etc/httpd/conf/httpd.conf //index.html대신 index.php사용하게 변경,즉 내가사용할거로 바꿔치기

start httpd는
	sudo service httpd start
	sudo systemctl enalble httpd

download code는
	sudo yum install -y git
	git clone https://github.com/경로.git /var/www/html/  //웹파일 다운로드

test는
	curl http://localhost
로 확인


이건 단일노드기준으로 구성한것
멀티노드의경우엔
db노드와 웹서버노드가 분리됨
이떄 신경써야할건 대부분은 비슷한데  커넥션만 조심하면됨
웹서버에서 db쪽 모든노드 뚫어주고,db에서 웹서버쪽 모든노드 뚫어주기
뭐근데 쿠버네티스쓰지않을까 노드설정이나 하고

이걸 앤서블에 넣어서,각 단계별로 묶어서 자동화시키면됨


끝














