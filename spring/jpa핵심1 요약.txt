1.환경설정
	implementation 'org.springframework.boot:spring-boot-devtools'
	넣으면 해당파일만 리컴파일가능
	
	모든 엔티티 변경은 트랜잭션 안에서 일어나야함
	그리고 테스트에서 @Transactional이 있으면,테스트끝나고 바로 롤백해버림
	
	그리고 같은 트랜잭션안에서 엔티티를 생성하고,조회하면 하나의 영속성컨텍스트안에서는 id값이 같으니 같은객체임(같은엔티티)
	
	쿼리파라미터를 로그남길려면(쿼리에서 쿼리는 보여주는데 파라미터는 표시안되니까)
		implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	이거 넣어두면됨(이건 성능저하가 있을수있어서 운영에선 성능테스트해봐야함)
	 
2.도메인 분석 설계
	다대다는 쓰면안됨
	양방향 연관관계(양쪽다 서로를 소유하는거)는 사용하지않는게 좋음
	
	그리고 실제 현실에서의 관계가 아닌,설계상에선 모든 테이블을 동급으로 넣고 생각해야함(회원이 주문을 생성하는게 아닌,주문을 생성하려면 회원을 참조한다)
	그리고 일대다에선 어지간하면 다쪽이 주인이 됨
	
	일대일에선 어디다 포린키를 둬도되는데,이떈 그냥 액세스 많은데 두는게 편함
	
	양방향 연관관계면,연관관계의 주인을 정해야하는데,이때 외래키가 있는 주문을 주인으로 정하는게 좋음(일대다에서 다쪽에 무조건 포린키가 있으니 여기가 주인)
	그래야 업데이트할때 한군데만 업데이트되고 그러니까
	
	외래키가 가까운데 있는게 좋음(중앙근처에)
		@Entity 도메인 엔티티
		@Embeddable 이 클래스를 객체처럼 사용할수 있음
		@Embedded  해당클래스를 객체로 사용할때 붙여야함,Embeddable과 둘중 한군데(클래스에 붙이거나 사용처에 붙이거나)만 있으면됨

		@ManyToOne
		@OneToMany 해당 객체변수의 연관관계에 따라 붙임
		@JoinColumn(name = "member_id") 매핑을 뭘로할건지,포린키의 이름
	연관관계의 주인 정할땐 슬레이브쪽에
		@OneToMany(mappedBy = "member")
	이렇게 넣으면됨
	
	상속관계매핑일땐,부모클래스에서 상속전략을 적어줘야함
		@Entity
		@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
		@DiscriminatorColumn(name = "dtype")
		public abstract class Item {}
	DiscriminatorColumn은 싱글테이블일때 구분컬럼
	상속받은애들한테서,구분값을 정해야함
		@Entity
		@DiscriminatorColumn(name = "B")
		public class Book extends Item {}	
	이렇게
	
	이넘은 @Enumerated을 넣어야하는데,여기서
		@Enumerated(EnumType.ORDINAL) 1,2,3,4 인덱스숫자로 들어감
		@Enumerated(EnumType.STRING)  스트링으로 들어감
	이거 주의해야함
	중간에 상태추가되면 머리아프니
		@Enumerated(EnumType.STRING)
	사용하는게 좋음(기본값이 ORDINAL임)
	
	자기자신을 셀프로 매핑할수도있음(계층구조)
	category객체에서
		@ManyToOne
		@JoinColumn(name = "parent_id")
		private Category parent;
		@OneToMany(mappedBy = "parent")
		private List<Category> child = new ArrayList<>();
	셀프로 자기자신안에서 양방향 연관관계를 걸었다고봐도됨
	다대다의경우엔 1대다 다대1로 풀어내는 중간테이블이 있어야해서
		@JoinTable(name="category_item")
	이런게 들어가야함(뭐 근데 다대다를 쓰면안되니까)
	
	그리고 밸류클래스는,생성자만 있고,setter을 제공안하는게 좋음(변경필요할땐 새로만들게)
	
	
	엔티티엔 setter를 사용하면안됨
	모든 연관관계는 지연로딩으로 설정(디폴트가 즉시로딩이니 직접 지연로딩으로 바꿔야함) 
		@ManyToOne(fetch=FetchType.LAZY)
		즉시로딩이면 연관된 모든 테이블이 한번에 조회되고,지연로딩이면 필요해지면 조회함
		만약 연관된 엔티티를 같이 조회해야할때만 fetch join이나 엔티티그래프를 사용해서 조회해야함
	컬렉션은 필드에서 초기화하자(null에 대해 안전해짐)
		엔티티를 영속화할떄,컬렉션을 감싸서 하이버네이트의 내장컬렉션으로 바꾸는데,이경우에 생성자초기화를하면 문제가생길수있어서 필드초기화가 좋음
		그리고 엔티티를 생성할때만 컬렉션에 집어넣고,여기를 어지간하면 변경을 안하는게좋음(내장컬렉션으로 바꾸고나서 변경하면 머리아파지니까)
	
	
	그리고 디폴트테이블과 컬럼명은,엔티티가 카멜케이스면(memberPoint)대문자를 언더케이스하고 앞에 _를 붙임(member_point)
	그리고 모든 대문자는 소문자로 바뀜
	이거 설정은 바꿀수있음,필요해지면 pdf 찾아보자
	
	그리고 cascade를 all로 두면(저장,삭제등 하나만세팅도 가능),해당 엔티티를 영속화할때,캐스케이드가 있는거도 체인타고 저장이됨
	즉 체인을 타게할건지 말지임
	체인을 안타면 직접 다 저장해줘야함
	
	그리고 연관관계 편의메서드는,양방향 연관관계에서 좀 편하게쓰려고 만드는거
	order에서
		public void setMember(Member member) {
			this.member=member;
			member.getOrders().add(this);
		}
		public void setDelivery(Delivery delivery) {
			this.delivery = delivery;
			delivery.setOrder(this);
		}		
	이렇게하면 편하게 연관관계있는애들끼리 넣어줄수있음,이건 컨트롤하는(연관관계주인)쪽에 넣어두는게편함
	
	
	
3.어플리케이션 구현 준비
	컨트롤러는 웹계층,
	서비스는 비즈니스로직+트랜잭션처리,
	레포지토리는 jpa와 엔티티매니저,
	도메인은 엔티티가 모여있는계층,모든계층에서 접근가능(dto사용하는게 일반적)
	
4.회원 도메인 개발
	레포지토리에서
	    @PersistenceContext
		private EntityManager em;
	이렇게하면,스프링이 엔티티매니저를 만들어서 di해줌(스프링데이터jpa를 사용하면,
	그냥 @Autowired가 되기떄문에,@RequiredArgsConstructor가 먹음)
	
	해당객체 저장시엔(영속화)
		public void save(Member member) {
			em.persist(member);
		}	
	해당객체 조회시엔
		public Member findOne(Long id) {
			return em.find(Member.class, id);
		}	
	여러객체 조회시엔
		public List<Member> findAll() {
			return em.createQuery("select m from Member m", Member.class).getResultList();
		}
	이렇게 jpql써야함
	jpql은,엔티티를 대상으로 쿼리한다고 보면됨
	where필요하면
	    public List<Member> findByName(String name){
			return em.createQuery("select m from Member m where m.name=:name", Member.class)
					.setParameter("name",name)
					.getResultList();
		}
	이렇게
	
	그리고 서비스에선, @Transactional이 있어야함,이걸 클래스레벨에 붙이면 퍼블릭메서드엔 다 들어감
	메서드레벨에 붙일수도있는데,이떄 조회시엔
		@Transactional(readOnly=true)
	하면 좀더 성능최적화를 해줌
	
	그래서 보통 읽기가 많으니
	클래스레벨에
		@Transactional(readOnly=true)
	하고,업데이트나 인서트에서
		@Transactional
	로 덮어씌우는식으로 사용하는듯
	
	그리고 멀티쓰레드등으로 벨리데이션이 뚫릴수있으니까,유니크해야하는건 db에서 유니크잡아주는게 좋음
	
	jpa에서 persist를 하면,일반적으로는 즉발로 인서트가 안나가고,플러시(현재 영속성컨텍스트와 db를 멱등하게 맞추는거)를 하고 커밋이 되면 인서트가 나감
	그래서 테스트에선 롤백을 해버리니 인서트문이 찍히지않음
	
	
	테스트는 완전히 격리된 환경에서 하는게 좋아서,스프링에선 메모리db를 제공함
	그래서 테스트폴더에 resources폴더를 만들고,거기에 application.yml이나 프로퍼티를 생성하고(이러면 테스트에선 이거사용)
	데이터소스를 메모리로 바꾸면됨
		url: jdbc:h2:mem:test
	이러면 메모리로 띄움
	
	근데 스프링부트에선 그냥 설정이 없으면 메모리모드로 돌려서,spring에 있는거 다지워도됨(jpa까지)
	
	
	
5.상품 도메인 개발
	ddd에선,자기자신을 건드리는건 자기자신안에 메서드있는게 응집도가 높아져서,자기객체안에 메서드를 넣는경우가 많이있음(비즈니스로직이 엔티티내부에있는)
	
6.주문도메인 개발
	엔티티 자기자신의 값을 출력하거나,직접적으로 뭘 해야하면 엔티티에다가 비즈니스로직을 넣을수있음
	
	이렇게 서비스는 단순히 엔티티에 요청을 위임하는거만 하는게 도메인모델패턴이고,
	서비스에서 대부분의 비즈니스로직을 처리하는걸 트랜잭션스크립트 패턴이라고 함
	
	그리고 캐스케이드가 걸려있으면,영속화할때 젤 위에있는거만 하면 됨
	이 캐스케이드는,참조하는곳이 딱 그 객체밖에 없을때(자기의 하위개체일때)만 넣는게좋음
	
	그리고 생성로직은 딱 하나만 만들어야하기때문에,생성자를 만들어두면 기본생성자를 막아야함(protected로)
	롬복쓰면
		@NoArgsConstructor(access = AccessLevel.PROTECTED)
	이거 클래스에 붙이면됨
	
	그리고 jpa를 사용하면,데이터만 바꿀땐,더티체킹해서 변경내역을 자동으로 업데이트해줌
	
	테스트는 단위테스트를 빡세게,통합은 제대로 잘붙어있는지 확인하는용도


	jpa에서 동적쿼리는,따로 조건을 모아둔 클래스를 만들고,그걸 참조해서 넘길수있음
		return em.createQuery("select o from Order o join o.member m"
							+ " where o.status=:status "
							+ " and m.name like :name ",
					Order.class)
			.setParameter("status", orderSearch.getOrderStatus())
			.setParameter("name", orderSearch.getMemberName())
			.setMaxResults(1000) //페이징할때 setFirstResult(100)이렇게 스타트포지션잡을수있음
			.getResultList();
	기본적으로 항상 다 들어가는값이면 저렇게하는데,동적쿼리의 경우는 저게안되니(조건따라 있을수있고 없을수있으니)
	젤 무식한방법은 null체크해서 직접 문자열로 생성하는거고(안씀)
	좀 더 나은건 jpa criteria(안씀)
	보통 사용하는건 Querydsl
	
	
7.웹계층 개발
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	