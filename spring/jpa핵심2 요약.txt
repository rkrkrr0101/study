1.api개발 기본
	엔티티를 직접 받거나 보내면 안됨(dto를 거쳐서 받고 보내야함)
	만약 엔티티를 건드려야하는 일이 생기면,api스펙자체가 바뀌어버리기때문
	그래서 api스펙을 위한 데이터 트랜스퍼 오브젝트(dto)를 필수적으로 만들어야함
	
	기초적인 방법으론,dto를 받아서 컨트롤러내에서 엔티티를 만들어 삽입하는방식이 있음
	이거의 장점은
		현재 내가 여기서 받을수있는 데이터를 명확히 알수있음
		현재 로직에 대해 밸리데이션하기 편함
		엔티티와 api스펙을 명확히 분리할수있어서,엔티티를 마음놓고변경할수있음
	이 있음
	
	엔티티엔 롬복중 getter정도만 사용하고,dto는 막 써도됨(allRequestConstructor같은거)
	
	조회시에도 엔티티를 직접 노출하면,위의 문제 말고도  많은문제들이 있는데
	다른문제로 
		엔티티의 정보들이 다 클라로 가버리면 보안문제임(이걸 @jsonIgnore로 해당값을 뺴버리는식으로 처리할수있긴한데,워스트프렉티스)
		엔티티에 뷰를 위한 로직이 추가됨
		여러 api가 한 엔티티를 사용할때 머리아파짐
		컬렉션을 직접 반환하면,api스펙을 변경하기어려움(전체값을 하나의 키에다가 밀어넣어야,나중에 뭐 추가하기좋음)
			{
				data:[...], //컬렉션을 여기에 넣어야함
				count:30
			}
	이거도 dto를 쓰는게 나음
	그리고 컬렉션 직접반환을 해결하려고 제네릭(<T>)을 사용해서 데이터뭉치를 받은다음에 한변수에 그걸 다때려박아버리면 직접반환문제도 해결됨
	    @Data
		@AllArgsConstructor
		static class Result<T>{
			private T data; //여기에 컬렉션 때려박기
			private int count;
		}
	이후 사용할떈
	    List<MemberDTO> collect = findMembers.stream()
                .map(m -> new MemberDTO(m.getName()))
                .collect(Collectors.toList());

        return new Result(collect, collect.size());
	즉,리스트를 바로 던져버리면 안되고,그걸 싸서 던져야 나중에 뭐 추가할때 편함

2.api개발 고급-지연로딩과 조회성능 최적화	
	성능문제가 되는건 어지간하면 조회에서 나옴
	
	xToOne(컬렉션이 아닐때)의 성
	
	그리고 엔티티를 바로리턴하면json으로 변환해서 넣게되는데,이때 양방향관계가 있으면 무한루프에 걸리게됨(반대쪽가서 다시 이쪽으로 넘어오니까)
	이때 @JsonIgnore로 막는 워스트프렉티스가 있음
	
	그리고 fetch가 lazy로 들어있으면 프록시로 들어가있는데,이걸 직접반환하면 json으로 변환할수없으니 에러가 나는데,
	그래서 Hibernate5JakartaModule라이브러리를 받아서 빈으로 등록해두면 일단 해결되긴함
	근데 이러면,만약 지연로딩엔티티를 한번 호출하면 그값이나오고,아니면 널이 나옴
	아예 설정으로 가져오게 할수도있고 그런데, 당연히 n+1이나가고,필요없는 엔티티필드도 다 긁어오고,엔티티노출되니까 스펙도못바꾸고 머리아파짐 ㅋㅋ
	
	그러니까 dto를 쓰고 페치조인을 하자..
	dto쓰는건 dto를 만들고,도메인을 받아서 dto로 변경하는 생성자를 만들고
	    List<Order> all = orderRepository.findAllByString(new OrderSearch());
        List<SimpleOrderDTO> collect = all.stream()
                .map(o -> new SimpleOrderDTO(o))
                .collect(Collectors.toList());
        return collect;
	이렇게 스트림돌리던가 for문돌리면됨(물론 이때 리스트 그대로 반환이 아닌,뭘로 한번 더 싸서 보내는게 좋음)
	그리고 dto는 엔티티를 참조해도 괜찮음,별로 안중요한데서 중요한걸 의존하는거라,문제생겨도 무시하면됨(dto를 피의존하는게 별로없으니)
	이거만하면 일단 엔티티노출문제는 해결되지만,n+1은 아직 남아있음
	이건 페치조인으로 해결해야함
		public List<Order> findAllWithMemberDelivery() {
			return em.createQuery(
					"select o from Order o" +
							" join fetch o.member m" +
							" join fetch o.delivery d", Order.class
			).getResultList();
		}	
	이런식으로 레포지토리에 만들어서 저거로 들고오면됨
		List<Order> all = orderRepository.findAllWithMemberDelivery()
	이렇게
	
	그리고 엔티티를 안거치고 바로 dto로 받을수도있음
	    return em.createQuery("select new jpabook.jpashop.repository.SimpleOrderQueryDTO(o.id,m.name,o.orderDate,o.status,d.address) " +
                        " From Order o " +
                        "join o.member m " +
                        "join o.delivery d ", SimpleOrderQueryDTO.class)
                .getResultList();
    이런식으로 하면 되긴함(이때 dto를 직접받을땐 fetch를 붙일수없기때문에,직접 깡조인해야함)
	이게 select가 적어서 부하가 적긴한데,쿼리가 ㄹㅇ개쓰레기같다는 단점이 있음,그냥 깡sql짜는거랑 별차이없음
	
	그래서 그냥 페치조인만 하는거랑,dto를 사용하는건
		dto로 직접안받음
			쿼리가 보기편하고
			재사용성이 좋음
			영속엔티티를 직접받기때문에 수정이 가능
			단,필요없는 컬럼도 다받아야함
		dto로 직접받음
			컬럼을 원하는거만 받아서 부하를 줄일수있음
			영속엔티티가 아닌 dto로 받기때문에,영속성컨텍스트 객체를 받지못해서 수정이 불가능 
			단,쿼리가 쓰레기같음
			단,재사용이 거의 불가능
			단,api스펙에 레포지토리가 종속됨(스펙바뀌면 바로 뜯어고쳐야함)
	두개는 트레이드오프가 있으니,상황따라 써야함(어지간하면 걍 엔티티로 받는게나아보이긴하다)
	그냥 기본을 엔티티로 가져가고,정 튜닝해야하면 그거만 수정하자(곱연산에 신경쓰고,합연산은 대충살자..)
	
	이런 튜닝된 dto검색쿼리는,따로 하위리포지토리로 빼는게 좋음(수정할일있으면 거기서 수정하는게 나음)
	리포지토리는 엔티티검색용으로 순수하게 유지하는게 좋음
	
3.api개발 고급-컬렉션 조회 최적화
	oneToMany같은 xToMany(어짜피 매니투매니는 안쓰지만)에서는 1개의 로우에 n개의 로우가 딸려들어오게됨(n개로 뻥튀기됨)
	즉 이런 컬렉션을 받는애들은 최적화가 빡셈
	
	이거도 당연히 dto로 바꾸고,페치조인을 써야하는데,페치조인을 쓰는곳에서 차이가 있음
	문제는,oneToMany속에 oneToMany이 있든가 이렇게되면,dto로 바꾸는거도 좀 머리아픔
	왜냐면,dto안에는 엔티티가 있으면 안됨(이러면 해당엔티티는 노출이 안되지만,하위엔티티는 그대로 노출됨)
	즉 엔티티는 무슨일이있어도 노출하면안됨(값 객체는 ㄱㅊ)
	그래서 해당dto를 또 만들어서 그걸 참조해야함
        public OrderDTO(Order o) {
            orderId = o.getId();
			...
            address = o.getDelivery().getAddress();
            orderItems = o.getOrderItems().stream()
                    .map(orderItem -> new OrderItemDTO(orderItem))
                    .collect(Collectors.toList());
        }	
	이런식으로 내부에서도 dto를 참조해야함
	일단 이러면 엔티티노출은 해결되는데,n+1은 페치조인으로 해결해야함
	이때도 주의사항이 있는데,
		로우뻥튀기때문에 distinct를 사용해야함(안쓰면 rdb말고 엔티티도 갯수가 늘어남 ㅋㅋ,하이버네이트6부터는 자동으로 붙인다고함)
		컬렉션여러개를 페치조인할수없음(나가기는 하는데 개판나니까 쓰면안됨,이건 1:n이 2개있는걸 말하는게 아닌,1:n:m같은걸 말하는거)
		기본적으로 페이징이 불가능
	하는건 똑같음
	        return em.createQuery(
                "select o from Order o " +
                        "join fetch o.member " +
                        "join fetch o.delivery d " +
                        "join fetch o.orderItems oi " +
                        "join fetch oi.item i", Order.class).getResultList();
	그냥 패치조인하고,한단계밑도 패치조인하면됨(별칭은 하이버네이트기능,별칭주는건 상관없는데(가급적안하는게 낫다지만),패치조인대상으로 where걸면안됨)
	단,이거만하면 페이징이 불가능함(컬렉션(일대다) 패치조인시 페이징이 불가능,정확히는 메모리에서 페이징을 해버려서 의미가없고,oom나기쉬움)
	
	이 일대다 컬렉션 페치조인 페이징은,일대다를 페이징하려면,라이브러리단이 아닌,
	db단에서 로우레벨로 컨트롤해야하는데(리미트갯수 가지고있다가,딱 그 리미트갯수 넘기면 그만둬야하니까,일대다는 값이 몇개나올지몰라서 라이브러리단에선 불가능),
	각 벤더마다 페이징하는방식이 달라서 불가능함
	그래서 하이버네이트는 메모리에서 해버리는데,이건 절대 사용하면안됨(oom)
	즉 일반적인 방식으론 불가능하고,대신
	그래서 이걸 하려면,
		ToOne을 전부 페치조인함(얘들은 row수증가가 없어서 상관없음,얘들은 계속 체인타도 상관없음(오더.멤버.딜리버리...))
		컬렉션은 지연로딩을 사용해서 조회(페치조인을 사용하지않음)
		지연로딩 성능최적화로,한번에 가져오는 갯수를 정해서,배치로 한번에 긁어옴(이걸 사용하면,이 갯수만큼을 한번에 긁어옴)
			hibernate.default_batch_fetch_size //글로벌설정
			@BatchSize //로컬설정
		그러면 toOne만 페치조인했으니까 페이징붙여도 상관없어짐				
	즉,데이터가 증가하지않는건 신경쓰지말고 페치조인하고,지연로딩에서 n+1터질걸,한번에 배치로 가져와서 해결하는방식임((n/배치)+1)
	이떄
	    public List<OrderDTO> ordersV3_page(
            @RequestParam(value = "offset", defaultValue = "0") int offset,
            @RequestParam(value = "limit", defaultValue = "100") int limit
		) {...}
	오프셋과 리미트를 넣고
	    public List<Order> findAllWithMemberDelivery(int offset, int limit) {
			return em.createQuery(
					"select o from Order o" +
							" join fetch o.member m" +
							" join fetch o.delivery d", Order.class
			).setFirstResult(offset).setMaxResults(limit).getResultList();
		}
	이렇게 평범하게 api로 사용하고,
	그리고 default_batch_fetch_size: 100를 세팅하거나(이건 기본적으로 넣어두는게좋음), //이값은 100~1000사이 넣어두면됨
	@BatchSize로 개별적으로 세팅해서 사용
	이건 엔티티에 적용하면됨
		@BatchSize(size = 1000)
		@OneToMany(mappedBy = "order", cascade = CascadeType.ALL)
		private List<OrderItem> orderItems = new ArrayList<>();	
	이러면(@BatchSize) 쿼리에 메인테이블의 식별자(id)를 가지고 in을 사용해서 그 갯수만큼 1차캐시에 넣어둠
		in(3,4,7,11) 
	이런식으로 pk인덱스활용해서 떙기는데,
	이건 페치조인되거나 원래 엔티티의경우 전부 로딩이 되니까,
	거기에 포린키값이 있으니 그걸가지고 in절을 구성해서 던지는거임(배치갯수만큼)
	
	이게 컬렉션페치조인하는거랑 트레이드오프는,
		쿼리호출수가 약간 증가하지만,db데이터전송량이 감소함(쌤쌤임)
		페이징이 가능해짐
	즉,toOne로 쿼리수를 줄이고,컬렉션은 지연로딩시키고 배치를 활용하자..가 답
	아예 toOne도 다 페치조인빼버려도 되긴하는데..굳이 그럴필요가 없음,일단 쿼리갯수가 증가하긴하니까 넣는게좋음
	
	이때 default_batch_fetch_size의 갯수는,100~1000이 추천인데(in쿼리 1000개넘으면 에러띄우는 db종류가있음),
	어짜피 서버쪽에선 다 로드해야해서 크면클수록 좋지만(총 메모리사용량은 같고,점유시간은 길어짐,쿼리시간이 길어지니),
	커지면 db에 순간부하가 걸리므로 그거 생각해서 결정해야함(1000 1개,100 10개)
	애매하면 500잡자 ㅋㅋ
	
	
	
	jpa에서 dto를 직접조회할때 컬렉션이 있으면,new로 드럽게 짜도,컬렉션을 넣을순없음(생성자로 못넣음)
	그래서 일단 컬렉션을 제외하고 dto를 생성한뒤,
		List<OrderQueryDTO> result =em.createQuery("select new jpabook.jpashop.repository.query.OrderQueryDTO(o.id,m.name,o.orderDate,o.status,d.address) from Order o " +
					" join o.member m" +
					" join o.delivery d", OrderQueryDTO.class)
			.getResultList();	
	foreach같은거로 직접 넣어줘야함
	    result.forEach(o -> {
            List<OrderItemQueryDTO> orderItems = findOrderItems(o.getOrderId());
			o.setOrderItems(orderItems);
        });
		private List<OrderItemQueryDTO> findOrderItems(Long orderId) {
			return em.createQuery("select new jpabook.jpashop.repository.query.OrderItemQueryDTO(oi.order.id,i.name,oi.orderPrice,oi.count)" +
                        " from OrderItem oi" +
                        " join oi.item i" +
                        " where oi.order.id=:orderId", OrderItemQueryDTO.class)
                .setParameter("orderId", orderId)
                .getResultList();
		}
	이렇게(사실 jpa단일로 이렇게쓰는건 너무 실전성없어보이고,querydsl사용해야댈듯..)
	
	이건 루트1번,컬렉션n번 실행하는식인데,
	toOne들을 먼저 조회하고,toMany를 별도로 처리하는식임
	이유는,toOne는 row가 증가하지않아서 최적화가 쉬우니까 한번에 묶어서처리하고,
	toMany는 최적화가 어려우니까 따로 메소드로 빼서 복잡성을 낮춤
	단 이렇게하면,1+n(컬렉션수)가 되니까 최적화해야함
	단 조회하는 메인테이블에서 결과가 1개나올거로 예측되면 걍 이거써도됨,똑같은데 코드는 간단함
	
	컬렉션 최적화는,id값들을 스트림으로 맵돌려서 리스트로 받은뒤에,이걸로 in을 사용해서 한번에 가져오는방식임
        List<Long> orderIds = result.stream()
                .map(o -> o.getOrderId())
                .collect(Collectors.toList());

        List<OrderItemQueryDTO> orderItems = em.createQuery("select new jpabook.jpashop.repository.query.OrderItemQueryDTO(oi.order.id,i.name,oi.orderPrice,oi.count)" +
                        " from OrderItem oi" +
                        " join oi.item i" +
                        " where oi.order.id in :orderIds", OrderItemQueryDTO.class)
                .setParameter("orderIds", orderIds)
                .getResultList();	
	이때,원래테이블과 컬렉션을 합쳐야하니까,컬렉션을 람다써서 Map으로 바꾸고
		Map<Long, List<OrderItemQueryDTO>> orderItemMap = orderItems.stream()
			.collect(Collectors.groupingBy(orderItemQueryDTO -> orderItemQueryDTO.getOrderId()));
		
		result.forEach(o -> o.setOrderItems(orderItemMap.get(o.getOrderId())));
		return result;
	맵에서 키로 찾아서 넣은다음에 리턴해주면됨
	즉,in을 사용해서 한번에 컬렉션을 긁어온뒤에,그걸 메모리에서 그룹바이로 합치고,합쳐진걸 다시 메인리스트에 추가해주는느낌
	루트를 다 조회한뒤에,해당되는 컬렉션들을 in으로 한번에 긁어와서,메모리에서 나머지를 처리하는느낌임
	단,이건 in을 사용하니까,데이터가 1000건 넘어가면 에러가남
	
	그리고 좀더 최적화되면,메인과 컬렉션을 조인해서 가져올수도있음(이러면 한방쿼리니까)
	즉,dto에 메인dto와 컬렉션dto의 필드를 전부넣고 조인쳐서 한방에 긁어오고,어플리케이션에서 그룹바이치는거
	이때는,컬렉션을 걍 조인했기때문에,로우뻥튀기가 일어나기때문에,페이징이 불가능함
	그리고 만약 메인dto형식대로 맞춰야하면,dto를 파싱해서 메인dto의 형태로 직접 바꿔줘야함
	솔직히 쓸일없을듯 이거,어짜피 스프링데이터jpa쓰긴하겠지만
	
	정리하면,
		엔티티조회하는거로 우선 접근(DTO필수,페치조인도 필수)
			toOne는 페치조인사용
			컬렉션있으면 지연로딩+배치사이즈사용으로 페이징
		엔티티조회로 해결안되면 dto조회사용
			메인쿼리가 1건이면 n+1해도 1+1이니까 단순조회
			메인쿼리가 여러건이면 n+1터지니 in사용 최적화(코드가 많이복잡해짐)
		이거로도안되면 깡sql
	순서대로 결정하면됨
	근데 뭐 dto조회 쓸정도되면 캐시같은거 써서 해결해야해서..사용할일이 있을까
	그리고 엔티티는 그걸 바로 캐싱(레디스)하면안됨
	jpa도 영속성컨텍스트를 캐시로 관리하는데,캐시에 값이 있어버리면 둘을 동기화시켜줘야하기때문..
	그래서 엔티티를 dto로 변환한뒤,dto를 캐싱해야함
	
	엔티티 조회가,코드를 거의 건드리지않고 옵션변경으로 성능최적화 시도가 쉬움
	dto는 이런게 안돼서,코드를 엄청 건드려야함
	
	(참고:배치사이즈는 루트엔티티의 pk의 갯수만큼 동작함,하위엔티티의 갯수가 아님,
	즉 order과 orderItem이 있고 균등분배일때,order이 10개고,orderItem이 1000개,배치사이즈가 10이면,1000개를 다 가져오는거임
	결국 n+1도,의 n도 루트엔티티의 pk갯수니까..)
	
	
	
	
	
	
	
	