1.웹 애플리케이션 이해
	웹서버는,정적 리소스를 제공(html,css같은걸 배포하는 nginx,apache같은거)
	웹 어플리케이션 서버(WAS)는 웹서버+코드를 수행해서 애플리케이션로직을 수행할수있음(톰캣)
	
	보통 웹 시스템은,was와 db만 있으면 기본적시스템 구성은 다됨(동작시켜볼수있음)
	근데 애플리케이션로직이랑 정적 리소스를 같이두면,비용절감이 안됨
	그리고 was장애시 오류화면노출도 불가능함
	
	그래서 일반적으로,웹서버를 앞에두고,was를 뒤에둬서 웹서버와 was가 통신해서 받아가는식으로 처리함
	이러면 스케일링자체도 쉬위지고 좋은게많음(오류화면도 띄울수있고)

	서블릿은,공통되는 로직들을 전부 처리해줌(tcp연결과 http요청메시지 파싱 등)
	urlPatterns에 해당되는 url이 호출되면(http메시지에 있으면),그 안에있는 로직을 실행시켜줌
	그 안에 로직은,
	HttpServletRequest request,HttpServletResponse response 를 받아야함(각각 req와 res)
	정확히는,서블릿은 http요청메시지를 파싱해서 req를 만들고,res를 파싱해서 http응답메시지를 만드는거
	요청이 들어오면 req와 res를 만들고,응답할땐 res만 던지는식
	
	톰캣처럼 서블릿을 지원하는 was를 서블릿 컨테이너라고 함
	이 컨테이너는,서블릿객체를 생성,초기화,호출,종료하는 생명주기를 관리하고,
	서블릿은 싱글톤으로 관리됨(공유변수주의해야함)
	jsp도 서블릿으로 변환되고,동시요청을 위한 멀티쓰레드처리도 지원함
	
	쓰레드가 서블릿객체를 호출하는식으로,멀티쓰레드가 동작함(동시요청이 들어오면,쓰레드를 생성하고,걔가 서블릿을 호출하는것)
	각각의 쓰레드는 한줄한줄 절차지향처럼 읽음
	
	이떄 쓰레드갯수에 여러방식이 있는데,
		요청시마다 쓰레드생성(단점으로 생성비용이 비싸고,요청이 너무많이오면 oom으로 서버죽음)
		쓰레드풀(쓰레드를 n개 미리생성해두고,거기서 꺼내다가 쓰고나서 돌려놓는거,장점은 서버의 한계만큼까지만 생성하면,다운안되게 계산을 할수있음)

	쓰레드풀에서,was의 주요 튜닝포인트는 최대쓰레드임
	이게 너무 낮으면,서버리소스는 여유롭지만 클라이언트는 금방 응답지연되고
	이게 너무 높으면,oom뜨거나 쓰로틀링걸림
	
	장애발생시엔,
		클라우드면 일단 서버갯수부터 스케일링하고,이후 튜닝
		클라우드가 아니면,튜닝에 목숨걸어야함
	튜닝은,최대한 실제서비스와 유사하게 성능테스트를 시도해보면됨(nGrinder같은 툴로)
	
	결국 중요한건,멀티쓰레드를 was가 알아서 지원해주니까,싱글톤(서블릿,빈)인거만 신경쓰면됨(예전에 쓰레드만든다고 머리터졌는데 세상좋아졌다)
	
	html에서는 was가 정적리소스를 뱉거나,아니면 동적으로 html을 생성해서 전달하거나,api 세가지 방식이 있음
	이때 api는
		http js에서 호출
		모바일 클라이언트에서 호출
		다른 서버에서 호출
	이 3가지경우에서 사용됨
	api는 주로 json형식으로 통신
	
	서버사이드렌더링은,html 최종결과를 서버에서 생성해서 웹브라우저에 전달,
	정적화면에 사용,타임리프같은걸 사용
	
	클라이언트사이드렌더링은,html결과를 js를 사용해 웹브라우저에서 동적으로 생성해서 적용
	주로 동적화면에 사용하고,필요한부분만 리랜더링해서 갱신하는거(내가 나무실시간에서 한거)

	뷰템플릿은,html을 편하게 생성하는 뷰기능
	jsp->타임리프로 넘어옴

2.서블릿
	스프링부트는 서블릿을 등록할수있게 @ServletComponentScan을 지원함(쓸일은없을듯)
	서블릿 등록은 
		@WebServlet(name = "helloServlet",urlPatterns = "/hello")
		컨트롤o의 서비스(자물쇠잠긴거)등록후 내부에구현
	붙이면됨
	
	request.getParameter("abc")로 쿼리파라미터 조회가능
	res추가시엔
	    response.setContentType("text/plain");
        response.setCharacterEncoding("utf-8");
        response.getWriter().write("hello"+abc);
	이렇게 컨텐츠타입 정하고,텍스트면 인코딩정하고,저렇게 바디에 적으면됨

	main/resources/application.properties에서
		logging.level.org.apache.coyote.http11=debug
	넣어주면 로그를 디버그레벨로 올려서,http요청메시지볼수있음
	물론 운영서버는 저렇게하면안되고,개발환경에서만
	
	그리고 content-length같은건 was가 알아서 넣어줌
	
	서블릿은,http요청메시지를 파싱해서 httpservletRequest객체에 넣어서 제공해줌
	그리고 추가적으로,해당 http요청이 시작하고,끝날때까지 유지되는 임시저장소로 사용할수도 있음
		request.setAttribute(name,value)
		request.getAttribute(name)
	이렇게 저장,조회하는거,이렇게 지역변수가 할일을 싱글톤상태에서 사용할수있음
	세션관리기능도 있음
		request.getSession(create:true)
	그리고 httpservletRequest,httpservletResponse 둘 다 http요청,응답메시지를 기반으로 어댑팅된거니까 요청응답메시지를 알아야함

	req읽어올땐
		req.getMethod()
		req.getRequestURI()
		
	이런식으로 들고오면됨
	헤더전체읽을땐
		req.getHeaderNames().asIterator().
			forEachRemaining(headerName -> System.out.println("h = " + headerName));
	이렇게 이터레이터써서 읽으면됨
	그리고 값 가져오는건
		req.getServerName()
		req.getServerPort()
	로 호스트를 파싱해서 꺼낼수있고,
		req.getLocale()
	로 최우선적으로 원하는 언어(accept-Language)를 꺼낼수있음
	전부다꺼내려면
		req.getLocales().asIterator().
			forEachRemaining(headerName -> System.out.println("h = " + headerName));
	이렇게 getLocales를 사용하면 다 꺼낼수있음
	
	쿠키조회는
		Cookie cookie:req.getCookies()
	로 꺼내고
		cookie.getName()
		cookie.getValue()
	로 이름과 값을 읽을수있음
	쿠키는 getCookies() s붙었으니까 여러개가 들어오니까,여기서 자기가만든거 골라쓰면됨
	
	컨텐츠정보는
		req.getContentType()
		req.GetContentLength()
		req.getCharaterEncoding()
	로 받아올수있음

	물론 그냥
		req.getHeader("host")
	이렇게 getHeader로 꺼내는게 젤편하긴할듯


	req데이터에서 정보전달방식은
		get-쿼리파라미터
			/url?키1=값1&키2=값2
			검색,필터,페이징등에서 사용
		post-html form
			content-type:application/x-www-form-urlencodded
			메시지바디에 쿼리파라미터(키1=값1&키2=값2) 형식으로 전달
			회원가입,상품주문등에서 html form으로 사용
		http message body에 직접 데이터를 담아서 요청
			http api에서 주로 사용,json,xml,text
			데이터형식은 주로 json 사용
			post,put,patch


	쿼리파라미터는 URL에 ?를 시작으로 보내고,추가파라미터는 &로 구분하면됨
	쿼리파라미터를 전부꺼내려면
		req.getParameterNames()
	하면되고
	
	전체출력할땐
		parameterNames.asIterator().
			forEachRemaining(h -> System.out.println(h + "=" + req.getParameter(h)));
	이렇게 하면됨
		req.getParameter(h)
	로 해당파라미터이름을 꺼낼수있음


	그리고 ?username=hello&age=20&username=hello2
	이렇게 같은 이름으로 2개를 넣을수도있음
	이걸 뽑을땐
		req.getParameterValues("username")[1]
	이걸써서 이렇게 배열로뽑을수있음
	근데  이렇게 쓰면 헷갈리는데 이렇게쓰진않을거같다
	일단 이렇게됐을때 getParameter를 쓰면,처음넣은걸 반환하는듯

	html form이랑 쿼리파라미터랑은 서로 호환이 돼서,form도
		req.getParameter
	로 다꺼내면됨
	
	즉,클라입장에선 둘이 다른데,서버입장에선 둘다 똑같이 처리할수있음
	이 둘을 구분해야하면,content-type이 있나없나로 구분하면됨
	get은 바디가 없으니 content-type이 없고,form은 바디에 넣으니 content-type이 'application/x-www-form-urlencodded'임

	요청메시지바디에 데이터 담아서보낼땐,보통 json사용
	post,put,patch에서 주로 사용됨()
	
	바디에서 단순텍스트를 받고,이걸 꺼낼땐
	    ServletInputStream inputStream = req.getInputStream();
        String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
	이렇게 getInputStream으로 받아서,StreamUtils.copyToString로 스트링으로 바꿔주면됨
	
	json을 받고,꺼낼땐,
	보통 json은 데이터클래스를 만들어서(도메인 클래스)사용함
	일단 텍스트로 그냥 받고꺼낼땐
	    ServletInputStream inputStream = req.getInputStream();
        String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
	이렇게 똑같이꺼내면되고(어짜피 텍스트니까)

	데이터클래스로 꺼낼땐
		private ObjectMapper objectMapper = new ObjectMapper();
		HelloData helloData = objectMapper.readValue(messagebody, HelloData.class);
	이런식으로 꺼낼수있음(readValue의 2번째 매개변수에 클래스를넣으면,거기맞는 게터세터형식으로 넣어서 나옴)		


	httpservletResponse객체는
		응답메시지를 생성해주고(응답코드지정,헤더생성,바디생성)
		편의기능(content-type,쿠키,리다이렉트)
	등을 쉽게 지정할수있음
	
	응답코드지정은
		resp.setStatus(200);
		resp.setStatus(HttpServletResponse.SC_OK); //200상수
	이런식으로 넣을수있음
	컨텐츠타입은
		resp.setContentType("text/plain");
		resp.setCharacterEncoding("UTF-8");
	그외 각종 헤더입력은
		resp.setHeader("Cache-Control", "no-cache,no-store,must-revalidate");
		resp.setHeader("헤더명", "헤더값");
	사용자 지정 헤더도
		resp.setHeader("abcd123", "ttt123");
	이렇게 넣으면됨
	
	쿠키는
		Cookie cookie=new Cookie("mycookie","good")
		cookie.setMaxAge(600);
		resp.addCookie(cookie)
	이렇게 넣을수있음
	
	리다이렉트(location헤더+302상태코드)는
		resp.sendRedirect("/basic/hello-form.html");
	로 넣을수있음
	
	메시지바디에 뭐 적을땐
		resp.getWriter().println("ㅎㅇ요");
	이렇게 적으면됨
	
	
	html 응답메시지도
		단순텍스트응답(resp.getWriter().println(""))
		HTML응답
		HTTP API-messageBody json 응답
	이렇게 있음
	
	html보낼땐
		resp.setContentType("text/html"); //컨텐츠타입 html로
        resp.setCharacterEncoding("UTF-8");//인코딩정하고

        PrintWriter writer = resp.getWriter();
        writer.println("<html>");
		... html작성
	이렇게 보내면됨
	
	json으로 보낼땐
        resp.setContentType("application/json");
        resp.setCharacterEncoding("UTF-8");

        HelloData helloData = new HelloData();
        helloData.setUsername("afa");
        helloData.setAge(30);

        String result = objectMapper.writeValueAsString(helloData);
        resp.getWriter().write(result);	
	이렇게 객체생성하고,오브젝트매퍼로 스트링으로바꿔서 적으면됨(이러면 변수명을 getter콜해서 키값으로 만들어서 json형식으로 만듬)



3.서블릿,jsp,mvc패턴
	이렇게하면
		public List<Member> findAll() {
			return new ArrayList<>(store.values());
		}
	저걸 조작해도 스토어엔 영향을 안줌(DTO)
	
	배열안에 있는 멤버들 검증할땐
		List<Member> result = memberRepository.findAll();
		Assertions.assertThat(result).contains(member1, member2);

	서블릿에서 html보내는건 진짜불편하다->템플릿엔진의 등장
		템플릿엔진=html에 코드넣기
		서블릿은 코드에 html넣기
	대표적 템플릿엔진에 jsp,타임리프등이 있음
	
	jsp는
		<%@ page contentType="text/html;charset=UTF-8" language="java" %>
	가 맨위에 꼭 있어야함
	jsp에서 코드실행시킬땐 <% %>사이에 넣으면되고
	코드를 출력할땐
		<%= %>
	사이에 넣으면됨
	임포트는 맨위에 
		<%@ page import="hello.servlet.domain.member.Member" %>
	그리고 jsp에서는 request,response가 이 단어 그대로 문법상으로 지원이 됨
	out도 예약어
		out.write(<head>)

	jsp는 서블릿보다 나아지긴했는데,일단 html이랑 코드랑 붙어있는게 불편하고(관심사의 분리가 안됨)
	컨트롤러와 뷰가 붙어있어야하는거도 불편함
	
	이래서 나온게 mvc패턴
	하나의 서블릿이나 jsp만 가지고 처리하던걸,컨트롤러와 뷰로 나눈걸 말함
	
	나눈 이유는,일단 한곳에 코드가 너무많이 몰려있기도 하고,중요한건 변경주기가 서로 다르기때문임
	ui를 변경하는것과 비즈니스로직을 수정하는일은 빈도수가 다르고,서로에게 영향을 주지 않기때문
	
	컨트롤러는 http요청을 받아서 파라미터를 검증하고,비즈니스로직을 실행함,그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담음(서블릿)
	모델은 뷰에 출력할 데이터를 담아둠,뷰가 필요한 데이터를 모두 모델에 담아서 전달해줘서,뷰는 비즈니스로직이나 데이터접근을 몰라도되고,렌더링만 하면됨(req)
	뷰는 모델에 담겨있는 데이터를 사용해서 화면을 그리는일만 함(jsp)
	
	즉,원시적인 mvc는
		사용자가 http로 컨트롤러를 호출
		컨트롤러는 모델에 데이터를 담음
		컨트롤러는 뷰 로직을 실행함
		뷰 로직은 모델에서 데이터를 가져가서 화면을 그림(보통 매개변수로 모델을 던져줌)
	뷰에서 필요한 모든 데이터는 모델에서 꺼내가야하고,뷰가 외부일을 알면 안됨
	
	여기서 컨트롤러가 하는일이 너무 많다고,분리한게 컨트롤러,서비스,레포지토리임
		컨트롤러는 웹쪽의 입력을 받아서 서비스를 호출해서 결과값을 모델에 넣고 뷰를 호출하는 책임만 받고(말그대로 컨트롤하는일만 담당함),
		서비스가 비즈니스로직을 수행하는 책임
		레포지토리가 데이터 접근을 수행하는 책임
	을 맡음
	
	req에 값을 넣고뽑을땐 
		req.setAttribute()
		req.getAttribute()
	로 쓸수있음(모델로 쓸때)
	
	컨트롤러에서 뷰로 이동할때
		 RequestDispatcher dispatcher = req.getRequestDispatcher(viewPath);
		 dispatcher.forward(req,resp);
	로 이동가능(다른서블릿이나 jsp로 이동하는기능,서버내부에서 다시 호출이 발생함,즉 리다이렉트가 아님)
	
	리다이렉트는 클라이언트로 다시 갔다가 다시올라오는것,클라이언트가 인지할수있음,
	forward는 서버내부에서 콜하는것,클라에는 영향을안줌,즉 상단의 url이 안바뀜
	
	html에서 action=''이 절대경로가 아닌 상대경로면(/members/save는 절대경로,save는 상대경로),
	현재 url을 기준으로 /save를 붙여서 찾음
	즉
		mvc/members/new-form ->상대경로save호출 ->mvc/members/save
	일반적으론 절대경로사용함
	
	/WEB-INF경로안에 jsp가 있으면,이건 외부에서 직접 호출할수없고,
	서버내부에서 컨트롤러를 통해서만 접근할수있음(이 경로안에 있는 모든 리소스가 직접호출불가)

	jsp에서
		${}
		${member.id}
	이렇게하면,req안에 있는 해당 애트리뷰트를 접근할수있음(해당 애트리뷰트의 getter를 호출),이걸 프로퍼티접근이라고함

	jsp내에서 foreach돌려서 안에꺼 꺼내야할때
		<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
	위에 선언하고
		<c:forEach var="item" items="${members}">
			<tr>
				<td>${item.id}</td>
				<td>${item.username}</td>
				<td>${item.age}</td>
			</tr>
		</c:forEach>	
	이렇게 forEach를 돌릴수있음
	
	
	이렇게 서블릿과 jsp를 사용해서 mvc를 적용하면,컨트롤러단과 뷰단을 완전히 분리할수 있음
		근데 컨트롤러단에서의 중복(forward같은)과,
		viewPath의 중복(프리픽스와 서픽스),
		템플릿엔진변경시 코드를 다 갈아야한다는점,
		req와 res를 사용하지않을때(특히 res),
		테스트코드작성이 어려움
		공통처리가 어려움(제일 큰 단점,반드시 콜해야하는걸 까먹고 하지않았을때)
	단점이 있고
	가장 큰 문제는 공통처리임
	그래서 나온게,컨트롤러 호출 전에 공통기능을 처리하는,프론트 컨트롤러 기능임
	즉,api게이트웨이같은 컨트롤러를 두고,걔가 공통기능들을 다 처리하고 나서 뒤에 진짜컨트롤러들을 url에 맞게 호출하는식
	이게 스프링mvc의 핵심임
	
	
4.mvc 프레임워크 만들기	
	프론트컨트롤러 패턴은,모든 http요청을 한군데서 받아서,거기서 모든 공통로직을 실행시키고나서 각 url에 맞게 배분하는거임
	프록시라고 보면될듯
	
	서블릿으로 구현할땐,얘만 서블릿으로 구현하고 나머지 컨트롤러는 서블릿을 사용하지않아도됨(어짜피 얘가 다받고 호출할거니까)
	
	url매핑정보같은경우엔 어디다 모아두고 거기서 조회하는식
	
	프론트컨트롤러에서 url 전부 받을떈
		@WebServlet(name = "frontControllerServletV1", urlPatterns = "/front-controller/v1/*")
	이렇게 와일드카드로 현재 경로 밑에걸 전부 받으면됨
	
	그리고
	생성자로 경로들을 지정해둔뒤
		private Map<String, ControllerV1> controllerV1Map = new HashMap<>();
		public FrontControllerServletV1() {
			controllerV1Map.put("/front-controller/v1/members/new-form", new MemberFormControllerV1());
			controllerV1Map.put("/front-controller/v1/members/save", new MemberSaveControllerV1());
			controllerV1Map.put("/front-controller/v1/members", new MemberListControllerV1());
		}	
	서블릿 내에서 url을 받아서 해당 컨트롤러를 꺼내면됨
		String requestURI = req.getRequestURI();
		ControllerV1 controller = controllerV1Map.get(requestURI);
	
	없을경우 예외처리해주고
	    if (controller == null) {
            resp.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
	해당 컨트롤러 실행
		controller.process(req, resp);
	
	
	아키텍처 개선시,단계적으로 하나씩(구조건드릴땐 구조만,코드건드릴땐 코드만)해야함
	구조개선하고 커밋하고 동작확인하고,다음날부터 코드디테일개선하는식
	
	컨트롤러에서 뷰로 이동할때도 위에서 map만들어서 get하는거처럼 전담객체를 만들어서 똑같이할수있음(컨트롤러가 뷰 객체를 프론트컨트롤러에 반환하는식)
	
	그리고,하위 컨트롤러에선 req,res가 필요가 없음,
	어짜피 데이터만 받으면되는데 이거만 따로 map으로 받는게 더 테스트도 그렇고 편함(서블릿 종속성 제거)
	그래서 모델과 뷰가 묶여있는 모델뷰를 반환받고,모델을 떼서 뷰.렌더에 넣어주면됨
	
	그리고 뷰같은경우,겹치는 경로랑 확장자를 묶어서,경로변경이 일어나도 한군데서만 수정할수있게 하면 편함(뷰리졸버)
	
	req파라미터 전부 꺼내서 넣을땐
		Map<String, String> paramMap = new HashMap<>();
        req.getParameterNames().asIterator()
                .forEachRemaining(paramName -> paramMap.put(paramName, req.getParameter(paramName)));
	
	그리고 이런건 메서드로 뽑는게 좋음(컨트롤알트m)
	
	즉,컨트롤러에서 req를 맵으로 받고,모델뷰는 뷰이름과 모델(req대체,의존성제거목적)을 받은뒤,
	프론트컨트롤러는 req를 맵으로 바꿔서 하위컨트롤러를 콜함
	하위컨트롤러에선 처리할거 처리한후 뷰이름과 짬처리할데이터들을 모델에 담아서 모델뷰를 만들어 리턴함
	그럼 프론트컨트롤러에서 뷰리졸버로 뷰경로를 만들고,뷰를 생성함
	그리고 뷰에 모델을 던져서,
	뷰는 그 모델을 가지고 req에 setAttribute하든 뭘하든(jsp는 req에 넣는게 편함,템플릿엔진마다 다름) 해서 화면을 그림
	
	
	근데 이렇게하면,실제 구현할때 객체생성하고 반환하는부분이 귀찮음
	어짜피 모델뷰는 하는게 뷰이름+모델이니까,뷰이름만 반환하면되니,그렇게 객체생성을 없앨수있음
	
	/**엔터하면 현재파라미터와 리턴값 주석으로나옴
	
	자바에서 map은,얕은복사라서 매개변수로 넘겨주고 변경이 일어날경우,어디서든 그값이 적용됨
	
	만약 인터페이스를 여러개 쓰고싶으면,어댑터 패턴을 사용해서 구현하면됨
	즉 핸들러 어댑터를 구현해서,입력값에 따라 핸들러어댑터를 찾아서,그걸 사용해서 조회하면,핸들러어댑터가 컨트롤러를 호출해서 리턴을 받는식
	즉,직접 컨트롤러를 호출하는게 아닌,핸들러가 컨트롤러를 호출하는방식
	사실상 핸들러가 컨트롤러라고 봐도되는데,핸들러인 이유는 컨트롤러보다 더 넓은 범위를(컨트롤러를 포함한)처리할수있기때문
	
	어댑터를 사용하면,무조건 출력결과값을 맞춰야함
	만약 해당 컨트롤러의 출력이 거기 맞지 않으면,어댑터가 생성해서라도 맞춰서 반환해야함

	어댑터가 해당 인스턴스를 지원하는지 확인할땐
	    public boolean supports(Object handler) {
			return (handler instanceof ControllerV3);        
		}
	이렇게하면됨(bool값)
	
	알트 쉬프트 인서트=세로편집모드(엑셀블록선택처럼 선택됨)
	
	즉 어댑터를 사용하면,입출력형식을 맞출수있어서,여러 컨트롤러를 쓰고싶은걸 골라쓸수있어짐
	즉,핸들러어댑터의 인터페이스에만 의존하니까 구현클래스변경이 쉬워짐
	
5.스프링mvc 구조이해
	스프링에서 이름은
		프론트컨트롤러->DispatcherServlet
		handlerMappingMap->HandlerMapping
		ModelView->ModelAndView
	중요한건 DispatcherServlet
	얘도 프론트컨트롤러패턴이고,얘가 스프링mvc의 핵심임
	스프링부트는,DispatcherServlet을 서블릿으로 자동등록하면서,
	urlPatterns="/"에 매핑함(더 자세하게적은게 우선순위가 높아서 다른서블릿도 작동하는거)
	
	그리고 DispatcherServlet의 부모에 가보면,service를 오버라이드 해둬서,
	이걸시작으로 여러메소드가 호출되면서 DispatcherServlet.doDispatch()가 호출됨
	얘가 핵심인데,얘는 우리가 만들었던 프론트컨트롤러랑 비슷하게 동작함
		핸들러조회
		핸들러어댑터조회
		핸들러어댑터실행->어댑터를통해 핸들러실행->모델앤뷰 반환
		뷰 렌더링호출->뷰 리졸버로 뷰찾기->뷰 반환
		뷰 렌더링
	순서임
	
	스프링mvc의 가장 큰 강점은,DispatcherServlet을 변환하지않고 원하는 기능을 변경하거나 확장할수있음
	대부분이 인터페이스로 돼있어서,이 인터페이스를 구현해서 DispatcherServlet에 등록하면,커스텀 컨트롤러생성이 쉬움(커스텀이니까 안하는게좋지만)
	
	컨트롤러가 호출되려면
		핸들러매핑에서 컨트롤러를 찾고(스프링빈의 이름으로 핸들러를 찾을수있는 핸들러 매핑이 필요)
		핸들러매핑으로 찾은 핸들러를 실행할수있는 핸들러 어댑터가 필요(해당 인터페이스를 실행할수있는 어댑터를 찾아서 실행)
	
	스프링부트를 쓰면,자동으로 등록하는 핸들러매핑과 어댑터는(위부터 우선순위높음)
	핸들러매핑은
		RequestMappingHandlerMapping// 애노테이션기반의 컨트롤러인 @RequestMapping에서 사용
		BeanNameUrlHandlerMapping //스프링빈이름으로 핸들러찾음
	BeanNameUrlHandler는,@Component("/url") 저 이름으로 스프링빈이 등록되면,저 이름의 스프링빈을 찾는거(url이름의)
	핸들러 어댑터는(위부터 우선순위높음)
		RequestMappingHandlerAdapter// 애노테이션기반의 컨트롤러인 @RequestMapping에서 사용
		HttpRequestHandlerAdapter //httpRequestHandler 처리
		SimpleControllerHandlerAdapter //Controller 인터페이스(어노테이션이 아닌 과거에 쓰던거)처리
	
	즉 실행순서는
		1.핸들러 매핑의 우선순위대로 실행해서 핸들러를 찾고
		2.찾은 핸들러를 가지고 핸들러어댑터의 supports를 우선순위대로 실행해서 맞는걸 찾고
		3.핸들러어댑터에 핸들러를 들고 실행후 결과반환(디스패쳐서블릿이)
	
	뭐 실제로 쓰는건 @RequestMapping이겠지만
	
	뷰 리졸버는,application.properties에서
		spring.mvc.view.prefix=/WEB-INF/views/
		spring.mvc.view.suffix=.jsp
	를 추가해주면,기본 뷰리졸버가 modelandview에서 논리이름 앞뒤에 저걸 붙여서 거기로 던져줌
	즉
		return new ModelAndView("new-form");
	이거만해도 자동으로 뷰리졸버를 타고 
		/WEB-INF/views/new-form.jsp
	가 되는거임
	
	여기서 뷰리졸버는 (위부터 우선순위높음)
		BeanNameViewResolver //빈 이름으로 뷰를 찾아서 반환(엑셀파일생성등에 사용)
		InternalResourceViewResolver //jsp를 처리할수있는 뷰를 반환
	
	
	즉 실제로쓸땐 @RequestMapping만 쓰는데,
	얘는 @Controller로 어노테이션기반의 컨트롤러(@RequestMapping이 있으면,RequestMappingHandlerMapping을 사용하라는거)라고
	스프링빈으로 자동등록한뒤,
	그 안에서 @RequestMapping을 찾아서,그거의 url기반으로 핸들러를 찾아서 돌리는거
	이때는 어노테이션을 기반으로,어노테이션이 붙은 메서드를 동작시키기때문에,메서드의 이름은 아무거나써도됨
	그리고 이때 ModelAndView를 반환하면,모델을 뷰에 넣어서 그 화면을 그려줌
	
	즉,RequestMappingHandlerMapping은 스프링빈중에서 @RequestMapping이나 @Controller가 클래스레벨에 붙어있으면,
	매핑정보로 인식(자기가 처리하는 핸들러로 인식)
	
	모델앤뷰에 모델에 데이터추가할땐
		mv.addObject("member", member);
	키값으로 넣으면됨
	
	그리고 한 리소스에 대한 url들은 한군데 모아두는게 관리가 쉬움
	그리고
		@Controller
		@RequestMapping("/springmvc/v2/members")
		Class ...
	이런식으로 컨트롤러밑에 리퀘스트매핑으로,url공통부분을 묶어줄수있음
	
	그리고 리퀘스트매핑에서,루트출력할땐
		@RequestMapping
	이렇게 뒤에 아무것도안적으면됨
	
	그리고 스프링어노테이션 기반의 컨트롤러는,모델앤뷰를 반환해도되고,스트링을 반환해도,해당하는 스트링의 뷰를 찾아서 그걸 사용함(모델앤뷰만들필요없음)
	
	그리고 req와 res를 직접받지않고,거기서 req대신 파라미터만 떼서받을수도있고,res대신 모델을 받아서 거기다 값을 추가해줄수있음
	    public String save(@RequestParam("username") String username,
						   @RequestParam("age") int age,
                           Model model) {
			...
			model.addAttribute("member",member)
			return "뷰논리경로이름"
		}
	이경우 타입캐스팅도 알아서해줌
	
	즉,
		req대신 @RequestParam(얘는 쿼리파라미터와 post form을 지원)
		res대신 Model
		ModelAndView대신 스트링
	이렇게 처리할수있음
	즉,뷰리졸버는 스트링을 리턴하면 ModelAndView(스트링)가 자동으로 들어가고,만약 프리픽스 서픽스가 프로퍼티에 선언됐으면 경로앞뒤에 그걸붙이는식
	
	그리고 @RequestMapping에서 메서드 를 안넣어주면,get과 post 둘다받아먹음
	이걸 원하는 메서드로 지정할땐
		@RequestMapping(value = "/new-form", method = RequestMethod.GET)
		@RequestMapping(value = "/save",method = RequestMethod.POST)
	아니면 그냥
		@GetMapping ("/new-form")
		@PostMapping(value = "/save")
	써도됨
	


6.스프링mvc-기본기능
	war과 jar의 차이는,jar을 사용하면 내장서버를 사용하고 webapp도 사용하지않음,보통 이걸씀
	war은 내장서버(톰캣)도 가능하지만,주로 외부서버배포목적임,jsp쓰려면 war써야함
	요즘은 도커라이징해서 포트포워딩해서 돌리기때문에 jar을 쓰는듯

	스프링부트에 jar을 사용하면
		/resources/static/index.html
	경로에 index.html파일을 두면,저걸 웰컴페이지로 처리해줌
	
	스프링부트를 쓰면 기본적으로 로깅라이브러리가 있음
	slf4j(인터페이스),logback(구현체)
	보통 logback사용함
	
	Logger의 인터페이스는 slf4j이기때문에,임포트를 slf4j.Logger을 선택해야함
		private final Logger log = LoggerFactory.getLogger(getClass());
	로그쓸땐
        log.trace("trace log={}", name);
        log.debug("debug log={}",name);
        log.info("info log={}", name);
        log.warn("warn log={}",name);
        log.error("err log={}",name);
	이렇게 {}안에 뒤에 변수가 들어감(위에서부터 순서대로 로그레벨임)
	로그레벨설정은 application.properties에서
		logging.level.hello.springmvc=trace
		logging.level.root=info //이건 전체프로젝트 로그레벨설정,해당패키지 상세설정있으면 그거우선
	이런식으로 설정가능
	기본값은 info임
	보통 로컬,데브에선 debug,프로덕션에선 info를 사용


	@RestController를 사용하면,원래 @Controller를 사용하면 리턴값이 기본적으로 뷰의 이름이라고 인식하는데
	RestController는 리턴값이 그냥 스트링으로 반환됨(res 메시지바디에 입력됨),즉 뷰가 없을때 사용할수있음(restapi만들때 사용)
	
	로거로 찍으면,형식을 갖춰서 뱉어주기때문에
		2023-02-03T09:28:45.427+09:00  INFO 14796 --- [nio-8080-exec-1] h.springmvc.basic.LogTestController      : info log=Spring
	파싱해서 색입힐수도있고,조회같은게 편해짐
	대충
		시간 로그타입 쓰레드 컨트롤러명 메시지
	이렇게 다 넣어줌
	실무에선 로거사용해야함
	
	롬복도 사용가능한데 @Slf4j로 바꾸면됨
	log선언을 빼버리고,
		log.info("info log={}", name);
	그대로쓰면됨(생성자로 쓰는거처럼)
	
	실무에서 로그쓸땐
		log.info("info log="+ name)
	이렇게써도 들어가긴하는데,이렇게하면 스트링합연산이 일어나서 비효율적임(출력안하는 로그도 일단 자바레벨에서 스트링변경은 미리 진행을 해버림)
	메서드 호출전에 스트링합연산부터 진행을 해야 메서드 호출을 할수있으니까 이걸 진행을 해버리는게 문제
		log.info("info log={}", name);
	이렇게쓰면 연산이 안일어나서(스트링합연산이 없고,단순메서드호출),이렇게 써야함

	로그를 쓰면,
		부가정보를 볼수있고
		로그레벨에 따라 로그를 상황에 맞게 조절가능
		표준입출력만 아니라 파일출력,외부네트워크출력등도 가능함,파일출력은 분할도 가능
		성능도 soutv보다 좋음(내부버퍼링,멀티쓰레드)

	
	스프링에서 리퀘스트매핑은,기본적으로는
		@RequestMapping("/hello-basic")
	이렇게 할수있음
	
	리퀘스트매핑의 속성들은 배열을 지원해서,여러 url을 하나의 메서드로 묶을수있음
		@RequestMapping({"/hello-basic", "/hello-go"})
	그리고 스프링부트 3.0부터는
		http://127.0.0.1:8080/hello-basic
		http://127.0.0.1:8080/hello-basic/
	를 다른 url로 인식해서,저걸 배열로 같이 넣어주는게좋음
	
	그리고 userid같은 값을 받아올땐,pathvariable를 사용하는데,그 나무서치에서 kind받을때 썼던 그거
		@GetMapping("/mapping/{userId}")
		public String mappingPath(@PathVariable("userId")String data){
			...
		}
	이렇게쓰면됨
	만약 변수명과 경로변수명이 같으면 @PathVariable의 뭘받아올지 명시하는걸 생략할수있음
		@GetMapping("/mapping/{userId}")
		public String mappingPath(@PathVariable String userId){
			...
		}	
	다중으로 받아올땐
		@GetMapping("/mapping/{userId}")
		public String mappingPath(@PathVariable String userId){
			...
		}	
	
	잘 쓰진않는데,특정파라미터를 조건걸어서 url 호출을 막거나 할수있음(예제는,/mapping-param?mode=debug 가 있어야 호출됨)
	    @GetMapping(value = "/mapping-param", params = "mode=debug")
		public String mappingParam() {
			log.info("mappingParam");
			return "ok";
		}
	특정 헤더를 조건걸어서 url호출을 막을수있음
	    @GetMapping(value = "/mapping-param", headers = "mode=debug")
		public String mappingHeader() {
			log.info("mappingHeader");
			return "ok";
		}
	없을경우 404가 나옴
	이 조건들은,
		headers = "mode"
		headers = "!mode"
		headers = "mode=debug"
		headers = "mode!=debug"
		headers = {"mode=debug","data=good"}
	이런조건들이 있음
	
	컨텐츠타입도 있음
	이건,url을 하나만두고,컨텐츠타입별로 각기 다른 메소드로 분리하는식으로(오버로드처럼) 할때 사용됨
	    @PostMapping(value = "/mapping-consume", consumes = "application/json")
		public String mappingConsumes() {
			log.info("mappingHeader");
			return "ok";
		}	
	헤더로 해도될거같지만,얘는 이걸쓰면 스프링에서 처리해주는게있어서 컨텐츠타입은 이걸쓰는게좋음
	얘가 대상이 없을땐 415를 반환(미디어타입을 지원하지않음 에러코드)
	여기 조건은
		/** * Content-Type 헤더기반추가매핑 Media Type 
		* consumes="application/json" 
		* consumes="!application/json" 
		* consumes="application/*" 
		* consumes="*\/*" 
		* MediaType.APPLICATION_JSON_VALUE //그냥 스트링을 상수로 정해둔거,404같은 http코드랑 같은방식
		*/
	가 있음,내부적으로 와일드카드를 쓸수있는게 특이점
	이건 req에서의 content-type과 매칭하는거고,
	브라우저에서의 accept와 매칭되는(내가 원하는 컨텐츠타입 지정하는거)는 produce임
	    @PostMapping(value = "/mapping-produce", produces = "text/html")
		public String mappingProduces() {
			log.info("mappingProduces");
			return "ok";
		}
	얘는 틀리면 406이 나옴
	조건은 consumes와 같음
	
	
	보통
		회원목록조회: GET      /users
		회원등록:   POST    /users
		회원조회:   GET     /users/{userId}
		회원수정:   PATCH  /users/{userId}
		회원삭제:   DELETE/users/{userId}
	이런식으로 url을 많이 짬 
	
	실제로 컨트롤러의 클래스레벨에서 url을 매핑해두고,밑에서는 상세만 받아가는식으로 설계를 많이 함
		@RequestMapping("/mapping/users")
	이러면 리소스단위로 되니까,알아보기도 쉬움
	
	매핑할때 매개변수는
	    @RequestMapping("/headers")
    public String headers(HttpServletRequest req,
                          HttpServletResponse res,
                          HttpMethod httpMethod, //get,post
                          Locale locale,         //언어설정의 locale,가장 높은우선순위를 반환
                          @RequestHeader MultiValueMap<String, String> headerMap, //헤더전체받기(맵으로던지면)
                          @RequestHeader("host") String host, //단일헤더받기
                          @CookieValue(value = "myCookie", required = false) String cookie //value명의 쿠키받기
						  ){}
	
	이렇게 받을수있음
	이외엔 InputStream,OutputStream(req,res메시지바디 접근)등이 있음
	
	MultiValueMap은,하나의 키에 여러 값을 받을수있음
		key1=["abc","bcd"]
		
	http req로 데이터보내는건,퀴리파라미터,form,메시지바디 3가지 방법으로만 보낼수있음
	백엔드입장에선 쿼리파라미터와 form은 동일하게 취급할수있음(이걸 통틀어 요청파라미터 조회라고 함),
	
	html같은 리소스는
		resources/static/
	에 두면 전체공개됨,그리고 jar을 사용하면,webapp경로를 사용할수없음,그래서 정적리소스도 클래스경로에 함께 포함해야함
	그리고,html에서
		action="/request-param-v1"
	이렇게 액션을 붙이면,저러면
		http://127.0.0.1:8080/request-param-v1
	에 가게됨
	
	요청파라미터조회방식은 뭐 제일 예전에썼던건
		HttpServletRequest //요즘은 안씀
		@requestParam("헤더이름") String username
		@ModelAttribute
	
	그리고 @Controller클래스 안에서 @RestController처럼 리턴하고싶으면,해당 메서드에
		@ResponseBody
	붙이면됨
	
	그리고 @RequestParam 도 없애고싶으면,헤더이름이 요청파라미터 이름과 같으면,저것도 없앨수있음
		@requestParam("username") String username
		@requestParam String username
		String username
	즉 이 3개는 다 같은거
	단,@RequestParam생략하려면,String,int같은거만 가능함
	@RequestParam정도는 붙이는게 보기편할거같다
	
	그리고 필수파라미터를 설정하려면(없으면 400대에러)
		@RequestParam(required = false) String username
	이렇게 하면됨(기본값은 true,false면 없어도됨)
	
	자바에선 int(기본형)은 null이 없음,그래서 int에 널을 넣고싶으면 Integer을 사용하거나,defaultValue를 사용해야함
	defaultValue는
		@RequestParam(defaultValue = "0") int age
	이렇게 사용하면됨
	저렇게 받아서 if로 거르면될듯
	그리고 defaultValue를 사용하면 required가 의미없어짐
	
	그리고 주의해야할건,
		?username=
	이렇게해도 일단 들어오긴했으니(null은 아니고 빈문자니)에러가 뜨지않음
	그리고 defaultValue를 사용하면,빈문자도 디폴트로 변경해줌
	
	파라미터를 맵으로 조회할수도 있음(전체 다 받기)
		public String requestParamMap(@RequestParam Map<String, Object> paramMap)
	이러면 저 맵안에 req가 다 들어감
	그리고 모든헤더가 단일값인게 확실하다면 Map를 써도되지만,아닐가능성이 있으면 MultiValueMap을 써야함
	근데 보통은 헤더는 단일값이어야함,아니게 설계하는게 이상한거
	
	
	@ModelAttribute는,보통 개발을 할땐 req를 받아서 객체를 만들고,그 객체에 값을 넣어줘야하는데,이걸 자동화해줌
	
	@Data(롬복기능)는 데이터객체에,
	@Getter,@Setter,@ToString,@EqualsAndHashCode,@RequiredArgsConstrictor을 묶어둔거
	
	그리고 @ModelAttribute는
		public String modelAttributeV1(@ModelAttribute HelloData helloData)
	이렇게쓰면 저 데이터 안의 변수들의 이름이 헤더에 있으면,해당값들을 set해줌
	즉
		private String username
	이면
		setUsername(req.getParameter("username"))
	하는걸 자동으로 해준다는거
	
	그리고 @ModelAttribute에서 int가 들어가야하는데 string이 들어오면,Bind익셉션이 나옴,이건 검증부분에서 처리해야함
	
	그리고 모델애트리뷰트도 생략이 가능한데
		public String modelAttributeV1( HelloData helloData)
	동작자체는 똑같이 동작함,근데 명시하는게 더 깔끔해보임
	스프링은
		string,int,integer같은 기본타입은 @RequestParam
		그 외는 @ModelAttribute로 추론함(argument resolver로 여기서 제외하고 @RequestParam에 붙일수있음)
		
	즉,모델애트리뷰트에서의 데이터객체의 이름이나 클래스는 중요하지않고,그 안에 속성의 이름이랑 req헤더랑 맞으면 매칭시킨다고 이해하면될거같음
	
	
	헤더말고 바디에서 데이터를 받을땐,보통 json을 사용함
	요청 파라미터와 다르게,바디에서 받을땐 @RequsetParam이나 @ModelAttribute를 사용할수없음(form 제외)
	
	가장 기본적으로 받을땐
		ServletInputStream inputStream = req.getInputStream();
        
	이렇게 받았고
	스트림2스트링할땐
		String messageBody= StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
	이렇게 할수있음
	
		 public void reqBodyV2(InputStream inputStream, Writer responseWriter) throws IOException {
	이렇게도 받을수있음
	
	이거도 귀찮으면 http컨버터를 사용해서
		@PostMapping("/request-body-string-v3")
		public HttpEntity<String> reqBodyString(HttpEntity<String> httpEntity) throws IOException {
			String body = httpEntity.getBody();
			log.info("messageBody={}", body);
			return new HttpEntity<>("ok");
		}	
	이런식으로 httpEntity에 모든걸 때려박고,거기서 다 꺼내고,res도 새로운 http를 생성해서 던지는식으로 처리가능
	즉 httpEntity가 말 그대로 http객체라고 생각하고,그렇게 쓰는거임
		httpEntity.getBody()
		httpEntity.getHeaders()
	막 이런식으로 쓰는거
	얘는,메시지바디정보를 직접 조회하는거,요청파라미터조회랑은 아무연관없음
	그리고 이건 응답에도 쓸수있는데,이걸 응답에 쓰면	
		메시지바디정보 직접 반환
		헤더정보 포함가능
		view 조회x
	그리고 이걸 상속받은
		RequestEntity //httpMethod,url정보가 추가,요청에서 사용
		ResponseEntity//http상태코드설정가능,응답에서 사용
	도 있음
	
	스프링mvc내부에서 http메시지바디를 읽어서 문자나 객체로 변환해서 전달해주는데,이때 http메시지컨버터라는 기능을 사용함
	
	이거도 귀찮아서 나온게 어노테이션기반임
		 public String reqBodyString(@RequestBody String messageBody) throws IOException {
	이렇게 받으면 저기안에 req바디를 그대로 넣어줌
	그래서 아까 썻던 @ResponseBody도 이거랑 짝이되는거
		@ResponseBody
		...
			return "ok"
	이거
	즉 res바디를 직접 리턴값으로 매핑해버리는거니까
	그리고 헤더도 필요하면 @RequestHeader도 같이쓰면됨
	
	
	json을 받을땐
		private ObjectMapper objectMapper = new ObjectMapper();
	를 전역생성해두고
        ServletInputStream inputStream = req.getInputStream();
        String s = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
        log.info(s);
        HelloData helloData = objectMapper.readValue(s, HelloData.class);
        log.info(helloData.toString());
        res.getWriter().write("ok");	
	이렇게 하는게 원시적인 방식
		@ResponseBody
		@PostMapping("/request-bodt-json-v2")
		public String requestBodyJsonV2(@RequestBody String messagebody) throws IOException {

			log.info(messagebody);
			HelloData helloData = objectMapper.readValue(messagebody, HelloData.class);
			log.info(helloData.toString());
			return "ok";

		}
	이렇게 어노테이션을 쓸수있고,
		@ResponseBody
		@PostMapping("/request-bodt-json-v3")
		public String requestBodyJsonV3(@RequestBody HelloData helloData) throws IOException {
			
			log.info(helloData.toString());
			return "ok";

		}
	아예 데이터모델로 받을수도있음
	여기서 @RequestBody에 json이 들어오면,데이터객체와 json의 이름같은걸 매핑해서 set해줌
	이경우엔 @RequestBody는 생략불가(생략하면 모델애트리뷰트로 들어오니까..)
	
	그리고 content-type이 application/json이어야함
	
	뭐 물론 HttpEntity를 사용해도 되긴함
		@ResponseBody
		@PostMapping("/request-bodt-json-v4")
		public String requestBodyJsonV4(HttpEntity<HelloData> helloData) throws IOException {

			log.info(helloData.getBody().toString());
			return "ok";

		}	
	둘은 선택
	
	그리고 받을때만 @RequestBody로 메시지컨버터를 하는게아닌,응답에도 가능함
	@ResponseBody가 있을때
		@ResponseBody
		public HelloData ...{
		
			return new HelloData(username="aa",age=10)
		}
	이렇게도 알아서 메시지바디에 저걸 json으로 넣어서 전달함
	
	즉,@RequestBody를 사용하면
		json요청->http메시지컨버터->객체
	를 스프링이 처리해주고
	@ResponseBody를 사용하면(accept가 application/json일때)
		객체->http메시지컨버터->json응답 
	을 스프링이 자동으로 처리해줌
		
	
	http응답방식은,정적리소스,뷰템플릿,http메시지 가 있음
	
	정적리소스는,바뀌지않는 정적인 html,css,js를 제공할때 사용함
	뷰템플릿은 동적인 html을 제공할때 사용되고
	http메시지는 api를 제공할때,html이 아니라 데이터를 전달해야하므로,메시지바디에 json같은 형식으로 데이터를 실어보냄
	
	스프링부트의 정적리소스의 경로는
		/static
		/public
		/resources
		/META_INF/resources
	에 넣어두면,경로로 인식함
	즉
		/static/basic/hello-form.html
	일경우
		127.0.0.1:8080/basic/hello-form.html
	로 접근할수있음
	
	스프링부트의 동적리소스의 경로는
		/resources/templates
	임,즉 static은 정적,/templates은 동적이라고 생각하면될듯(앞의 /resources,.html은 프리픽스서픽스를 스프링이 디폴트로 등록해서 생략가능)
	
	타임리프쓸땐
	맨위에
		<!DOCTYPE html>
		<html xmlns:th="http://www.thymeleaf.org">
	를 넣고(고정)
		<body><p th:text="${data}">empty</p></body>
	이런식으로 th:text="${data}" 하면,저거와 안의 값(empty)를 치환해줌 렌더링시기에
	저기다 값을 집어넣는건,
	        ModelAndView mav = new ModelAndView("response/hello")
                .addObject("data","hello");
	이렇게 컨트롤러에서 넣으면됨(addObject)
	모델쓰면
		@RequestMapping("/response-view-v2")
		public String responseViewV2(Model model) {
			model.addAttribute("data", "hello!!");
			return "response/hello";
		}
	이러면되고
	
	그리고 컨트롤러의 url경로이름과,뷰의 경로가 이름이 같으면 거기로 매핑해주는데 리턴값없어도(void),안쓴대 헷갈려서
	
	@RequestBody나 httpEntity를사용하면,뷰리졸버(템플릿)가 아닌 메시지바디에 값을 적으니 주의
	
	
	그리고 api의경우엔,바디에 json을 담아서보냄(뷰템플릿같은거도 담아서보내긴하지만..)
	이건
		res.getWriter().write("ok");
		
		return new ResponseEntity<>("ok", HttpStatus.OK);
		
		@ResponseBody
		메서드
			return "ok";
	텍스트 처리는 이런식으로 처리함(마지막어노테이션이 제일많이쓰임)
	json에서 객체2json 리턴은
		HelloData helloData = new HelloData();
		return new ResponseEntity<HelloData>(helloData, HttpStatus.OK);
	
		@ResponseStatus(HttpStatus.OK)
		@ResponseBody
		메서드
			return helloData;
	이런식으로 처리
	어노테이션기반의 상태코드는,저건 동적으로 설정할수없음,그래서 동적인게 필요하면 ResponseEntity를써야함
	
	말고 그냥 클래스에 @RestController를 써도됨
	
	뷰템플릿으로 html을 생성해서 응답하는게 아닌,api처럼 json을 바디에서 직접 읽거나 쓸땐,http메시지컨버터를 사용하면 편함
	@ResponseBody를 사용하면,뷰리졸버대신 http메시지컨버터가 동작하는데,
	바이트면 ByteArrayHttpMessageConverter
	문자면 StringHttpMessageConverter
	객체면 MappongJackson2HttpMessageConverter
	
	가 동작하고,위부터 우선순위,이거말고도 더 많이 있음
	
	응답의경우 클라이언트의 accept헤더와 서버의 컨트롤러반환타입등을 조합해서 메시지컨버터를 선택함
	
	이거도 인터페이스로 구현돼있고,응답과요청 둘 다 사용됨
	canRead,canWrite로 클래스,미디어타입을 지원하는지 체크하고(반복문돌려서),통과하면 그거 필해서 씀
	즉 핸들러어댑터랑 비슷한모양임
	
		ByteArrayHttpMessageConverter:byte[]를 처리
			클래스타입 byte[] 미디어타입 */*
		StringHttpMessageConverter:문자데이터를 처리
			클래스타입 String 미디어타입 */*
		MappongJackson2HttpMessageConverter:json을 처리
			클래스타입 객체 or hashmap 미디어타입 application/json
			
	메시지컨버터는 이렇게 클래스타입 미디어타입을 둘다 만족해야하고,양방향이라 req나 res나 똑같이 만족해야함
	물론 입력과 출력에 두개쓸수있으니까,동시에 둘다 만족할필요는없음
	
	요청은 저 조건(클래스타입,content-type)을 만족하면(canRead),read를 호출해서 객체생성하고 반환
	응답은 저 조건(클래스타입,요청의 accept)을 만족하면(canWrite),write를 호출해서 응답메시지바디에 데이터 생성
	
	http메시지컨버터의 동작위치는,핸들러어댑터에서,즉 RequestMappingHandlerAdapter(요청매핑핸들러어댑터)에서 콜돼서 사용됨
	정확히는 RequestMappingHandlerAdapter가 콜한 ArgumentResolver가 콜함
		RequestMappingHandlerAdapter-> ArgumentResolver->HttpMessageConverter
		Controller->ReturnValueHandler->HttpMessageConverter
	얘는 
		어노테이션과 파라미터를 보고,
		그걸 기반으로 req등을 변환해서 전달데이터를 생성한뒤에(ArgumentResolver),
		그걸 대신넣고 컨트롤러를 호출한다음,
		컨트롤러의 반환값을 다시 변환해서 res메시지로 바꾸고(ReturnValueHandler)
		디스패쳐서블릿에 전달
	하는 방식으로 동작함
	여기서 이렇게 파라미터를 유연하게 처리할수있게 하는게 ArgumentResolver임
	요청매핑핸들러어댑터는,아규맨트리졸버를 호출해서,컨트롤러가 필요로하는 다양한 파라미터값(객체)를 생성함,
	이건 종류가 엄청많음(각각마다 다 대응해줘야하니까..)
	
	그리고 리턴할때도 ReturnValueHandler를 호출해서 ArgumentResolver랑 비슷하게 동작해서 리턴값을 만들어줌
	
	
	컨트롤알트쉬프트u(현재 클래스 관계도)
	
	
7.웹페이지 만들기	
	멀티쓰레드환경에서 hashmap쓰려면 ConcurrentHashMap써야함
	멀티쓰레드환경에서 Long쓰려면 AtomicLong써야함
	
	그리고 업데이트같은걸 위해서,itemDTO같은걸 만들어두고(실제 사용하는 요소들만 넣어서,AI있는 id같은거 제외해버리고)사용하는게 좋음
	
	해당배열이 저걸 포함하고있는지 확인할때
		Assertions.assertThat(result).contains(item1,item2);
		
	어드민같은 html페이지만들때,css사용필요할때 부트스트랩사용하면편함
	
	그리고 정적리소스를 /resources/static/에 넣어두면,실제서비스에서도 전체공개되니까 주의해야함
	
	롬복에서
		@RequiredArgsConstructor
	를 클래스레벨에 붙이면,현재 final이 붙은걸 전부 @autowired해서 생성자를 만들어줌
	
	타임리프쓸땐
		!DOCTYPE HTML>
		<html xmlns:th="http://www.thymeleaf.org">
	맨위에 넣어주고
	타임리프는
		<link th:href="@{/css/bootstrap.min.css}"
           href="../css/bootstrap.min.css" rel="stylesheet">
	이렇게 있으면,th:가 있는 뒤에 속성을 타임리프가 동작할때 치환해줌
		href="../css/bootstrap.min.css"->/css/bootstrap.min.css
	이렇게 동적으로 변경할수있음
	    onclick="location.href='addForm.html'"
        th:onclick="|location.href='@{/basic/items/add}'|"
	이런식,여기선 onclick="|location.href=까진 고정이고,그뒤를 바꾸는거
	즉 @{}이 안에있는걸 변경함
	
	즉,th:xxx가 있으면,저 속성의 값을 th값으로 변경함,만약 속성이없으면 생성해서넣음
	대부분의 html속성을 치환할수있음
	
	중요한건,th:xxx가 붙은부분은 서버사이드에서 렌더링되고,기존걸 대체함
	서버사이드를 거치지않으면 그냥 무시됨
	그래서 그냥 치환하는식이라 html태그가 그대로 살아있다는게 장점임
	쌩으로 열면,th가 그냥 무시되는식이라
	즉,파일쌩으로 열었을때도 동작하고,서버템플릿으로도 동작함 이게 가장 큰 장점임(네츄럴 템플릿)
	
	url링크는
		@{...}
	저렇게 넣으면됨
	
	|...|이건 리터럴 대체문법 이라고 함
	저 사이에 있는건,그 스트링에서 더하기할떄 매번+..+붙여줘야하는걸 생략가능하게 만든거
	기본적으론 타임리프에서 문자와 표현식은 분리되어있는데,저걸붙여주면 그냥 스트링내에서 사용할수있음	
		"abc"+${user.name}+"der"
		"|abc${user.name}der|"
	그리고 모델에 담긴값도 바로꺼낼수있음
	
	
	foreach돌려야할땐 th:each="item:${items}" 사용하면됨
	저 items은 모델에 포함시켜서 넘겨주면됨,거기서 저 이름으로 찾는거(model.addAttribute('items',items))
	반복문안에서는 앞에 선언된거(item)을 사용할수있게됨
	
	${}는 변수표현식임,모델에 포함된값이나,타임리프변수로 선언(맨끝에 ()로 붙여둔거나 forEach같은거)된값을 가져다쓸수있음 
	
	"@{/basic/items/{itemId}(itemId=${item.id})}"
	이렇게쓰면,앞에 itemId를 뒤에 괄호안에서 변수로 지정할수있음
	그리고 이건 경로변수뿐아니라 쿼리파라미터도 생성할수있음
		"@{/basic/items/{itemId}(itemId=${item.id},query='text')}"
		->localhost:8080/basic/items/1?query=text
	이렇게 생성시킬수있음
	
	만약 th:action 이렇게만 던지면,현재url에 해당하는 메서드로 던짐
	즉 이렇게해서,메소드만 바꾸는식으로 같은url로 깔끔하게 등록폼과 등록처리를 해결할수있음
	
	타임리프에서 if문쓸떈
		<h2 th:if="${param.status}" th:text="'저장완료'"></h2>
	이렇게 쓸수있고,param은 쿼리파라미터에서 값 꺼내는거임
	원래는 컨트롤러에서 모델에 값을 담아서,그걸 꺼내써야하지만,그냥 쿼리파라미터정도는 많이쓰니까 타임리프에서 지원해주는거임
	
	그리고 폼데이터의 이름은, 해당html의 name값을따름
	
	post하고 html에서 그 값을 가져다써야하면 model사용
	
	모델애트리뷰트쓸땐,해당하는 헤더값과,모델애트리뷰트에서 지정한클래스속의 변수들이 이름이 같으면 자동매핑
		public String addItemV2(@ModelAttribute("item") Item item,
                            Model model) {
			itemRepository.save(item);	
	모델애트리뷰트에 네임속성을(@ModelAttribute("item")) 넣으면,
	저이름으로 저 매개변수를 model에 넣어줌(그래서 저 Model model도 생략가능)
	즉
		model.addAttribute("item", item);
	까지 자동화해줌
	그러니까 
		헤더값을 기반으로 도메인객체를 생성+해당객체를 이름을 적어두면 모델에 넣어줌(만약 이름을 안적어두면,클래스명에 첫글자소문자로 바꿔서 넣는게 디폴트)
		Item->item
		NamuData->namuData
	두가지 일을 함 @ModelAttribute는
	즉
		요청파라미터처리
		모델 추가
	두가지임
	
	그러니까 model도 생략가능하고,객체같은 복잡한거면 @ModelAttribute도 생략하면 저거로 동작하니까
		@PostMapping("/add")
		public String addItemV4(Item item) {
			itemRepository.save(item);

			return "basic/item";

		}
	그냥 이렇게만 넣어도 된다는거임,이래도 애드모텔애트리뷰트도 동작하고,요청파라미터읽기도 동작한다는거,디폴트가 @ModelAttribute니까
	근데 @ModelAttribute는 넣는게 편할거같다
	
	스프링에서 리다이렉트할땐
		return "redirect:/basic/items/{itemId}";
	리턴하면됨
	리다이렉트를 하면 위에 url적는데의 url이 바뀜
	
	html form은,get post만 사용할수있음
	put patch는 api전송시에 사용함
	
	post를 하고나서 새로고침을 하면,post가 계속 반복됨
	그래서 사용하는게 prg
	post를 날린다음엔,리다이렉트를 꼭 걸어줘야함
	즉,리다이렉트를 하지않으면(내부호출을 하면),post가 마지막url로 남아있기때문에,매번 post가 나가는거임
	(정확히는,post로 요청을하고 그 메서드의 리턴값이 현재 url이니까)
	새로고침은 마지막 url을 날리는거기때문
	그래서 저걸 덮어써주는게 리다이렉트임
	
	post에서(멱등성이 없는거) 뷰를 던질려면 무조건 prg를 써줘야함
	
	url에서는
		"redirect:/basic/items/" + item.getId()
	이렇게 직접 변수를 더해서 넣는건 url인코딩이 안돼서 위험함
	그래서 사용하는게 RedirectAttributes
	얘는 여러기능이 있음
		url인코딩
	
	사용법은
		@PostMapping("/add")
		public String addItemV5(Item item, RedirectAttributes redirectAttributes) {
			Item saveItem = itemRepository.save(item);
			redirectAttributes.addAttribute("itemId", saveItem.getItemName());
			redirectAttributes.addAttribute("status", true);

			return "redirect:/basic/items/{itemId}";

		}	
	이런식으로 사용함
	RedirectAttributes를 받아서 거기다가 값을 넣으면,리다이렉트후에도 사용할수있음(뷰에서도 사용가능)
	기본적으로,리턴에 있는 {}안에 있는값과 이름같은게있으면 우선적으로 치환하고,나머지들은 쿼리파라미터로 붙음
	
	
	
	
	
8.다음으로
	컨트롤러의 주요 목표는 검증로직
	스킵
