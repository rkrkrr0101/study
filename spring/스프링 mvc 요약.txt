1.웹 애플리케이션 이해
	웹서버는,정적 리소스를 제공(html,css같은걸 배포하는 nginx,apache같은거)
	웹 어플리케이션 서버(WAS)는 웹서버+코드를 수행해서 애플리케이션로직을 수행할수있음(톰캣)
	
	보통 웹 시스템은,was와 db만 있으면 기본적시스템 구성은 다됨(동작시켜볼수있음)
	근데 애플리케이션로직이랑 정적 리소스를 같이두면,비용절감이 안됨
	그리고 was장애시 오류화면노출도 불가능함
	
	그래서 일반적으로,웹서버를 앞에두고,was를 뒤에둬서 웹서버와 was가 통신해서 받아가는식으로 처리함
	이러면 스케일링자체도 쉬위지고 좋은게많음(오류화면도 띄울수있고)

	서블릿은,공통되는 로직들을 전부 처리해줌(tcp연결과 http요청메시지 파싱 등)
	urlPatterns에 해당되는 url이 호출되면(http메시지에 있으면),그 안에있는 로직을 실행시켜줌
	그 안에 로직은,
	HttpServletRequest request,HttpServletResponse response 를 받아야함(각각 req와 res)
	정확히는,서블릿은 http요청메시지를 파싱해서 req를 만들고,res를 파싱해서 http응답메시지를 만드는거
	요청이 들어오면 req와 res를 만들고,응답할땐 res만 던지는식
	
	톰캣처럼 서블릿을 지원하는 was를 서블릿 컨테이너라고 함
	이 컨테이너는,서블릿객체를 생성,초기화,호출,종료하는 생명주기를 관리하고,
	서블릿은 싱글톤으로 관리됨(공유변수주의해야함)
	jsp도 서블릿으로 변환되고,동시요청을 위한 멀티쓰레드처리도 지원함
	
	쓰레드가 서블릿객체를 호출하는식으로,멀티쓰레드가 동작함(동시요청이 들어오면,쓰레드를 생성하고,걔가 서블릿을 호출하는것)
	각각의 쓰레드는 한줄한줄 절차지향처럼 읽음
	
	이떄 쓰레드갯수에 여러방식이 있는데,
		요청시마다 쓰레드생성(단점으로 생성비용이 비싸고,요청이 너무많이오면 oom으로 서버죽음)
		쓰레드풀(쓰레드를 n개 미리생성해두고,거기서 꺼내다가 쓰고나서 돌려놓는거,장점은 서버의 한계만큼까지만 생성하면,다운안되게 계산을 할수있음)

	쓰레드풀에서,was의 주요 튜닝포인트는 최대쓰레드임
	이게 너무 낮으면,서버리소스는 여유롭지만 클라이언트는 금방 응답지연되고
	이게 너무 높으면,oom뜨거나 쓰로틀링걸림
	
	장애발생시엔,
		클라우드면 일단 서버갯수부터 스케일링하고,이후 튜닝
		클라우드가 아니면,튜닝에 목숨걸어야함
	튜닝은,최대한 실제서비스와 유사하게 성능테스트를 시도해보면됨(nGrinder같은 툴로)
	
	결국 중요한건,멀티쓰레드를 was가 알아서 지원해주니까,싱글톤(서블릿,빈)인거만 신경쓰면됨(예전에 쓰레드만든다고 머리터졌는데 세상좋아졌다)
	
	html에서는 was가 정적리소스를 뱉거나,아니면 동적으로 html을 생성해서 전달하거나,api 세가지 방식이 있음
	이때 api는
		http js에서 호출
		모바일 클라이언트에서 호출
		다른 서버에서 호출
	이 3가지경우에서 사용됨
	api는 주로 json형식으로 통신
	
	서버사이드렌더링은,html 최종결과를 서버에서 생성해서 웹브라우저에 전달,
	정적화면에 사용,타임리프같은걸 사용
	
	클라이언트사이드렌더링은,html결과를 js를 사용해 웹브라우저에서 동적으로 생성해서 적용
	주로 동적화면에 사용하고,필요한부분만 리랜더링해서 갱신하는거(내가 나무실시간에서 한거)

	뷰템플릿은,html을 편하게 생성하는 뷰기능
	jsp->타임리프로 넘어옴

2.서블릿











































