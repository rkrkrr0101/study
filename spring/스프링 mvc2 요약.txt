1.타임리프-기본기능
	타임리프의 특징은
		서버사이드렌더링(html동적렌더링)
		네츄럴 템플릿
		스프링통합지원
	같은 특징이 있음
	
	타임리프 쓸땐
		<hthml xmlns:th="http://www.thymeleaf.org">
	를 맨위에 넣어주고,th를 불러가며 사용하면됨
		th:onclick= ...
	이렇게
	
	타임리프에서 텍스트속성정의할땐
		th:text="${data}"
	하면됨
	그리고 태그의 속성이 아니라,콘텐츠영역안에서 하고싶으면
		[[$(data)}]]
	이렇게하면됨
		<li>th:text사용<span th:text="${data}"></span></li>
		<li>컨텐츠안에서 직접출력 =[[${data}]]</li>	
	이런식으로
	html에서 뷰템플릿으로 생성할땐,특수문자를 주의해야함
	기본적으로 뷰템플릿속에선 <b>이런 태그가 먹지않음(타임리프가 자동으로 바꿔줌)
	이걸 이스케이프라고 함
	
	이걸 사용하고싶지않으면 th:utext를 사용하거나,태그텍스트부분에선 [(${data})] 이렇게 사용하면됨		
	기본적으로는,이스케이프를 써야하고,정 안될때만 언이스케이프같은거 써야함
	
	타임리프에서 변수는,${...}이렇게 사용하고,스프링에서 지원하는springEL을 사용할수있음
	스프링el은,헤더에있는(모델에 담으면 헤더에적히니)값들을 불러올때
	오브젝트
		${user.username}
		${user['username']}
		${user.getUsername()}
	리스트
		${users[0].username}
		${users[0]['username']}
		${users[0].getUsername()}
	맵
		${userMap['userB'].username}
		${userMap['userA']['age']}
		${userMap['userA'].getUsername()}
	이런식으로 받을수있음
	즉,해당 헤더 안에 뭐가 들어있으면(1차원이 아닌 2차원이상으로),거기서 그냥 프로퍼티접근으로 꺼낼수있다는거임
	
	그리고 타임리프에서 지역변수는
		th:with="abc=bcd"		
	저기에 값을 넣고,
		th:text="${abc}"
	이렇게 꺼내면됨
	당연히 객체도 들어가고
		th:with="first=${user[0]}"
		th:text="${first.username}"
	다됨
	그리고 이 지역변수는,선언한 태그 안에서만(<div>같은거면 그 안에서만)사용할수있음,그 스코프밖으로 퍼지진않음
	
	스프링부트 3.0부터는
		${#request}
		${#response}
		${#session}
		${#sevletContext}
	를 지원하지않고,남은건
		${#locate}
	만 남음
	그래서 3.0부터는 직접 모델에 넣어줘서 거기서꺼내든가해야함
	저거외에 편의기능은
		${param.paramData} //쿼리파라미터읽기
		${session.sessionData} //세션데이터읽기
		${@helloBean.hello('Spring!')} //스프링빈호출,${@빈이름.호출메소드(매개변수)}
	이 있음
	
	타임리프의 유틸리티객체는
		#message:메시지,국제화처리
		#urls:url이스케이프 지원
		#dates:java.util.Date 서식 지원
		#calenders:java.util.Calendar서식지원
		#temporals:자바8날짜서식지원
		#numbers:숫자서식지원
		#strings:문자관련편의기능
		#objects:객체관련기능제공
		#bools:bool관련기능제공
		#arrays:배열관련기능제공
		#lists,#sets,#maps:각각 컬렉션기능제공
		#ids:아이디처리관련기능제공
	등등 있음,생각했던거에서 대충 범주들어가는거 공식도큐찾아보면 잇음

	타임리프에서 자바8날짜인 LocalDate류,Instant등을 사용하려면 추가라이브러리가 필요함
	스프링부트 타임리프를 사용하면,해당 라이브러리가 자동으로 추가되고 통합됨
	사용방법은
		th:text"${#temporals.format(받을헤더명,'yyyy-MM-dd HH:mm:ss')}
	#temporals이 날짜서식을 지원하는 유틸객체임	
	
	
	타임리프에서 url생성할땐 @{}를 사용하면됨
		th:href="@{/hello}
	쿼리파라미터추가하고싶으면 괄호만()
		th:href="@{/hello(param1=${param1}, param2=${param2})}"
	패스배리어블쓰고싶으면(쿼리파라미터말고 경로에 변수넣고싶으면)
		th:href="@{/hello/{param1}/{param2}(param1=${param1}, param2=${param2})}"
	둘다쓰고싶으면
		th:href="@{/hello/{param1}(param1=${param1}, param2=${param2})}"
	즉,앞에 변수가있으면 그거부터 들어가고,만약 겹치는게없으면 쿼리파라미터로 들어감
	
	
	리터럴은,소스 코드상에서 고정된 값임
	타임리프에서 문자리터럴은 항상 ''로 감싸야함,근데 문자중간에 스페이스나 특수문자가 없으면 하나의 토큰으로 인정해서 리터럴로 만들어줌
	이때 -,_,.들은 들어가도됨
	스페이스를 넣어야하면
		th:text="'hello world!'"
	이렇게 넣어야함
	근데 그냥 ||사이에 넣는게 젤편함(리터럴 대체문법)
		th:text="|abcd 123 qqq ${data}|"
		
	타임리프에서 연산은 자바랑 별로 다를건없는데,귀찮은건 http엔티티를 사용해야하는게 귀찮음(<나 >)
	그래서 <,>이 있는건 gt,lt로 대체해서써야함
		> = gt
		< = lt
		>= = ge
		<= = le
		! = not
		== = eq
		!= = ne
	이렇게 써야함(! == !=는 그냥써도됨)
	
	
	그리고 조건문은
		(조건)? true값:false값
	elvis연산은(null체크,조건식의 편의버전)
		${data}?: '문자' = 데이터있을때출력:널일때출력
	no-Operation은 널이면(조건을 만족하지않으면) 타임리프태그를 아예 수행하지않는거,이러면 그냥 html원본그대로 나옴
		${data}?: _ = <span th:text="${data}?: _">데이터없음</span>
	이러면 데이터없음이 출력됨(타임리프무시되니까)
	
	
	타임리프는,th:뒤에 뭘 넣는식으로 동작함
	이때 해당하는속성이 있으면 대체,없으면 생성함
	그리고 덮기싫고 추가하고싶을때는
		th:attrappend = 속성값의 앞에 값을 추가,이거로추가할땐 스페이스바 안들어가니까 주의
		th:attrprepend= 속성값의 뒤에 값을 추가,이거로추가할땐 스페이스바 안들어가니까 주의
		th:classappend= class속성앞에 자연스럽게 추가,이거로 추가하면 스페이스바 들어감
		
		th:attrappend = "abc='abcd'" //이렇게쓰면됨
	
	html은 checked="false"라도 checked라는 속성이 존재하면 checked가 돼버림
	그래서 타임리프에서
		th:checked
	를 사용하면 값이 false일경우 checked속성자체를 제거해서 false를 리턴하게 해줌(체크표시를 풀어줌)


	타임리프에서 반복은 th:each를 사용함
		th:each="컬렉션에서꺼낸변수:${컬렉션}"
	컬렉션은 list,array,map등을 지원함
	그리고 반복의 상태확인은
		th:each="컬렉션에서꺼낸변수,상태확인변수명:${컬렉션}"
	인데,기본값이 컬렉션꺼낸변수+Stat임,즉 지정안해도 저렇게꺼내서확인할수있음
	
	이 Stat의 상태값은
		index:0부터 시작하는값
		count:1부터 시작하는값
		size:전체 사이즈
		even,odd:홀수짝수(tf) //두줄마다 색칠해줄때같을떄사용,가독성
		first,last:처음,마지막(tf)
		current:현재객체
	속성이 있음
	
	
	타임리프에서의 if는,해당값이 f이면 태그 자체를 랜더링하지않음(지워버림)
	사용법은
		<span th:text="'미성년자'" th:if"${user.age lt 20}:></span>
	이러면 age가 20보다 크면 태그자체가 없어져버림
	반대되는 unless도 있는데,그냥 tf만 반대로받고 똑같음
	스위치문도 있는데
		<td th:switch="${user.age}">
			<span th:case="10">10살</span>
			<span th:case="20">20살</span>
			<span th:case="*">몰루</span>
	*은 와일드카드,디폴트임	


	타임리프에서 주석은,html주석과 타임리프주석이 있음
	html주석은,기본적인 주석 소스보기로 보임
		<!--  ㅁㄹㅇㄴㄹㄴㄹ -->
	타임리프 파서주석은,이 사이에 있는걸,출력할때 그내용을 지워줌(소스보기로 못봄)
		<!--/* ㄹㄴㄹㄴㄹㄴ */--> //한줄
		<!--/*-->            //여러줄 시작
			<span>fsfs</span>
		<!--*/-->            //여러줄 끝
	이렇게 저거로 싸두면 저거도 없어짐
	
	타임리프 프로토타입주석은,타임리프로 랜더링 되면 실제 태그가 적힘(주석이아님),그냥 경로로 html불러오면 주석처리됨,안쓸거같음ㅋㅋ
		<!--/*/ ㄹㄴㅇㄹㄴ /*/-->
	




















































