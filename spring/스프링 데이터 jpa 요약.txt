1.프로젝트 환경설정
	스킵
2.예제도메인모델
	~xToMany:이쪽이 x,상대쪽이 매니니까 상대쪽이 연관관계주인,즉 mappedby붙여야함(이 엔티티엔 list<객체>추가)
	~xToOne:이쪽이 x,원투원이면 알아서 정하고,매니투원이면 내가 연관관계주인,즉 @JoinColumn붙여야함(이 엔티티엔 객체 추가)
	
	기본생성자 대신 @NoArgsConstructor(access = AccessLevel.PROTECTED) 위에 붙여도됨
	
	그리고 양방향연관관계에서 추가시,주인쪽에서 알아서 밑에있는엔티티에 값을 넣어줘야함(해당 메서드를 만들어야함)
		public void changeTeam(Team team){
			this.team=team;
			team.getMembers().add(this);
		}
		public Member(String username, int age, Team team) {
			this.username=username;
			this.age=age;
			if (team!=null) {
				changeTeam(team);
			}
		}
3.공통인터페이스 기능 
	스프링데이터jpa에서 jpaRepository는 구현체 없이 인터페이스만 가지고 동작하는데,
	이건 프록시로 인터페이스를 보고 스프링데이터jpa가 생성해서 넣어줌
	
	그리고 이 인터페이스들은,@Repository를 안붙여도 알아서 인젝션해줌,그리고 이걸쓰면,jpa의 예외를 스프링예외로 자동으로 변환해줌
	
	스프링데이터라는 큰 그룹속에,스프링 데이터 jpa가 있는거(스프링 데이터 jdbc,레디스,몽고 등등 다있음)
	이건,JpaRepository까지는 스프링데이터jpa꺼고,
	그 상위인 PagingAndSortingRepository나 CurdRepository같은경우는 스프링 데이터꺼임
	그래서 jpa에서 몽고디비로 바꿔도,jpaRepository에 있는거만 사용불가되고,그 상위에있는건 사용가능한거
	
	JpaRepository<타입,아이디타입>의 주요 메서드는
		save(엔티티) 새 엔티티는 저장하고,이미 있는엔티티는 병합함
		delete(엔티티) 삭제 내부에서 em.remove 호출
		findById(id) 해당id 조회,내부에서 em.find호출
		getOne(id) 엔티티를 프록시로 조회,즉 프록시를 가져와서,프록시내부를 탐색하면 그제서야 쿼리날려서 조회함,내부에서 getReference()호출
		findAll() 모든 엔티티 조회,정렬이나 페이징을 조건으로 파라미터로 넣을수있음
	가 있음
	
	그리고 인터페이스에 메서드명을 규칙에 맞춰 적으면,해당되는 조건으로 메서드를 자동으로 만들어줌
		List<Member> findByUsername(String username);
	이런식임
	이게 쿼리메서드임
	

4.쿼리메소드 기능	
	쿼리메소드는 
		메소드 이름을 보고 쿼리를 생성하던가
		메소드 이름으로 네임드쿼리를 호출하던가
		@Query로 쿼리를 직접 날리든가
	하는 기능임,보통 메소드이름으로 쿼리날리는게 매우자주쓰임
	
	메소드 이름으로 쿼리 생성하는건,findByUsername(String username) 이런식임
	즉,findBy(조회) Username(조건) 이런식
	findByUsernameAndAgeGreaterThen(String username,int age) 이런식으로 뭘할건지적고,조건나열하는거임
	findBy(액션)Username(조건1,일치)And(연산자)AgeGreaterThen(조건2,age가 입력변수보다 크면)
	여기서 해당 엔티티의 필드명으로 조건을 거는거임,그래서 엔티티의 필드명이 변경되면,이 이름도 같이변경돼야함(안하면 앱시작시점에러떠서 확인시켜줌)
	대충
		findBy //기본조회
		countBy//카운트,반환타입 long
		existsBy//존재확인,반환타입 bool
		deleteBy//삭제
		findFirst3,findFirst,fintTop//리미트
	이렇게 있고,동사와 by사이에 설명을 적을수있음(findHelloBy)
	and,or 걸수있고,조건으로 GreaterThen,between,isnull뭐 등등 다있음 디비에있는거
	OrderBy도 있고
	In도있는데,이건 리스트를 넘겨주면 거기 쭉 다 들어감
	https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation
	참고
	
	이건 근데,메소드명이 너무길어지니까,조건 2~3개정도까지만 저걸사용하고,아니면 다른방법으로 이름을 바꿔버리는게 나음(네임드쿼리나 @Query같은)
	
	jpa의 네임드쿼리는,직접 쿼리를 만들고(jpql) 거기에 이름을 붙여서 사용하는거임
	이걸 직접쓰진않고,스프링데이터jpa는 이걸 래핑해서,@Query로 제공함(이거도 안씀 대체재있어서)
	사용하는법은
		@NamedQuery(
			name="Member.findByUsername",
			query = "select m from Member m where m.username=:username"
		)
		public class Member {}
	이걸 엔티티에 붙이고
	    @Query(name="Member.findByUsername")
		List<Member> finduser(@Param("username")String username);
	이렇게 사용하면됨,이때,네임드쿼리의 파라미터는,정확히 @Param으로 명시를 해줘야함
	그리고,@Query가 없어도,현재 레포지토리에 명시된 엔티티의 현재 메소드의 이름과 같은이름의 네임드쿼리가 있으면,그걸 가져오게됨
		@NamedQuery(
			name="Member.finduser",
			query = "select m from Member m where m.username=:username"
		)
		public class Member {}
	레포지토리에는
		List<Member> finduser(@Param("username")String username);
	이렇게만 들어가도 동작함
	즉 우선순서가
		네임드쿼리찾기
		해당메서드명 분리해서 쿼리만들어돌리기(findByUsernameAnd어쩌구저쩌구 이런거)
	순임
	근데 그래도 명시해두는게 나을거같긴하다 가독성땜에
	어짜피 이거 안쓸거지만
	
	그냥 레포지토리에서 @Query를 붙여서 사용하는게 좋음
	    @Query("select m from Member m where m.username=:username and m.age=:age")
		List<Member> findUser(@Param("username") String username,@Param("age") int age);
	이렇게
	이건 애플리케이션 실행단계에서 에러를 띄워줌(스트링이지만 띄워줌)
	이건 그냥 이름없는 네임드쿼리라고 보면됨
	
	즉
		간단한 정적쿼리->메소드이름파싱
		복잡한 정적쿼리->@Query
		동적쿼리->queryDSL
		dto조회->queryDSL
	이렇게 선택하면됨
	
	그리고 값으로 조회하거나,dto로 조회하려면
	값은
	    @Query("select m.username from Member m")
		List<String> findUsernameList();
	그냥 이렇게 해당값으로 받으면되고(jpa 복합값타입(@Embedded)도 똑같이받으면됨 이름맞춰서)
	
	dto조회시엔
	    @Query("select new study.datajpa.dto.MemberDto(m.id,m.username,t.name) 
		  from Member m
		  join m.team t")
		List<MemberDto> findMemberDto();
	이렇게 new써서 패키지 다붙이는걸 또해야함(생성자로 데이터는 맞춰주면됨)
	이거도 걍 queryDSL로 해결하는게좋음
	
	파라미터바인딩은,이름기반과 위치기반이 있는데,위치기반은 나중에 바꾸기 개빡세니까 이름기반으로쓰면됨
		where m.username=:username
		@Param("username") String username
	컬렉션을 파라미터바인딩할때는
	    @Query("select m from Member m where m.username in :names")
		List<Member> findByNames(@Param("names") List<String> names);
	이런식으로 걍 던지면됨,이건 in사용할때 많이 사용함
	
	스프링데이터jpa는 반환타입을 유연하게 지원함
	그냥 메서드에서 리턴타입을 뭐로적어뒀냐에 따라 다르게 주는데
		List<Member> findByName(String name); //컬렉션조회
		Member findByName(String name);       //단건조회
		Optional<Member> findByName(String name);//단건 옵셔널조회
	이때 조회결과가 리턴예상값이랑 다르면
		컬렉션이 없으면 빈컬렉션반환
		단건조회시
			결과가없으면 null반환
			결과가 2개이상이면nonUnique익셉션 반환
	이렇게됨,즉 jpa에서 귀찮았던,결과없을때 익셉션터지는걸 얘가 무시해줌(근데 그냥 옵셔널쓰면 해결될거같음,쿼리결과가 없는게 레포지토리의 책임은아니니)
	
	순수jpa에서 페이징과 정렬하려면 오프셋이랑 리미트받아서 setFirstResult,setMaxResults로 페이징하고,orderBy로 정렬하면되긴함
	그리고 페이징하려면 토탈카운트도 있어야하니 이거도 위쿼리랑 같은거로 또 만들어야하고
	이걸가지고 복잡하게 막 현재페이지를 계산하고 어쩌구저쩌구(토탈카운트에서 사이즈를 나눠서 그걸 1페이지로 잡고 그걸 현재페이지에 곱하고..)
	이거도 스프링데이터jpa가 알아서해줌
	그리고 이 정렬과 페이징은,스프링데이터꺼고,스프링데이터jpa꺼가 아니라서,db바꿔도 적용할수있음
	
	스프링데이터jpa에서 정렬,페이징할땐 Pageable과 sort를 사용하면됨
		Page<Member> findByUsername(String name,Pageable pageable); //카운트쿼리사용
		Slice<Member> findByUsername(String name,Pageable pageable);//카운트쿼리 사용안함
		List<Member> findByUsername(String name,Pageable pageable); //카운트쿼리 사용안함
		List<Member> findByUsername(String name,Sort sort);         //소팅만 함
	이런식으로 사용하면됨(페이징안에 내부적으로 Sort를 포함하고있음)
	여기서 추가카운트쿼리가 필요하면 Page를 사용하고(게시판 다음페이지같은거)
	그냥 모바일처럼 페이지가 없으면 Slice를 사용하면됨(이건 만약 리미트10이면 11을 가져오는식으로 다음페이지가 있나 확인하고,있으면 다음거 가져오는식)
	즉,매개변수에 Pageable이 있고,반환타입이 컬렉션이나 Page,Slice면 페이징을 하는거임
	사용은
	    PageRequest pageRequest = PageRequest.of(가져올페이지,갯수, Sort.by(Sort.Direction.DESC, "username"));
        Page<Member> byAge = memberRepository.findByAge(10, pageRequest);
		List<Member> content = byAge.getContent();
	이렇게 하면됨(sort.by로 방향정하고 두번째에 해당필드 넣어주면됨)그리고 가져올페이지는 0번부터시작
	
	그리고 토탈카운트나,토탈페이지,현재페이지번호 알고싶으면
	    long totalElements = PageMember.getTotalElements();
        int totalPages = PageMember.getTotalPages();
		int number = PageMember.getNumber();
	이렇게 가져올수있음(즉 Page를 날리면,자동으로 토탈카운트쿼리를 같이날림)
	그리고 현재페이지가 첫번째냐 마지막이냐(다음페이지가 있냐)도 알수있고
		PageMember.isFirst()  //TF
		PageMember.hasNext() //TF
	이렇게
	그리고 slice의 밑에 page가 있는거라,구현시 page자리에 slice를 넣을수있는데,이래도 카운트쿼리는 나가니까 주의해야함
	카운트쿼리 안나가게하려면 레포지토리에서 slice로 반환해야함
	즉,페이지로 개발해두고,그냥 slice로 바꾸기만 해도 토탈카운트를 안나가게할수있음
	
	카운트쿼리는 풀스캔을 일단 한번 해야하는데(보통 인덱스있으니까 괜찮지만),레프트아우터조인같은경우엔 굳이 카운트쿼리에도 조인을 할필요가 없기때문에 
	이럴때 카운트쿼리를 명시하는식으로,분리할수도 있음(어지간하면 최적화해주긴하는데,조인들어가고 복잡해지면 얘가 처리못하고 넘어갈수있기때문에..)
		@Query(value = "select m from Member m",
		  countQuery = "select count(m.username) from Member m")
		Page<Member> findAllCountBy(Pageable pageable);		
	이렇게
	소팅조건도 이런식으로 할수있음
	
	그리고 Page<Member>같은 엔티티를 직접 외부에 노출시키면 절대안되니까,dto로 변환해서 줘야하는데
		Page<MemberDto> memberDto = pageMember.map(member -> 
			new MemberDto(member.getId(), member.getUsername(), null));
	이런식으로 바로 바꿔서 쓰면됨
	
	
	벌크성 수정쿼리를 넣을땐
	순수 jpa는
        return em.createQuery("update Member  m set m.age=m.age+1 where m.age>=:age")
                .setParameter("age", age)
                .executeUpdate();	
	이렇게 던지면됨
	
	스프링데이터jpa에서는
	    @Modifying
		@Query("update Member m set m.age=m.age+1 where m.age>=:age")
		int bulkAgePlus(@Param("age")int age);
	이렇게 하면됨
	여기서 주의할건,
		@Modifying을 반드시 붙여야함
		벌크성 쿼리를 날리고나서 영속성 컨텍스트를 초기화해야함(벌크성쿼리는 걍 깡쿼리로 날려서 영속성컨텍스트와 db가 내용물이 달라질수있음,즉 무결성깨짐)
			방법
				영속성컨텍스트에 엔티티가 없는상태에서 벌크연산을 먼저 실행
				@Modifying(clearAutomatically=true) //자동으로 영속성컨텍스트 초기화,즉 em.clear()를 자동으로해줌
				em.flush() em.clear()	//@PersistentContext로 em불러와서 해야함,어짜피 빈이니까 다 같은 em이니까			 
	가능하면 영속성컨텍스트에 뭐 안넣고 업데이트부터 하는게 좋긴함(젤 부하가적음)
	만약 그 이후에 조회가 필요하면,영속성컨텍스트를 날려야함
	
	그리고 이거랑 마찬가지로,마이바티스나 깡sql,jdbc템플릿 쓸때도 jpa가 인식못하니까 이거랑 똑같이 em 클리어해줘야함
	
	참고:위에거랑은 상관없지만,jpql은 무조건 flush가 먼저 일어나고,jpql이 발생함
	
	
	엔티티그래프(@EntityGraph)는,jpql없이 페치조인을(jpql사용도 가능) 사용하게 해주는 방법임
	즉 페치조인의 간편버전이라고 보면되고,이건 left Outer Join을 사용함
	즉
	    @Query("select m from Member m left join fetch m.team")
		List<Member> findMemberFetchJoin();
	이걸
		@Query("select m from Member m")
		@EntityGraph(attributePaths = {"team"})
		List<Member> findMemberFetchJoin();
	이렇게 바꾸면됨(물론 그냥 페치조인해도됨,간단하면 엔티티그래프 복잡하면 페치조인 쓰면됨)
	그리고 만약 findAll같은,상위인터페이스꺼를 저렇게쓰고싶으면 오버라이드하면됨
		@Override
		@EntityGraph(attributePaths = {"team"})
		List<Member> findAll();	
	이렇게
	이름으로 파싱하는거에도 가능하고
		@EntityGraph(attributePaths = {"team"})
		List<Member> findByUsernameAndAgeGreaterThan(String username,int age);
	다됨
	네임드쿼리에서는 @NamedEntityGraph로 쓸수있긴한데,네임드쿼리를 안쓰니까..필요하면 찾아보자
	
	
	jpa힌트는,sql힌트가 아닌 하이버네이트 구현체에 쿼리 힌트를 주는거
	대표적으로 리드온리날릴때 가끔 사용함
		@QueryHints(value=@QueryHint(name = "org.hibernate.readOnly",value = "true"))
		Member findReadOnlyByUsername(String username);	
	이런식으로 사용함
	이렇게 해버리면,원본 스냅샷을 안떠서,그냥 변경자체가 불가능해짐
	(예외는 안뜨는데 그냥 바로 준영속이 된다고 보면됨,그래서 메모리에서만 바뀌고 db플러시가 안됨)
	근데 이걸 쓸일이 있나 싶음,어짜피 메모리 좀 더먹는다고 무슨일잇나싶은데,
	걍 있다 정도만 알아두자
	
	그리고 db락걸땐
	    @Lock(LockModeType.PESSIMISTIC_WRITE)
		List<Member> findLockByUsername(String username);
	이렇게 걸수있음
	이러면
	    select m from member m where m.username=? for update
	이렇게 뒤에 for update를 붙여서,트랜잭션이 끝날때까지 crud가 전부 차단됨
	이런 lock은,실시간트래픽이 많은 서비스에선 가급적 안쓰는게좋고,써야한다면 낙관적락(Optimistic Lock)을 거는게좋음
	물론 금전관련이면 비관적락이 나을수도있고
	
	
	
5.확장기능	
	만약 스프링데이터jpa의 특정 메서드를 직접 구현하고싶으면(jdbc나 마이바티스등을 사용하거나,특히 queryDSL사용할때),
	인터페이스를 상속받아서 직접 구현하기엔 너무 구현해야하는 기능이 많음
	그래서 이럴떈,
		새로 인터페이스를 하나 파고,
		내가 만들고싶은 기능만 넣어서 메서드 정의를 하고,
		그걸 구현한 클래스를 만들고(이때 이름은 뒤에 Impl을 꼭 붙여줘야함,이거보고 판단하기때문,MemRepoCustomImpl)
		메인 인터페이스(스프링데이터jpa인터페이스)에서
			public interface MemberRepository extends JpaRepository<Member,Long>,MemberRepositoryCustom {
		이렇게 받으면됨
	이걸 실행시키면,메인 레포지토리를 참조해서 커스텀기능을 실행시킬수 있게됨	
		memberRepository.findMemberCustom();
	즉,논리적으론 메인인터페이스랑,커스텀인터페이스를 합쳐서 메인인터페이스로 쓰는느낌
	
	이때 조건은,구현클래스에서 뒤에 Impl을 꼭 붙여야,스프링데이터jpa가 상속받은 인터페이스에서,구현을 어느클래스로 할지 확인하고 그걸 불러올수있음
	
	이건 쿼리dsl같은걸 쓸때,밖으로 뽑아내서 커스텀해서,2파일로 나눠서 관리하고싶을때 유용함
	
	그리고,항상 커스텀레포지토리가 필요한건 아님,그냥 임의의 레포지토리를 만들고,그걸 그냥 스프링빈으로 등록해서 직접사용해도됨
	즉,굳이 이걸 합쳐야하는게 아니면 걍 따로써도됨 스프링으루 dl넣어서
	이떄 선택방법은,핵심 비즈니스로직 레포지토리랑,화면에 맞춘 쿼리나,복잡한 통계성 쿼리같은 이런 완전히 분리하는게 좋은 레포지토리는,
	걍 스프링빈(@Repository)으로 등록하는게,즉 완전히 2개로 분리하는게 유지보수측면에서 더 나음
	그냥 적당히 간단하게 뽑아낼수 있는거만 커스텀레포지토리에 사용하는듯,일관성 맞는것들만
	
	즉,커맨드와 쿼리의 분리,핵심비즈니스로직과 뷰에맞춘쿼리의 분리 이런걸 잘 생각해야함
	
	
	auditing은,엔티티를 생성,변경할때 무조건 들어가는 등록일,수정일같은걸 공통으로 처리해주는거임
	즉,실수로 빼먹을수있는걸 방지해줌
	얘로 보통 처리하는건
		등록일
		수정일
		등록자
		수정자
	등록자 수정자는 세션id같은걸 사용
	
	깡jpa에선 @MappedSuperclass사용해서 클래스만들고 그거 상속받는식으로 해결할수있음(pdf참고)
	이때 @PrePersist와 @PreUpdate사용해서 현재시간을 받아서 필드에 넣어주면됨
	
	스프링데이터jpa로 사용할땐,스프링부트 설정클래스에
		@EnableJpaAuditing
	넣고(메인에 넣으면됨,xxxApplication)
	엔티티엔
		@EntityListeners(AuditingEntityListener.class)
	붙이면됨
	이떄 사용가능한 어노테이션은
		@CreatedDate
		@LastModifiedDate
		@CreatedBy
		@LastModifiedBy
	가 있음
	사용법은
		@EntityListeners(AuditingEntityListener.class)
		@MappedSuperclass
		@Getter
		public class BaseEntity {
			@CreatedDate
			@Column(updatable = false)
			private LocalDateTime createDate;
			@LastModifiedDate
			private LocalDateTime lastModifiedDate;
		}
	이렇게 붙이고
		public class Member extends BaseEntity {}
	이렇게 쓰면됨
	등록자,수정자는
	    @CreatedBy
		@Column(updatable = false)
		private String createdBy;
		
		@LastModifiedBy
		private String lastModifiedBy;
	이렇게 넣고,스프링부트 메인에서(xxxApplication)
		@Bean
		public AuditorAware<String> auditorProvider(){
			return ()-> Optional.of(UUID.randomUUID().toString());
		}	
	람다를 던지고(여기선 랜덤uuid를 던지지만 실제론 세션같은데서 값 받아와서 써야겠지만)
	저걸 받아다가 넣음(즉,리턴값이 AuditorAware인 빈을 받아다가 사용함)
	
	그리고 보통,등록일 수정일 클래스와,등록자 수정자클래스를 따로두고,등록자 클래스가 등록일클래스를 상속(등록일은 무조건들어가니)하는식으로 사용할수있음
	
	
	도메인클래스컨버터는,컨트롤러단에서 바로 엔티티의 id를 받아서 사용하는거임,즉 findById를 거치지않고 바로 사용하려는거
	이건 그냥
		@GetMapping("/members/{id}")
		public String findMember(@PathVariable("id")Member member){
			return member.getUsername();
		}
	이렇게 쓰면됨
	단,주의해야할건,이렇게쓰면 영속상태가 아니기때문에(트랜잭션이 없으니까),엔티티를 업데이트를 해도 반영되지않음
	그리고 외부에서 pk를 받아서 조회할일이 많이있지도않고
	그냥 있다는거만 알고있자
	
	스프링데이터에서 제공하는 페이징과 정렬을 mvc에서 사용할때도 편하게 쓸수있는데,컨트롤러에서 Pageable을 받아서 쓸수있음
	    @GetMapping("/members")
		public Page<MemberDto> list(Pageable pageable){
			Page<Member> page = memberRepository.findAll(pageable);
			Page<MemberDto> map = page.map
					(m -> new MemberDto(m.getId(), m.getUsername(), m.getTeam().getName()));
			return map;
		}	
	이러면,
		localhost:8080/members?page=1&size=2&sort=id,desc&sort=username,desc
	이런식으로 자동으로 받아서 페이징을 할수있음(따로 뭐 안해줘도됨)
	여기서 사용할수있는건
		page  //인덱스 0부터 시작
		size  //기본값 20
		sort //이건 두개이상넣을수도있음,그러면 앞에서부터 큰단위정렬,즉 우선순위같을때 이후정렬조건으로 들어감,기본값 asc
	이때 이 기본값을 바꾸고싶으면,
	글로벌로 바꾸려면,어플리케이션 프로퍼티에(그 맨날 스프링 세팅넣던 그거)
		spring.data.web.pageable.default-page-size=2
		spring.data.web.pageable.one-indexed-parameters=true
	이렇게 바꾸면됨
	그리고 만약 특정 컨트롤러만 바꾸고싶으면
		public Page<MemberDto> list(@PageableDefault(size=5,sort = "username") Pageable pageable){
	이렇게 바꿀수있음
	
	이떄 one-indexed-parameters는 조심해야하는게,그냥 들어온값은 -1하고,0보다작으면 0으로바꾸는거밖에 없어서,
	0으로날리든 1로날리든 값이 똑같고,리턴값에서 메타데이터들이(pageNumber같은) false일때랑 똑같음 ㅋㅋ
	그래서 조심해서 쓰던가 걍 안쓰는게 나을듯,아니면 프론트에서 잘 처리해주길 바래야할듯
	
	그리고 페이징을 하든 뭘하든 엔티티반환은 절대안되니까 dto로 변환해서 줘야함
	그리고 엔티티는 dto를 의존하면안되지만,dto는 엔티티를 의존해도되니까,그냥 dto에서 엔티티를 받는 생성자만들어두면 편함
	
	
	
	
	
6.스프링데이터 jpa 분석
	기본적으로 스프링데이터jpa의 구현체는,SimpleJpaRepository임
	사실 코드보면 그냥 jpa를 래핑해서 사용+스프링 레포지토리(@Repository)를 사용하는거임
	그래서 하부에서(jpa에서)예외가 나도 스프링예외으로 바꿔서 올라감(즉 jpa를 다른거로 바꿔도 똑같은 예외가 남)
	
	그리고 트랜잭셔널을 레포지토리단위로 readOnly=True로 걸어두고(@Transcational(Readonly=True)),
	업데이트,딜리트하는곳에서만 푸는식으로 해둠(@Transcational)
	
	
	그리고 중요한건,save()메서드는,엔티티가 새거면 persist하고,아니면 merge를 날림
	여기서 persist와 merge는 코스트차이가 크기때문에(머지는 셀렉트가 한번 나가야함),그래서 최대한 persist로 동작하게 해야함
	
	즉 삽입은 persist,변경은 더티체킹으로 해야함
	
	이때 스프링데이터jpa가 persist와 merge를 구분하는방법은,pk가 객체면 null,기본타입이면 0이면 새엔티티라고 판단함
	이게 @GeneratedValue넣어두면 걍 persist해버리는데,문제는 uuid쓰려고 저걸 안넣어두고,직접 삽입할때 생김
	그러면 select가 한번 나가서 쿼리가 2번나가서 쓸모없는부하가생김
	
	그래서 uuid사용할때는,Persistable를 직접 구현해서,저 판단루틴을 덮어씌워서 다른방식으로 바꿔야함
		public class Item implements Persistable<String> {}
	이걸상속받고
		@Override
		public boolean isNew() {
			return createDate==null;
		}	
	이걸 구현해주면됨 
	
	
	
7.나머지기능들
	필요없는건 스킵
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	