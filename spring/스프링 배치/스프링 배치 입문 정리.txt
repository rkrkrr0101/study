1.서론
	배치는 실시간작업을 할수없는,모아서 하는게 효율적인 작업을을 모아서 처리하는걸 말함
	보통 카드결제같은걸 특정날짜에 몰아서 처리하는식이나,좋아요나 조회횟수등을 모아서 한번에 처리할때 사용함
	그리고 이메일 쿠폰발송,정산,명세서생성,추천시스템 데이터작업등에서 사용함
	이렇게해야 실시간 작업에 영향을 주지않고 작업을 할수있음

	스프링배치를 쓰는 가장 큰 이유는,일단 만들기편하고(기능다만들어뒀으니),기존서비스에 있는 로직을 그대로 긁어서 사용할수있다는 장점이 있음

	스프링배치는
		배치가 수행될때 Job의 메타데이터를 관리하는 JobRepository
		Job을 실행시키는 JobLauncher
		Step들의 집합인 Job(ex: 이메일 발송 job)
		실제 로직단위인 Step
		스텝속에서 읽기를 담당하는 ItemReader
		스탭속에서 로직을 담당하는 ItemProcessor
		스탭속에서 쓰기를 담당하는 ItemWriter
	로 구성됨
2.기본실행
	잡을 실행할때 잡이름을 파라미터로 넘기려면(특정잡만 실행하고싶을때),application.yaml에
		spring:
		  batch:
			job:
			  name:${job.name:NONE}
	추가
	그리고 디비설정하고,
	5.0이후버전에선 따로 뭐 설정안해도 잡이 하나라면 자동으로 실행하고(디폴트),위의 설정을 했으면 프로그램인수로 넘겨받은 이름의 job만 실행함
	즉 2개이상일땐 선택해야함
	인수는
		--spring.batch.job.name=잡이름
	넣으면됨,인텔리제이는 그냥 위에 실행하는곳에서 설정열고,옵션수정으로 프로그램인수 추가한후 넣으면됨
	
	근데 만약 배치 5.0이전버전이라면 메인앱에 @EnableBatchProcessing 추가하면됨(5.0이상에서 붙이면 실행안되니 주의)	
	그리고 JobBuilderFactory와 StepBuilderFactory는 depercated됐으니 빌더를 그냥쓰면됨
	
	가장 정석적으로는 각각 잡과 스탭 클래스를 만들고,Job와 Step인터페이스를 상속받아서 구현한다음(빈아님),
	Configration에서 해당 클래스를 리턴하는 빈을 만들면 되는데,이렇게는 보통 사용하지않음
	
	보통 잡은 만들일없고,심플잡(이건 순서대로 스탭 실행시켜주는애임,기본값)이나 플로우잡(복잡한처리할때 사용)같은 구현체 가져다가,스탭붙여서 사용함
	즉,실제론
		@Bean
		fun helloWorldJob(jobRepository: JobRepository, helloWorldStep: Step, byeWorldStep: Step):Job{
			return JobBuilder("helloWorldJob",jobRepository)
				.incrementer(RunIdIncrementer()) //잡이 여러개실행될때,잡이름뒤에 숫자를 AI해줌
				.start(helloWorldStep)
				.next(byeWorldStep)
				.build()
		}
	이런식으로 JobBuilder를 사용해서,잡이름을 붙이고 스탭들을 di해서 순서대로 나열한후 빌드하는식으로 사용함 
	
	스탭도 잡처럼 여러 구현체들이 있음
		TaskletStep:파일복사나 아카이브생성과 같은 간단한작업이나 파일,db테이블읽기와 같은 항목중심작업을 위해 설계됨
		PartitionedStep:파티션으로 구성된 입력데이터셋처리를 위해 설계됨
		FlowStep:스탭을 플로우로 논리적 그룹화하는데 유용
		JobStep:플로우스탭과 유사하지만 지정된 플로우단계에 대해 별도의 잡을 생성하고 실행함,잡 밑에 잡을 두는식으로 구성할떄 유용	
	이렇게
	
	여기서 태스크랫스탭이 주로 사용되는데,태스크랫에 대해 알아야함
	태스크랫은 스탭이 호출될때 작업의 단위임,한 스탭은 한개이상의 태스크랫으로 이루어지고,
	이 태스크랫은 작업이 성공할때까지 계속 반복됨(최대횟수제한도 가능)
	여기서 성공은,명시적으로 성공했다는 내용을 보내야함
	즉 반복문의 속내용이라고 보면됨
	이 태스크랫안에 아이템리더,라이터,프로세서들이 포함됨(즉 리더,라이터등은 태스크랫의 구현체임)
	
	스탭도 똑같이 스탭빌더를 사용해서 만듬
		@Bean
		@JobScope
		fun helloWorldStep(jobRepository: JobRepository,
						   transactionManager: PlatformTransactionManager,
						   helloWorldTaskLet: Tasklet): Step {
			return StepBuilder("helloWorldStep",jobRepository)
				.tasklet(helloWorldTaskLet,transactionManager)
				.build()
		}
	여기서 잡스코프는 저걸 사용해서 레이트바인딩을 할수있음
	즉 어플리케이션 실행시점이 아닌,메서드 실행시점으로 바인딩을 미뤄(빈생성을 미루는거),각 실행시점마다 다른 잡파라미터를 할당하게할수있음
	태스크랫은
		open class HelloWorldTaskLet:Tasklet{
			override fun execute(contribution: StepContribution, 
								 chunkContext: ChunkContext): RepeatStatus? {
				println("hello World")
				return RepeatStatus.FINISHED
			}
		}
	이때 open을 붙여야함,코틀린은 기본적으로 클래스의 하위클래스 생성을 막기때문에,프록시객체 생성(위빙)이 불가능해져서 예외가 발생함
	이렇게 클래스를 만들고 execute를 구현한다음,작업을 하고 RepeatStatus를 리턴해주면됨(성공하면 finished)
	그리고나서 빈등록해서 쓰면됨
		@Bean
		@StepScope
		fun helloWorldTasklet():Tasklet{
			return HelloWorldTaskLet()
		}
	이렇게
	이떄 @StepScope는 잡파라미터를 쓸때 필요하고,스프링배치는 저걸 사용해서 레이트바인딩을 함
	
	이러면 일단 돌려볼수있는데,따로 설정안했으면 그냥 나올거고,이름선택하게 설정했으면 프로그램인수로 이름던져야할거임
	
	배치에서 잡을 실행하고나면,잡레포지토리가 연결된 저장소에 실행한 잡의 로그를 남김
	근데 보통은 자기알아서 로그테이블을 만들어서 던지는편
	
3.배치 실행시 파일이름받기 및 csv검증
	파일이름이나 그런 파라미터를 받고 검증할땐,이거도 프로그램인수로 받을수있음
		fileName=test.csv
	즉
		--spring.batch.job.name=validatedParamJob fileName=test.csv
	이렇게
	그리고 태스크랫빈에서
	    @Bean
		@StepScope
		fun validatedParamTasklet(@Value("#{jobParameters['fileName']}") fileName:String):ValidatedParamTaskLet{
			return ValidatedParamTaskLet(fileName)
		}
	이렇게 건네주고(@Value를 사용해서 jobParameters를 받으려면 @StepScope를 붙여야함)	
		open class ValidatedParamTaskLet(private val fileName:String):Tasklet{
			override fun execute(contribution: StepContribution, chunkContext: ChunkContext): RepeatStatus? {
				println(fileName)
				println("valid batch")
				return RepeatStatus.FINISHED
			}
		}	
	이렇게 받을수있음
	그리고 해당값을 검증할땐,직접 로직짤수도 있지만,이미 스프링배치에서 인터페이스는 다 만들어뒀음
	이건 잡이 실행할때 검증할수있음
	일단 밸리데이터를 만들고
		class FileParamValidator:JobParametersValidator {
			override fun validate(parameters: JobParameters?) {
				parameters!!
				val fileName = parameters.getString("fileName")
				if (!StringUtils.endsWithIgnoreCase(fileName,"csv")){
					throw JobParametersInvalidException("not csv")
				}
			}
		}
	이 밸리데이터는 잡파라메터를 받아서 예외가 뜨면 중단,예외가 안뜨면 넘어가는구조로 만들면됨,즉 여기서 다 검증하고 넘어갈수있음
	그리고 잡에서 등록하면됨
	    @Bean
		fun validatedParamJob(jobRepository: JobRepository,validatedParamStep: Step):Job{
			return JobBuilder("validatedParamJob",jobRepository)
				.incrementer(RunIdIncrementer())
				.validator(FileParamValidator())
				.start(validatedParamStep)
				.build()
		}
	그러면 스타트전에 저걸 거쳐서 테스트하고 스타트로 넘어가고,아니면 예외뜨고 넘어가는거임
	이 밸리데이터는 여러개 등록할수있는데,이떈 밸리데이터를 합쳐줘야함
	    private fun multiValidator():CompositeJobParametersValidator{
			val validator = CompositeJobParametersValidator()
			validator.setValidators(listOf(FileParamValidator()))
			return validator
		}
	이렇게,저기서 리스트안에 여러개넣고,위에서 저거호출하면됨
	
	
4.배치작업 실행 전,후 로그추가를 위한 리스너
	테스트처럼 배치작업 실행전과 후에 동작하는 리스너를 등록할수있음
		@Bean
		fun jobListenerJob(jobRepository: JobRepository,jobListenerStep: Step):Job{
			return JobBuilder("jobListenerJob",jobRepository)
				.incrementer(RunIdIncrementer())
				.listener(JobLoggerListener())
				.start(jobListenerStep)
				.build()
		}
	리스너는
		class JobLoggerListener:JobExecutionListener {
			private val log=LoggerFactory.getLogger(this.javaClass)
			private val BEFORE_MESSAGE="{} Job is Running"
			private val AFTER_MESSAGE="{} Job is Done. (Status: {})"

			override fun beforeJob(jobExecution: JobExecution) {
				log.info(BEFORE_MESSAGE,jobExecution.jobInstance.jobName)

			}

			override fun afterJob(jobExecution: JobExecution) {
				log.info(AFTER_MESSAGE,jobExecution.jobInstance.jobName,jobExecution.status)
				if (jobExecution.status==BatchStatus.FAILED){
					//슬랙같은거로 던지게 할수있음
					log.info("Job is fail")
				}
				
			}
		}	
	이런식으로 JobExecutionListener를 구현하고,beforeJob과 afterJob을 오버라이딩하는식으로 할수있음
	그리고 after에서는 상태를 받을수있으니,해당상태에 따른 추가적 알림같은걸 넣을수도있음
	
	
5.db데이터 이관	
	데이터를 읽고쓸떄(db든 파일이든)는 ItemReader와 ItemProcessor, ItemWriter를 사용하면됨
	이걸 사용할떈 청크를 사용해야함
	청크는 한 트랜잭션을 얼만큼씩 가져와서 성공실패처리를 할건지를 정함
	즉 트랜잭션을 걸 단위임
	이게없으면 데이터전체를 잡고 트랜잭션을 걸어야하니 실패율이 기하급수적으로 올라감,
	
	청크를 사용하면 실패시,청크를 다시 재시도하는식으로 에러처리를 쉽게할수있음
	이건
		.chunk<Order, Account>(5,transactionManager)
	이렇게 한번에 5개씩 앞의값으로 읽어서 뒤의값으로 쓰겠다는거임
	즉 리더는 Order로,라이터는 Account로 입출력이 됨
	
	아이템리더는 레포지토리아이템리더를 쓰면 편하게할수있음
		@StepScope
		@Bean
		fun trOrderReader():RepositoryItemReader<Order>{
			return RepositoryItemReaderBuilder<Order>()
				.name("trOrder")//리더이름
				.repository(orderRepository)//사용할 레포지토리
				.methodName("findAll")//내가 사용할 메서드명
				.arguments()//메서드에서 사용할 매개변수,여기선 없으니까 안넘김,있으면 리스트에 담아서 넘기면됨(listOf<String>("ㅁㅁ",))
				.pageSize(5)//청크사이즈와 일치시키면됨
				.sorts(Collections.singletonMap("id",Sort.Direction.ASC))//정렬추가
				.build()
		}
	이렇게 만들면됨
	그리고 저걸 변형하려면 아이템프로세서를 사용하면됨
		@StepScope
		@Bean
		fun trOrderProcessor():ItemProcessor<Orders,Accounts>{
			return ItemProcessor { Accounts.orderToAccount(it) }
		}
	이렇게 작업을 ItemProcessor에서 하고(단일레코드단위로 생각하면됨)
	
	이걸 적어야하는데 이건 ItemWriter를 사용하면됨,그중에서 레포지토리아이템리더를 사용하면 더 편함
		@StepScope
		@Bean
		fun trAccountWriter():ItemWriter<Accounts>{
			return RepositoryItemWriterBuilder<Accounts>()
				.repository(accountRepository)
				.methodName("save")
				.build()
		}
	이러면 읽어서 변환해서 쓰는 작업이 끝나는거임
	이걸 스탭에 담고
		@JobScope
		@Bean
		fun trMigrationStep(jobRepository: JobRepository,
							transactionManager: PlatformTransactionManager,
							trOrderReader:ItemReader<Orders>,
							trOrderProcessor:ItemProcessor<Orders,Accounts>,
							trAccountWriter: ItemWriter<Accounts>
		):Step{
			return StepBuilder("trMigrationStep",jobRepository)
				.chunk<Orders, Accounts>(5,transactionManager) //트랜잭션매니저는 반드시 넣어줘야함
				.reader(trOrderReader)
				.processor(trOrderProcessor)
				.writer(trAccountWriter)
				.build()
		}
	잡에서 이거 부르기만하면 끝임
	물론 레포지토리아이템리더라이터 대신 그냥 아이템리더라이터를 사용해서 직접로직을 호출해서(레포지토리를 직접불러서 처리후 리턴)해도 됨
	그냥 jpa레포지토리같은거임 날먹가능하게만들어둔거
	
6.파일 읽고 쓰기
	파일을 읽고쓸땐 
		FlatFileItemReaderBuilder
		FlatFileItemWriterBuilder
	를 사용하면됨
	리더는
		@StepScope
		@Bean
		fun fileDataReadWriteReader():FlatFileItemReader<Player>{
			return FlatFileItemReaderBuilder<Player>()
				.name("fileDataReadWriteReader")
				.resource(FileSystemResource("player.csv"))//파일을 담으면됨
				.lineTokenizer(DelimitedLineTokenizer())//데이터를 나누는기준,delimitedLineTokenizer은 ,기준으로 분할
				.fieldSetMapper (PlayerFieldSetMapper())//파일과 엔티티를 매핑시키는 매퍼
				.linesToSkip(1)//파일의 첫줄스킵,엑셀파일의 맨위의 줄 스킵
				.build()
		}
	이렇게 사용하면되고,여기서 fieldSetMapper는,해당파일을 엔티티로 변환시켜서 리턴해주면됨
	여기서 StepScope를 붙이면 인터페이스가 아닌 구현체인 FlatFileItemReader<>를 리턴해야하는거에대해 주의
	이건 FieldSetMapper<>를 구현해서 만들면됨
		class PlayerFieldSetMapper:FieldSetMapper<Player> {
			override fun mapFieldSet(fieldSet: FieldSet): Player {
				return Player(
					fieldSet.readString(0),
					fieldSet.readString(1),
					fieldSet.readString(2),
					fieldSet.readString(3),
					fieldSet.readInt(4),
					fieldSet.readInt(5),
				)
			}
		}
	이렇게 fieldSet에서 값을 가져와서(앞에서 순서대로 라인토크나이저로 끊은거대로 가져옴,여기선 순서로했지만 이름으로도 가능)
	중간에 작업있으면 똑같이 프로세서쓰면되고
	    @StepScope
		@Bean
		fun fileDataReadWriteProcessor():ItemProcessor<Player,PlayerYear>{
			return ItemProcessor { PlayerYear.playerToPlayerYear(it) }
		}
	쓸땐
		@StepScope
		@Bean
		fun fileDataReadWriteWriter(): FlatFileItemWriter<PlayerYear> {
			val filedExtractor=BeanWrapperFieldExtractor<PlayerYear>()//적을 필드명을 나열
			filedExtractor.setNames(arrayOf("ID","lastName","firstName","position","birthYear","debutYear","yearsExperience"))

			val lineAggregator=DelimitedLineAggregator<PlayerYear>()//어떤기준으로 나눠적을지
			lineAggregator.setDelimiter(",")
			lineAggregator.setFieldExtractor(filedExtractor)

			return FlatFileItemWriterBuilder<PlayerYear>()
				.name("fileDataReadWriteWriter")
				.resource(FileSystemResource("playerYear.csv"))
				.lineAggregator(lineAggregator)
				.build()
		}	
	이렇게 쓰면됨
	그리고 스탭에 넣고
	    @JobScope
		@Bean
		fun fileDataReadWriteStep(
			jobRepository: JobRepository,
			transactionManager: PlatformTransactionManager,
			fileDataReadWriteReader: ItemReader<Player>,
			fileDataReadWriteProcessor:ItemProcessor<Player,PlayerYear>,
			fileDataReadWriteWriter: ItemWriter<PlayerYear>

		):Step{
			return StepBuilder("trMigrationStep",jobRepository)
				.chunk<Player, PlayerYear>(5,transactionManager)
				.reader(fileDataReadWriteReader)
				.processor (fileDataReadWriteProcessor)
				.writer (fileDataReadWriteWriter)
				.build()
		}
	잡에넣어서 실행시키면됨
	    @Bean
		fun fileDataReadWriteJob(jobRepository: JobRepository,fileDataReadWriteStep:Step):Job{
			return JobBuilder("fileDataReadWriteJob",jobRepository)
				.incrementer(RunIdIncrementer())
				.start(fileDataReadWriteStep)
				.build()

		}
	
7.여러 스탭 구동 및 실행상태에 따른 분기처리
	당연히 스탭을 여러개 실행할수도있음(각 종류별로 분리해서)
	    @Bean
		fun abcJob(jobRepository: JobRepository,abcStep1:Step,abcStep2:Step,abcStep3:Step):Job{
			return JobBuilder(",abcStep1:Step",jobRepository)
				.incrementer(RunIdIncrementer())
				.start(abcStep1)
				.next(abcStep2)
				.next(abcStep3)
				.build()

		}	
	그리고 스탭에서 다음스탭으로 데이터를 전달할땐,ExecutionContext를 사용해서 옮길수있음
		https://docs.spring.io/spring-batch/reference/common-patterns.html#passingDataToFutureSteps
	그리고 분기처리는,스탭의 상태(failed completed이런거)에 따라 분기할수있음
	이건
        return JobBuilder("abcJob",jobRepository)
            .incrementer(RunIdIncrementer())
            .start(mainStep)
                .on("FAILED").to(failStep)
			.from(mainStep)
                .on("COMPLETED").to(completedStep)
			.from(mainStep)
                .on("*").to(conditionStep)
            .end()
            .build()
	이런식으로 할수있음
	메인스탭에서 성공,실패,기타등등으로 나눠서 다음스탭을 정하는거
	
	
8.배치 테스트코드 작성	
	
	
	
	
	
	
	
	
	
	
	
	
	
