1.서장
	배치는 대량의 데이터를 일괄처리하는 방법임
	배치를 할때 중요한점으로는
		대량의 데이터를 효율적처리
		인적 오류 및 하드웨어결함에 따른 오차허용범위
		확장성
	이 중요함
	
	job(작업)는 중단없이 처음부터 끝까지 실행되는 배치프로세서를 캡슐화하는 엔티티임
	잡에는 하나 이상의 스텝(단계)가 있고,여기엔 단순작업(파일복사 or 아카이브생성)이거나 항목중심작업(rdbms에서 파일로 레코드내보내기)일수가 있음
	
	잡은 jobLauncher로 실행해야하고 jobParameter세트를 사용해서 시작할수있음,
	현재 실행중인 job에 대한 실행메타데이터는 jobRepository에 저장됨
	
	스프링배치의 구성 도메인 테이블로는
		Job_Instance:잡이름,식별키등 잡과 관련된 모든 정보가 포함되어있음
		Job_Execution:시작시간,종료시간,상태등 잡 실행과 관련된 모든정보가 포함되어있음,잡이 실행되면 여기에 로우가 하나씩 늘어나는식
		Job_Execution_Context:잡의 실행컨텍스트가 들어있음,실행컨텍스트는 실패 후 검색해야하는상태를 나타내는 런타임정보의 키값쌍
		Step_Execution:스탭의 시작시간,종료시간,항목읽기횟수,항목쓰기횟수등 스텝실행과 관련된 모든정보가 들어있음,스텝이 실행되면 로우가 하나씩증가
		Step_Execution_Context:스텝의 실행컨텍스트가 들어있음,잡대신 스텝이 들어있다뿐이고 위랑같음
		Job_Execution_Params:잡 실행의 런타임 매개변수가 포함되어있음
	이렇게 구성됨	
	
	스프링배치는 확장가능한 모듈형방식으로 설계되었고,아키텍쳐는
		Application 계층:배치작업과 사용자지정코드가 들어있음
		Batch Core 계층:배치작업을 생성하고 제어하는데 필요한 코어클래스들이 들어있음,잡과 스탭의 구현등이 들어있는곳
		Batch Infrastructure 계층:스프링배치에서 제공하는 항목읽기쓰기와,코어와 어플리케이션등에서 다 사용하는 반복 및 재시도같은게 들어있음,
			스프링배치의 기본라이브러리같은느낌
	보통 스프링배치를 개발할떄,배치인프라 및 배치코어모듈에서 제공하는 api를 사용하여 어플리케이션계층에서 잡과 스탭을 정의하는식으로 사용하면됨
	
	설정은
		1.application.properties에 디비관련정보(종류 아이디 패스워드)추가
			spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
			spring.datasource.username=postgres
			spring.datasource.password=postgres
		2.@configuration붙일만한 설정클래스추가
	
	
	
	
	
2.job 생성 및 실행	
	잡은 처음부터 끝까지 실행되는 전체 배치프로세스를 캡슐화하는 엔티티임
	잡은 특정순서로 실행되는 스탭들로 구성됨
	스프링 배치에서 잡은
		public interface Job {
			String getName();
			void execute(JobExecution execution);
		}	
	이 인터페이스를 구현하면됨(여기서 이름을 넣고 execute를 구현하면됨)
	execute는 JobExecution객체에대한 참조를 제공함
	JobExecution는 런타임에 실제 실행되는 작업을 나타내고,여기엔 시작시간 종료시간,실행상태등 여러 런타임정보가 들어있음
	그리고 execute는 예외를 리턴하지않음,즉 모든 예외는 구현에서 알아서 다 처리하고,성공실패를 JobExecution객체에 추가하고,
	클라는 성공실패를 판단하기위해 JobExecution를 검사하는식으로 동작함
	
	스프링 배치의 핵심개념중 하나는 JobRepository임
	이건 잡과 스탭에 대한 모든 메타데이터가 저장되는곳임
	이 jobRepository는 영구저장소(rdb)가 될수도있고,메모리저장소가 될수도있음
	영구저장을 하면,작업후에 데이터 분석을 하거나,장애발생시 작업을 다시 할수있다는 장점이 있음	
	스프링배치는 알디비에 배치메타데이터를 저장하는 jdbc구현체를 제공함
	
	잡의 실행은 jobLauncher로 실행할수있음
	잡은 잡런처에서 job와 jobParameters를 받아서 실행을 시킴
	jobParameters는 잡에서 필요한 키값쌍의 모음이고,
	잡런처 인터페이스의 구현은 JobRepository에서 유효한 jobExecution을 가져와서 잡을 실행시켜야하고,
	jobLauncher의 run메서드는 다양한유형의 예외를 던질수있음
	보통 jobLauncher는 구현체를 제공하기때문에 이걸 직접 구현할필요는 없음
	

	잡을 생성할땐 implements Job로 인터페이스를 상속받아서
		getName()
		execute(JobExecution execution)
	을 구현하면됨
	그리고 
	@Configuration클래스파일에
		@Bean
		public Job job(){
		  return new BillingJob();
		}	
	이렇게 빈등록하고나면 잡은 끝난거
	스프링부트 기본설정에는,빈으로 등록되어있는 모든 잡을 스프링부트시작때 실행시키는 설정이 있음
	그리고 잡이 성공했는지 실패했는지는
		'select * from BATCH_JOB_EXECUTION;'
	쿼리로 연결된 db에 날려보면 알수있는데,이떄 잡에서 성공실패를 구현해줘야함
	이러려면 잡에서 jobRepository를 di받고
		public class BillingJob implements Job {
			private JobRepository  jobRepository;
			public BillingJob(JobRepository jobRepository){
				this.jobRepository=jobRepository;
			}
			...
		}
	execute에서 JobExecution을 사용해서 상태를 설정하고 잡리포지토리에 던져줘야함
		@Override
		public void execute(JobExecution execution) {
			System.out.println("processing billing information");
			execution.setStatus(BatchStatus.COMPLETED); //작업상태설정
			execution.setExitStatus(ExitStatus.COMPLETED);//작업완료설정
			this.jobRepository.update(execution);//설정업데이트
		}
	여기서 상태엔
		BatchStatus.STARTED//작업을 시작함
		BatchStatus.FAILED//작업이 실패함
		BatchStatus.COMPLETED//작업을 완료함
	이 있고,completed를 던질때는
		execution.setExitStatus(ExitStatus.COMPLETED);
		execution.setExitStatus(ExitStatus.FAILED.addExitDescription(exception.getMessage()));
	를 성공실패여부에 따라 같이던져주면됨
	즉 상태를 보고하는건 job의 책임이라는거
	이후엔 configuration파일의 job 빈에서
	  @Bean
	  public Job job(JobRepository jobRepository){
		return new BillingJob(jobRepository);
	  }
	이렇게 di해주면됨
	
	잡에서 실패했을때를 처리할떄도,절대 예외가 밖으로 나가선안됨,즉 전체를 트라이캐치로 잡고 처리해야함
		public void execute(JobExecution execution){
			try{
				정상처리로직
			}catch(Exception exception){
				execution.addFailureException(exception);
				execution.setStatus(BatchStatus.COMPLETED);
				execution.setExitStatus(ExitStatus.FAILED.addExitDescription(exception.getMessage()));

			}finally{
				this.jobRepository.update(execution);
			}
		}
	이런식으로 하면됨
	즉
		@Override
		public void execute(JobExecution execution){
			try{
				System.out.println("processing billing information");//작업로직
				execution.setStatus(BatchStatus.COMPLETED);
				execution.setExitStatus(ExitStatus.COMPLETED);
				
			}catch(Exception exception){
				execution.addFailureException(exception);
				execution.setStatus(BatchStatus.COMPLETED);
				execution.setExitStatus(ExitStatus.FAILED.addExitDescription(exception.getMessage()));

			}finally{
				this.jobRepository.update(execution);
			}    
		}
	이런식으로 되는거
	
	
	배치잡을 테스트할때는,테스트에 @SpringBootTest를 붙이고,
	선택사항(@ExtendWith(OutputCaptureExtension.class))으로 표준입출력을 받을지말지를 정하고
	테스트할 잡과 잡런처를 오토와이어드받은다음	
		@Autowired
		private Job job;

		@Autowired
		private JobLauncher jobLauncher;
	테스트작성을 하면됨
		@Test
		void testJobExecution(CapturedOutput output) throws Exception {
			// given
			JobParameters jobParameters = new JobParameters();

			// when
			JobExecution jobExecution = this.jobLauncher.run(this.job, jobParameters);

			// then
			Assertions.assertTrue(output.getOut().contains("processing billing information"));
			Assertions.assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus());
		}
	여기서 잡파라미터와 잡을 합쳐서 잡런처로 던져서 수동으로 실행하는식
	
	
	잡은 한번사용될수도있지만,보통 정해진 일정에 따라 여러번 실행될 가능성이 높음
	그래서 각 실행시점마다의 잡들을 구분할 필요성이 생기고,그래서 나온게 잡인스턴스임
	잡이 클래스라면 잡인스턴스는 잡으로 생성된 실제객체라고 생각하면됨
	
	잡인스턴스는 Job+JobParameters로 구성되고,
	잡인스턴스는 매개변수집합(JobParameters)으로 다른 잡인스턴스들과 구별됨
	변수가 날짜마다면 날짜마다 잡인스턴스가 있고,파일별이라면 파일마다 잡인스턴스가 있는거
	보통 잡 실행마다 다르게해야하는걸(처리할데이터) 잡파라메터에 넣어서 처리하는게 구성하기가 좋고 재사용,테스트도 편함
	
	JobExecution은 잡인스턴스를 가지고 실제로 실행하는 객체임,잡인스턴스가 잡익스큐션을 만들어서 실제로 잡을 돌리는거
	즉 잡인스턴스는 잡과 잡파라메터를 받아서 잡익스큐션을 생성하는식임
	이때 잡익스큐션이 실패하면,재시도를 할수있는데 이러면 잡익스큐션의 id가 달라지는식임	
	스프링배치는 잡익스큐션이 성공하지않으면 잡인스턴스가 완료된것으로 간주하지않고,완료된 잡인스턴스는 재시작할수없음
	
	JobParameters는 하나의 잡인스턴스를 다른 잡인스턴스와 구별하는데,즉 특정 잡인스턴스를 식별할때 사용함
	이떄 모든 파라메터가 작업인스턴스를 식별하는데 사용할수있는건 아님
	그래서 파라메터를 식별 잡파라메터와 비식별 잡파라메터로 나눌수있음
	예를들어 date는 식별 잡파라메터고,파일형식은 비식별 잡파라메터임
	스프링 배치는 식별매개변수인지 아닌지를 지정하는 api를 제공함
	
	이 잡파라메터를 식별하는건 장애발생시 어떤 특정 잡인스턴스가 실패했는지를 알아내야해서 중요함
	이떄 잡인스턴스를 알아내면,해당 잡인스턴스(해당 잡파라메터)를 넣어서 다시 실행시키면 내용이 같은 잡익스큐션이 생성된다는게 중요한거
	
	잡파라메터는
		@Override
		public void execute(JobExecution execution) {
			JobParameters jobParameter=execution.getJobParameters();
			String inputFile=jobParameter.getString("input.file");
			System.out.println("processing billing information from file " + inputFile);


			execution.setStatus(BatchStatus.COMPLETED);
			execution.setExitStatus(ExitStatus.COMPLETED);
			this.jobRepository.update(execution);
		}
	즉
		jobParameter.getString("키이름");
	이런식으로 꺼내쓸수있음
	그리고 저 매개변수는
		java -jar target/billing-job-0.0.1-SNAPSHOT.jar input.file=src/main/resources/billing-2023-01.csv
		java -jar 실행파일 키=밸류
	로 넣을수있음
	
	잡인스턴스는
		select * from BATCH_JOB_INSTANCE;
	로 검색할수있고,여기서 잡키가 잡파라미터를 해시한값임
	잡파라메터는
		select * from BATCH_JOB_EXECUTION_PARAMS
	로 볼수있고,각 잡익스큐션마다의 파라메터들이 로그로 들어있음
	
	같은 잡인스턴스 실행을 2번이상할경우,즉
		java -jar target/billing-job-0.0.1-SNAPSHOT.jar input.file=src/main/resources/billing-2023-01.csv
		java -jar target/billing-job-0.0.1-SNAPSHOT.jar input.file=src/main/resources/billing-2023-01.csv
	이렇게 2번을 할경우,첫번째꺼가 성공하고나면 두번쨰꺼는 무조건 실패함(재시도방지)
	물론 파라미터를 바꿔서 잡만 통일하고 잡파라미터 변경을 통한 잡인스턴스를 새로생성했을경우엔 서로 각각 따로 성공횟수를 카운트함
		java -jar target/billing-job-0.0.1-SNAPSHOT.jar input.file=src/main/resources/billing-2023-01.csv
		java -jar target/billing-job-0.0.1-SNAPSHOT.jar input.file=src/main/resources/billing-2023-02.csv
	이때 select * from BATCH_JOB_INSTANCE;를 해보면 잡키가 다른걸 알수있음
	
	이런식으로 잡파라메터를 가진 잡을 테스트할떈
		JobParameters jobParameters = new JobParametersBuilder()
			.addString("input.file", "/some/input/file")
			.toJobParameters();	
	이런식으로 잡파라메터를 생성할수있음
	추가적으로 잡파라메터의 식별여부도 설정할수있음
		.addString("input.file", "/some/input/file",false)
	이렇게(생략하면 true가 기본값임)
	
	단 이경우에도 두번실행하면 두번째부터는 실패함
	그래서 JobRepositoryTestUtils를 사용해서 매 시도마다 db를 초기화하는식으로 해결할수있음
	
	
	배치를 테스트할땐,e2e테스트할수도있고 잡이나 스탭별로 테스트하는 2가지 방법이 있음
	두가지모두 테스트데이터를 설정하고,잡이나 스탭을 실행해야함
	이걸위해 스프링배치는 전체작업 또는 테스트의 개별단계를 시작하게 설계된 jobLauncherTestUtils를 제공함
	여기엔
		랜덤 잡파라미터 생성:랜덤한 잡파라메터를 생성해서 잡인스턴스를 랜덤하게생성해 테스트할수있고,
			이걸통해 여러테스트에서 동일한 잡인스턴스를 시도할때 테스트실패를 방지할수있음(유니크한 잡파라메터를 줌)
		e2e테스트:jobLauncherTestUtils.launchJob를 사용하면 프로덕션에서 잡실행하는거처럼 같은방식으로 잡을 실행할수있음
		개별스탭 실행:JobLauncherTestUtils.launchStep를 사용하면 잡을 실행할필요없이 스탭만 실행할수있음
	가 있음
	jobLauncherTestUtils을 사용하면,JobLauncher를 사용하지않아도됨(대체)
	이때 잡은 @SpringBootTest(classes={...})에 잡이 한개만 단일로 빈으로 있으면 그걸가져오고,여러개면 에러를냄
		@SpringBootTest(classes={BatchJpaTestConfiguration.class, TestBatchLegacyConfig.class})
	이렇게 현재 테스트할 잡만 저안에 넣으면됨
	랜덤 잡파라메터 생성도
			JobParameters jobParameters = this.jobLauncherTestUtils.getUniqueJobParametersBuilder()
			.addString("input.file", "/some/input/file")
			.toJobParameters();
	이렇게하면 해당 키값쌍은 고정하고,랜덤한 uuid같은걸 사용해서 각각 다른 잡파라메터를 생성할수있음
	(물론 이렇게하면 매번 안지워도 되긴하지만 테스트오염되니까 @BeforeEach로 매번지우는게좋음)
	
	스프링배치를 테스트할때,같은 잡 파라미터를 사용해서 2번이상 실행하면 에러가 나게됨,그래서 이걸 해결할수있는 방법은
		1.메모리디비를 사용,단 RDB랑 다른점이 있어서 좀 귀찮아지는경우가 있음
		2.@BeforeEach로  this.jobRepositoryTestUtils.removeJobExecutions();실행
	가 있음
	물론 rdb를 각 테스트마다 생성하거나(TestContainers)할수있지만,테스트가 많아지면 기하급수적으로 느려져서 추천되지않음
	그래서 잘 사용되는게 BeforeEach나 AfterEach로 매 테스트의 시작이나 끝에 데이터를 다지워버리는거
		@BeforeEach
		void setUp() {
			this.jobRepositoryTestUtils.removeJobExecutions();
		}	
	이런식
	
	추가적으로 스프링배치에서 제공하는거는
		ExecutionContextTestUtils:잡익스큐션이나 스텝익스큐션의 실행컨텍스트의 속성에 접근할수있는 정적메서드를 제공
		MetaDataInstanceFactory:잡인스턴스나 잡익스큐션같은 상위-하위가있는거의 메타데이터엔티티 생성에 유용
		@SpringBatchTest:이걸 달면 테스트에 사용할수있도록 JobLauncherTestUtils,JobRepositoryTestUtils을 빈으로 등록해줌
	등이 있음
	
	
	
3.잡과 스탭 구성
	일반적으론 잡에 메인로직이 들어가는게 아닌,단순히 스탭을 모아두기만 하고 실제 작업은 스탭에서 처리하는게 일반적임
	잡은 스탭실행과 예외처리정도만 담당함
	
	스탭은 배치작업의 독립적이고 순차적인 단계를 캡슐화하는 도메인객체임
	이건
		public interface Step {
		  String getName();
		  void execute(StepExecution stepExecution) throws JobInterruptedException;
		}	
	이렇게 구성됨,잡과 거의 비슷하지만 execute에서 예외를 허용한다는게 차이점임
	StepExecution에는 시작시간,종료시간,실행상태등 잡익스큐션과 비슷한 정보들이 들어있고,이건 스프링배치에 의해 레포지토리에 저장됨
	스탭이 현재단계에서 잡을 중지시켜야하면 JobInterruptedException를 던지면됨
	
	스탭도 이미 많은 구현체들이 있음
		TaskletStep:파일복사나 아카이브생성과 같은 간단한작업이나 파일,db테이블읽기와 같은 항목중심작업을 위해 설계됨
		PartitionedStep:파티션으로 구성된 입력데이터셋처리를 위해 설계됨
		FlowStep:스탭을 플로우로 논리적 그룹화하는데 유용
		JobStep:플로우스탭과 유사하지만 지정된 플로우단계에 대해 별도의 잡을 생성하고 실행함,잡 밑에 잡을 두는식으로 구성할떄 유용
	등이 있음,여기서 가장 기본적인건 TaskletStep임
	
	테스크릿스탭은 태스크릿의 개념을 기반으로 한 스탭인터페이스임
	태스크릿은 스텝이 호출될떄 수행할 작업의 단위를 나타냄
	여기서 태스크릿은
		@FunctionalInterface
		public interface Tasklet {

		  @Nullable
		  RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception;
		}	
	이런구조임
	이 execute는 비즈니스로직을 한번만 포함하게 설계되었음(반복문 속내용이라고보면됨)
	
	리턴타입인 RepeatStatus는 작업이 완료되었거나(RepeatStatus.FINISHED),작업이 완료되지않았음(RepeatStatus.CONTINUABLE)을 알림
	작업이 완료되지않은경우,해당 태스크릿을 다시 호출함
	
	태스크릿의 각 반복은 각기 다른 db트랜잭션내에서 실행됨,그래서 배치는 반복중에 수행된작업을 rdb에 하나하나저장하고,
	실패하면 중단한부분부터 스탭을 다시시작할수있음,그래서 태스크릿스탭은 PlatformTransactionManager가 필요함
	
	execute메서드는 스탭에 대한 이 태스크릿의 기여도(읽기,쓰기,기타방식으로 처리된 항목수)를 나타내는 StepContribution객체에 대한 참조와,
	태스크릿의 실행컨텍스트에 대한 세부정보를 제공하는 키값쌍의 bag인 ChunkContext에 대한 참조를 제공함
	
	execute메서드는 처리중 오류가 발생하면 예외를 던질수있고,이경우 스탭은 실패처리됨
	
	
	태스크릿의 종류로는
		ChunkOrientedTasklet:플랫파일이나 db테이블같은 항목지향데이터집합을 위해 설계됨
		SystemCommandTasklet:테스크릿내에서 os명령을 호출할수있음
	등이 있음
	
	
	우리가 잡을 직접 구현할일은 거의없고,우리가 구현해야할건 스탭임
	잡은
		SimpleJob:스탭을 순차적으로 실행
		FlowJob:조건부분기 및 병렬실행을 포함한 복잡한 스탭흐름에 사용됨
	이 두가지를 보통 많이 사용함
	
	심플잡은 잡을 일련의 스탭으로 구성하게 설계되어있음
	시퀸스가 다음 스탭을 시작하려면,전단계가 성공적으로 완료되어야함
	스탭이 실패하면 잡은 즉시 종료되고,이후스탭은 실행되지않음
	잡빌더를 사용해서 순차적인 스탭의 흐름을 만들수있음
		@Bean
		public Job myJob(JobRepository jobRepository, Step step1, Step step2) {
		  return new JobBuilder("job", jobRepository)
			.start(step1)
			.next(step2)
			.build();
		}	
	이런식으로 job을 리턴하는 빈에,잡레포지토리와 스탭을 di받아서 돌리면됨
	이떄 스탭1이 실패하면 스탭2는 실행되지않음
	스탭도 똑같이 스탭빌더를 사용해서 생성할수있음,스탭은 이름설정,잡레포지토리등 공통설정과,각 스탭에 따른 고유설정이 있음
	그래서 스탭빌더는 각 스탭유형에 따른 특정빌더(TaskletStepBuilder,PartitionedStepBuilder)등을 제공함
	그래도 StepBuilder를 사용해서 만드는식이라서 신경안써도됨
		@Bean
		public Step taskletStep(JobRepository jobRepository, 
								Tasklet tasklet, 
								PlatformTransactionManager transactionManager) {
		  return new StepBuilder("step1", jobRepository)
			.tasklet(tasklet, transactionManager)
			.build();
		}	
	이런식으로 만들면됨
	스탭빌더는 공통적으로 모든 스탭유형에서 스탭명과 잡레포지토리를 받고,각 유형에따른 값을 추가할수있음
	tasklet를 사용해서 스탭의 일부로 실행할 태스크릿과 트랜잭션매니저를 추가할수있음
	이렇게 tasklet를 사용하면 태스크릿스탭이 생성되는식임
	즉 태스크릿이 실제 작업할 로직이고,그걸 감싸는게 태스크릿스탭임
	그리고 빈으로
		@Bean
		public Step step1(JobRepository jobRepository,JdbcTransactionManager transactionManager){
			return new StepBuilder("filePreparation", jobRepository)
				.tasklet(new FilePreparationTasklet(), transactionManager)
				.build();
		}
	이렇게 등록해주면되는거(FilePreparationTasklet이 로직임)
	태스크릿스탭은 태스크릿의 각 반복에 대한 관리때문에 트랜잭션매니저가 꼭 필요하다는걸 기억해야함
	그리고나서 잡에서
		@Bean
		public Job job(JobRepository jobRepository,Step step1) {
			return new JobBuilder("BillingJob", jobRepository)
				.start(step1)
				.build();
		}
	이렇게 등록해서쓰면됨(스탭은 di로 들어오니)
	
	파티션스탭도 마찬가지임
	  return new StepBuilder("step1", jobRepository)
		.partitioner("worker", partitioner)
		.build();	
	이렇게 생성하면 파티션스탭이 생성됨
	
	BATCH_STEP_EXECUTION테이블에서 jobExecution테이블과 마찬가지로 메타데이터를 볼수있음(시작,종료,상태 등)
	그리고 실행컨텍스트도 볼수있는데,실행컨텍스트는 스탭실행에 대한 런타임 정보를 저장하기위한 키값쌍집합임
	컨텍스트엔 항목읽기횟수,쓰기횟수,기타메트릭등의 단계진행상황도 들어있고,이걸활용해 실패시 중단된지점에서 다시시작할수있음
	
	일반적으로 실패한 잡인스턴스를 다시시작할떄,성공한 스탭은 재시도되지않는데,만약 재시도가 필요할경우엔
		StepBuilder.allowStartIfComplete
	매개변수로 재시도를 하게할수있고,
		StepBuilder.startLimit
	로 최대재시작횟수도 설정할수있음
	
	
	배치테스트할땐 매개변수로
		./mvnw clean test -Dspring.batch.job.enabled=false
	-Dspring.batch.job.enabled=false를 넣어서 잡의 중복실행을 막아야함,아니면 스프링부트뜰때한번 테스트동작시 한번 두번실행되는데,
	저거넣으면 스프링부트시작시에 잡을 돌리지않음
	그리고 JobParametersValidator를 사용해서 해당 매개변수가 있는지같은걸 체크하고 분기탈수있음
	
	
	스프링배치에는 파일 읽고 쓰기,테이블 읽고 쓰기,구문분석 이런것들은 이미 다 들어있음
	스프링배치에서는 청크기반으로 데이터를 처리함
	청크는 일정크기의 배열로,텍스트파일의 1줄,db의 레코드 한줄을 일정갯수만큼 모아둔거
		public class Chunk<T> implements Iterable<T> {
		   private List<T> items;
		}	
	각 항목청크는 트랜잭션범위내에서 읽고쓰여짐,즉 청크단위로 트랜잭션이 성공하거나 실패함
	트랜잭션이 커밋되면 배치는 트랜잭션의 일부로 메타데이터저장소에 실행진행상황을 기록하고,실패시 해당정보를 사용하여 중단된지점부터 다시시작함
	청크를 처리하는중에 오류가 발생하면,트랜잭션이 롤백되고,실행상태가 업데이트되지않고 마지막성공시점부터 재시작됨
	
	청크에 포함할 항목의 수를 커밋간격이라고하고,이건 단일트랜잭션에서 처리해야하는 청크의 구성가능한 크기임
	
	db든 파일이든 일관적으로 사용할수있게 추상화하는걸 스프링은 좋아하는데,여기서 읽기담당은 ItemReader인터페이스임
		@FunctionalInterface
		public interface ItemReader<T> {
		   @Nullable
		   T read() throws Exception;
		}	
	이건 이렇게생겼고,read를 치면 단일데이터(1레코드)를 반환하고,스프링배치는 이걸 여러번호출해서 청크를 생성함
	당연히 이쪽특성상 제네릭을 사용함
	널에이블이 붙어있는이유는,비어있으면(데이터소스가 소진되면) 널을 반환하는거
	
	ItemReader의 구현은,FlatFileItemReader처럼 해당데이터소스에 맞는 아이템리더를 생성해서
		return new FlatFileItemReaderBuilder<BillingData>()
            .name("billingDataFileReader")
            .resource(new FileSystemResource("staging/billing-data.csv"))
            .delimited()
            .names("dataYear", "dataMonth", "accountId", "phoneNumber", "dataUsage", "callDuration", "smsCount")
            .targetType(BillingData.class)
            .build();
	사용하면됨
		여기서 BillingData는 해당 엔티티 혹은 도메인이고,
		name으로 해당 아이템리더 이름을 정하고,
		resource로 파일위치를 정한다음
		delimited로 구분자선언을 하고
		names로 각 순서별 필드명을 지정해주고
		targetType으로 생성할 엔티티클래스를 지정하고
		build하는식
	보통 이런식이고,특별한 요구사항이 없다면 보통은 있는거 가져다쓰는거로도 충분함
	FlatFileItemReader는 csv나 고정길이파일등을 다루기 좋음
	jdbc 아이템리더는
		@Bean
		public JdbcCursorItemReader<BillingData> billingDataTableReader(DataSource dataSource){
			String sql="select * from BILLING_DATA";
			return new JdbcCursorItemReaderBuilder<BillingData>()
				.name("billingDataTableReader")
				.dataSource(dataSource)
				.sql(sql)
				.rowMapper(new DataClassRowMapper<>(BillingData.class))
				.build();
		}
	이렇게 비슷함
	이때 rowMapper와 DataClassRowMapper를 사용해서 데이터베이스 레코드값을 도메인에 매핑할수있음(beanMapped와 하는일은 같음)
	
	쓰기는 ItemWriter을 사용함
		@FunctionalInterface
		public interface ItemWriter<T> {
		   void write(Chunk<? extends T> chunk) throws Exception;
		}	
	쓰기는 읽기와 달리 청크단위로 쓰는데,쓰기를 할떈 벌크식으로 던지는게 효율적일때가 많아서그럼
	이거도 인터페이스 ItemWriter를 구현하는 구현체들을 스프링배치에선 이미 만들어뒀음
	파일,db,메시지큐등 다 있음
	그리고 쓰기를 할떄 오류가 발생하면,인터페이스는 예외를 던질걸로 예상함
	이거도
		return new JdbcBatchItemWriterBuilder<BillingData>()
				.dataSource(dataSource)
				.sql(sql)
				.beanMapped()
				.build();	
	db쪽 라이트는 이렇게 데이터소스를 받아서 쿼리를 넣고 던지는식
	이때 쿼리는
		insert into BILLING_DATA values 
			(:dataYear, :dataMonth, :accountId, :phoneNumber, :dataUsage, :callDuration, :smsCount)
	이런식으로 :필드명 이렇게하면됨(도메인의 필드명과 일치시키면됨)
	그리고 beanMapped()는,리플렉션을 이용해서 db의 열과 같은이름을 가진 도메인의 필드값을 가져오기위해 get을 하라는거
	즉 도메인값을 값을 쿼리속의 값을 매핑하라는거임
	
	스프링배치에서 청크지향스탭은 ChunkOrientedTasklet임
	이건 항목판독기와 항목작성기를 사용하여 청크지향처리모델을 구현함
	이것도 StepBuilder를 사용해 생성되지만,태스크릿대신 청크메서드를 호출해야함
		return new StepBuilder("fileIngestion", jobRepository)
				.<BillingData, BillingData>chunk(100, transactionManager)
				.reader(billingDataFileReader)
				.writer(billingDataTableWriter)
				.build();	
	이때 청크의 100이 100줄을 읽겠다는거고	,
	그리고 
		<BillingData, BillingData>chunk
	이건 입력이 BillingData,출력이 BillingData라는뜻
	이건 입출력의 형식이 같지만,다르게할수도 있는데 그떄 여기서바꿔주면됨
	청크값은 100이 기본이고,여기서 조금씩 바꿔가면됨
	
	스탭은 리더와 라이터를 지정해서,해당클래스를 사용해서 읽고쓰기를 함
	즉 리더로 인풋을,라이터로 아웃풋을 하는게 일반적인거
	이때 리더와 라이터는 등록되어있는걸 di받아서(오토와이어링)사용하게됨
	
	
	입력과 출력은 이렇게하면되지만,보통은 입력을 받아서 데이터를 처리해서 출력으로 내보냄
	이떄 사용되는게 ItemProcessor임
	이건 리더가 반환한 항목을 처리한다음 다음작성자에게 넘겨주는,처리파이프라인의 중간단계라고 볼수있음
	이 인터페이스는
		@FunctionalInterface
		public interface ItemProcessor<I, O> {
		   @Nullable
		   O process(@NonNull I item) throws Exception;
		}
	이렇게 생겼고,I를 받아서 O를 내보내는식임(물론 같아도됨)
	이걸 사용할땐
		public class BillingDataProcessor implements ItemProcessor<BillingData, ReportingData> {
		   public ReportingData process(BillingData item) {
			   return new ReportingData(item);
		   }
		}	
	이런식으로 사용함
	데이터의 형식을 변환한다던지,형식은 같지만 엔티티안의 비워진값들을 채운다던지(보강),그냥 검증용도로도  사용할수있음
	여기서는 예외를 던질수있으니,데이터를 여기서 검증하고,문제없으면 그냥 그대로 데이터를 던지고,문제가 있으면 예외를 던지는식
	   public Person process(Person person) {
		  if (!this.emailService.isValid(person.getEmail()) {
			 throw new InvalidEmailException("Invalid email for " + person);
		  }
		  return person;
	   }	
	이렇게 검사를 하고,문제있으면 예외,없으면 받은값을 그대로 아래로 흘리면됨
	이거의 응용으로,필터링도 할수있음
	process메서드에서 null을 리턴하면,배치는 현재 항목을 필터링함(건너뜀)
	   public BillingData process(BillingData item) }
		  if (item.getMonthlySpending() < 150) {
			 return null; 
		  }
		  return item;
	   }	
	즉 null을 리턴하면 여기서 파이프라인이 끝나고,다음으로 가지않음(시퀸스의 필터생각하면됨)
	
	
	스프링에선
		@Value("${spring.cellular.spending.threshold:150}")
		private float spendingThreshold;
	이렇게 기본값을 설정할수있음
	
	아이템리더나 이런 스탭하위에서 잡파라메터를 받을수있음
	이떈 SpEL(스프링확장언어)를 사용해야함
	이건 @StepScope를 붙이고
		@Bean
		@StepScope
		public FlatFileItemReader<BillingData> reader(@Value("#{jobParameters['input.file']}") String inputFile) {
		   return new FlatFileItemReaderBuilder<BillingData>()
		   .resource(new FileSystemResource(inputFile))
			   // other properties
			   .build();
		}	
	이런식으로 메서드 파라메터에
		@Value("#{jobParameters['input.file']}")String inputFile
	이렇게 값어노테이션을 붙이면 저기에 자동으로 넣어줌(배치 실행시킬때 받은 잡파라미터)
	이떄 잡파라메터에 해당값이 없을경우,예외를 던짐
	그래서 항상 잡파라메터가 의도한데로 가는지 확인하고,JobParametersValidator를 사용해서 값을검증하는게 좋음
	
	테스트에선
	JobParameters jobParameters = new JobParametersBuilder()
        .addString("input.file", "input/billing-2023-01.csv")
        .addString("output.file", "staging/billing-report-2023-01.csv")
        .addJobParameter("data.year", 2023, Integer.class)
        .addJobParameter("data.month", 1, Integer.class)
        .toJobParameters();
	이렇게 추가하면됨
		addString("키값", "밸류")

4.오류내성이 있는 잡 만들기
	배치는 절대 단독으로 실행되지않고,데이터를 소비하고 데이터를 생성하고,외부 컴포넌트나 서비스와 상호작용함
	그래서 배치는 잘못된 입력데이터를 수신할수도,신뢰할수없는 서비스와 상호작용하는등의 다양한 결함에 노출될수있음
	그래서 배치는 견고하고 내결함성이 있는 방식으로 설계하고 구현되어야함
	
	기본적으로 배치는 실패한 잡인스턴스의 재시작을 허용하고,실패한부분부터 재시작함(영구 잡레포지토리에 기록하면)
	이떄 재시작은 스탭간 재시작과,내부스탭 재시작 두가지 수준에서 구현됨
	
	스탭간 재시작은,이전실행에서 성공한 스탭을 재시작하지않고 마지막으로 실패한 스탭부터 작업을 재개하는걸 말함
	즉 잡이 스탭1,스탭2가 있고 스탭1이 성공하고 스탭2가 실패하면,스탭2만 처리하는거
	
	내부스탭재시작은,스탭을 재시작할때,스탭의 처음부터 재시작하는게 아닌,스탭의 실패한 청크부터 재시작하는걸 말함
	즉 스탭간 재시작과 반대되는게 아닌,스탭간 재시작을 할때 스탭처리를 어떻게할거인지를 말하는거임
	
	이 재시작가능성은 스프링배치에서 자동으로 제공되는 기능이고,사용하려면 실패한 잡인스턴스를 다시 시작(같은잡과 같은 잡매개변수로 재실행)하기만 하면됨
	
	보통 특정스탭에서 예외가 발생하면 해당스탭과 그 스탭을 둘러싼 작업이 실패함
	이때 예외의 성격에 따라
		오류가 일시적인경우:작업을 재시작함,이때 작업이 중단된지점부터 다시시작되고 두번쨰는 성공할수도있고,일시적오류가 재발생할수도있음
		오류가 일시적이지않은경우:데이터를 잘못입력했다던가 같이 처리를 해줘야할경우엔 문제를 해결하고 재시작할지,
			스킵하고 나중에 분석,재처리를 할지 결정해야함
	두가지로 나뉨
	
	BATCH_STEP_EXECUTION테이블을 확인하는거로 어느스탭에서 어느데이터쯤에서 문제가 발생하는지를 알기쉬움
		select 
			step_execution_id, job_execution_id, step_name, status, 
			read_count, write_count, commit_count, rollback_count  
		from BATCH_STEP_EXECUTION;
	이거
	
	
	영구적오류(csv의 한 레코드의 형식이 틀렸다던가)는,여러번 시도해도 항상 실패하고 매번고쳐줘야함
	이런 오류를 매번 고칠수도있지만,체크만 해두고(특정테이블에 넣어두고) 스킵하고 다른거를 계속 진행할수도있음
	전체중에 애매하게 0.5퍼정도만 잘못됐는데,매번고치기엔 파일이 너무클때 이럴때 유용함
	이건 청크지향스탭에서만 사용할수있고,이기능은 청크지향처리모델에서의 적용된 모든 스탭,즉 항목을 읽거나 처리하거나 쓰는동안의 모든오류에서 적용됨
	이 기능을 활성화하려면 fault-tolerant(내결함성)단계를 정의해야함
	
	이걸 사용할떈 스탭빌더에서 faultToLerant()메서드를 호출하면됨
		return new StepBuilder("myStep", jobRepository)
			.<String, String>chunk(100, transactionManager)
			.reader(itemReader)
			.writer(itemWriter)
			.faultTolerant()
			.skip(FlatFileParseException.class)
			.skipLimit(5)
			.build();
	여기서 faultToLerant()를 붙여서 내결함성을 재정의하겠다는걸 표현하고,skip(예외명)으로 해당예외가 뜨면 스킵하겠다는걸 표시함
	그리고 스킵의 최대 갯수(skipLimit)도 넣어서 해당갯수만큼 스킵하면 실패하게할수도있음
	이건 넣어서 너무많이 실패하면 그냥 스탭을 실패하게 만드는게좋음
	
	이때 해당 레코드가 스킵되면,해당레코드는 단순히 청크에서 제외됨(null던지는거랑 같은취급)
	이때 스킵한 항목은 SkipListener를 사용하여 체크할수있음
	이건 건너뛴항목을 로깅하거나 어디 저장하는등을 처리할수있게하는 스프링배치가 제공하는 확장지점임
		public interface SkipListener<T, S> extends StepListener {
		   default void onSkipInRead(Throwable t) { }
		   default void onSkipInWrite(S item, Throwable t) { }
		   default void onSkipInProcess(T item, Throwable t) { }
		}
	이렇게 각각 메서드가 있고,이걸 구현해서 스탭을 만들때
		FaultTolerantStepBuilder.listener(SkipListener)
	를 사용해서 스탭에 등록할수있음
	구현체 빈으로 만들고 빈으로 넣어서 di받는식
	
	위의 스킵은 예외를 기반으로 하는 스킵인데,만약 예외를 기반으로 하지않는 스킵결정이 필요한경우엔 SkipPolicy를 사용할수있음
		@FunctionalInterface
		public interface SkipPolicy {
			boolean shouldSkip(Throwable t, long skipCount) throws SkipLimitExceededException;
		}
	이 메서드는 현재항목을 건너뛸지를 리턴하게 설계된 shouldSkip를 가지고있고,
	현재항목과 발생한 모든예외를 가져올수있는 Throwable을 받음
	이걸 구현하고나서
		FaultTolerantStepBuilder.skipPolicy(구현체)
	를 등록해서 스탭에 등록할수있음
	구현체 빈으로 만들고 빈으로 넣어서 di받는식


	외부통신이나 db잠금같이 일부오류는 일시적이라서,재시도하면 성공할수있는 오류들도 많음
	이걸 그냥 실패처리하고 수동으로 재시작하게하는거도 비효율적이라 자동 재시작을 할수있게도 할수있음
	이거도 청크지향단계,즉 processor와 writer에서만 사용할수있고,reader에서는 사용할수없음
	
	이거도 똑같이 faultToLerant를 켜고 retry를 넣고 최대횟수넣으면됨
		.faultTolerant()
		.retry(TransientException.class)
		.retryLimit(5)
	이때 예외를 선택할수도있음
	
	그리고 감사를위해 재시도루트에 들어가면 로그를 남기던가 할수있게 여기도 리스너를 넣을수있음
		public interface RetryListener {
		   default <T, E extends Throwable> void onSuccess(
				  RetryContext context,
				  RetryCallback<T, E> callback,
				  T result) {
		   }
		   default <T, E extends Throwable> void onError(
				  RetryContext context,
				  RetryCallback<T, E> callback,
			   Throwable throwable) {
		   }
		}
	이건 재시도루트에 들어갔을때 실패했을떄와 성공했을때를 나눠서 작업을 할수있음

	재시도도 똑같이 예외가 아닌상황을 처리할때를 위한 정책인터페이스도 있음
		public interface RetryPolicy extends Serializable {
		   boolean canRetry(RetryContext context);
		   void registerThrowable(RetryContext context, Throwable throwable);
		}
	이거도 이미 만들어진 구현체들도 꽤있음(MaxAttemptsRetryPolicy,CircuitBreakerRetryPolicy 등)
	




	
	
	