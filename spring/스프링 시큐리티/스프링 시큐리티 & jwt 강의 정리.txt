0.시큐리티기본
	시큐리티의존성을 추가하면
		뷰:모든 페이지를 접근하려면 로그인페이지가 뜸
		restapi:쿼리에 아이디패스워드추가하지않으면 401
		토큰:토큰추가하지않으면 401
	가 자동으로 됨
	이떄 아이디기본값은 user고 패스워드는 실행터미널창에 표시됨
	
	시큐리티를 추가해서 세팅해야할건
		1.resources/application.yml or application.properties 에 설정추가(포트,서버설정,db,jpa)
		2.@EnableWebSecurity와 @Configuration을 붙인 필터체인 생성(밑에있는거)
	를 우선적으로 해야함
	
	스프링 시큐리티 필터를 스프링필터체인에 등록할땐
		@Configuration
		@EnableWebSecurity
		class SecurityConfig {
			@Bean
			fun filterChain(http:HttpSecurity):SecurityFilterChain{
				http.csrf(CsrfConfigurer<HttpSecurity>::disable)
				http.authorizeHttpRequests{
					it.requestMatchers("/user/**").authenticated()
					it.requestMatchers("/manager/**").hasAnyRole("MANAGER","ADMIN")
					it.requestMatchers("/admin/**").hasRole("ADMIN")
					it.anyRequest().permitAll()
				}
				http.formLogin{
					it.loginPage("/loginForm")  //해당폼에서 form으로 값입력받아서 loginProcessingUrl호출
					it.loginProcessingUrl("/login")// post로 '/login'이 호출되면 시큐리티가 인터셉트해서 대신 로그인해줌
					//it.permitAll()
					it.defaultSuccessUrl("/")
				}
				return http.build()
			}
		}
	등록,즉 시큐리티를 쓸거면 이걸 최소 하나는 만들어둬야 기본값에서 벗어날수있음
	WebSecurityConfigurerAdapter는 삭제됐으니 관련꺼있으면 SecurityFilterChain을 리턴하는 빈을 등록하는식으로 사용해야함
	메서드체이닝 직렬로하는거 보기싫다고 다 람다식쓰는형태로 변경됐고
		authorizeRequests->authorizeHttpRequests
		antMatcher->requestMatchers
		and().formLogin()->http.formLogin{...}
	으로 변경됨
	
	그리고 SecurityConfig파일을 생성하고나면(@EnableWebSecurity) 기본 로그인페이지가 작동하지않음(폼로그인시)
	이건 스프링특유의 수동설정위주가 아닌,아예 해당페이지가 사라짐
	
	회원가입을 할떈 비밀번호를 암호화해야함
	
	loginProcessingUrl("/login")를 사용해서 로그인성공하면 시큐리티가 가지고있는 세션에 넣음(시큐리티 컨텍스트홀더)
	이때 Authentication객체여야만 저기 넣을수있음
	이안에는 User의 정보가 있어야하는데,이건 또 UserDetails타입객체에 넣어야함
	그래서 UserDetails타입객체에서 합성으로 내가 만든 엔티티를 넣어야하는데,
	그걸 하기위한 클래스를 생성해야함(PrincipalDetails 이런걸 만들어서 UserDetails를 상속받고 생성자로 User엔티티를 받으면됨)
		class PrincipalDetails(val user:User):UserDetails {...}
	그리고나서 인터페이스 메서드를 재정의하면되는데,
	getAuthorities():해당 User의 권한을 리턴
		override fun getAuthorities(): MutableCollection<out GrantedAuthority> {
			val collect = ArrayList<GrantedAuthority>()
			collect.add(GrantedAuthority { return@GrantedAuthority user.role })
			return collect
		}
	여기서 권한을 리턴이니까 user.role를 리턴해야하는데,이걸 GrantedAuthority로 싸줘야함
	GrantedAuthority클래스 안에는 getAuthority()추상메서드 딱 하나가 있는데,
	클래스에 추상메서드가 하나니까 sam인터페이스고,이경우엔 코틀린에서 람다를 쓰면 저거 구현에 해당 람다를 넣음(@Override안써도됨)
	즉 저 람다는 getAuthority()를 구현한거
	그렇게 넣어주고 리턴하면됨
	나머지는	
		getPassword():패스워드리턴
			override fun getPassword(): String {
				return user.password
			}
		getUsername():아이디리턴
			override fun getUsername(): String {
				return user.username
			}	
		isAccountNonExpired():계정 만료됐는지 확인,tf로 리턴하면됨,따로 뭐 없으면 true리턴
		isAccountNonLocked():계정 락(밴)됐는지 확인,따로 뭐 없으면 true리턴
		isCredentialsNonExpired():비밀번호가 지정시간이상 지났는지 확인,따로 뭐없으면 true리턴
		isEnabled():휴면계정인지 확인,따로 뭐없으면 true리턴(이거구현하려면 마지막로그인시간을 User엔티티에 넣어두고 꺼내서확인하면됨)
	이렇게 있고
	
	이걸 만들고 나면 UserDetailsService인터페이스를 상속받은 서비스를 만들어야함
	이건 안에 메서드가 하나있음(loadUserByUsername(username: String?): UserDetails)
	이건 시큐리티설정에서 loginProcessingUrl의 url을 호출하면 자동으로 이 서비스의 메서드를 실행해서,
	해당값을 넣어서 UserDetails를 생성함
	여기서 username은 html form에서 만든 필드명과 통일시켜야함
		<input type="text" name="username" placeholder="Username"/><br/>
	여기서 이름이 name="username2"이러면 안받아짐(시큐리티컨피그에서 it.usernameParameter("username2")이렇게 바꿀수있긴함)
	이거 구현은
		@Service
		class PrincipalDetailsService(val userRepository: UserRepository):UserDetailsService {
			override fun loadUserByUsername(username: String?): UserDetails {
				if (username == null){
					throw IllegalArgumentException("잘못된 username 입력")
				}
				val userEntity =
					userRepository.findByUsername(username)?:throw UsernameNotFoundException("존재하지 않는 username 입니다.")
				return PrincipalDetails(userEntity)
			}
		}
	이렇게 하면됨
	찾으면 해당 유저엔티티를 UserDetails를 구현한 PrincipalDetails(이름은 알아서붙이면됨)로 감싸서 던져주면되고,
	못찾으면 UsernameNotFoundException를 던져주면됨
	이렇게 UserDetailsService로 UserDetails를 던지면 이게 Authentication안에 들어가게됨(컴포지션)
	이 Authentication는 시큐리티 세션안에 들어가게됨
	
	
	이렇게 회원가입은 그냥 jpa레포지토리로 save하는걸 직접 구현하면되고(이때 bCryptPasswordEncoder를 사용해서 비번 암호화하는거만 신경쓰면됨)
	로그인은 
		1.it.loginProcessingUrl("/로그인url")로 시큐리티에 맡긴다고 선언하고,
		2.UserDetails를 상속(구현)한 클래스를 하나 생성하고 매개변수로 엔티티를 받음(di가 아니라 직접받을거)
			2-1.getAuthorities는 user엔티티의 권한필드를
						val collect = ArrayList<GrantedAuthority>()
						collect.add(GrantedAuthority { return@GrantedAuthority user.role })
						return collect
					이렇게 던지면되고
			2-2.나머지 메서드들도 구현하고,is가 붙은 메서드들은 사용할거면 구현하고,사용안할거면 true리턴
		3.UserDetailsService를 상속(구현)한 클래스를 하나 생성하고
		4.loadUserByUsername를 구현하고
			username를 받아서 jpa레포지토리로 검색해서 
			있으면 PrincipalDetails(user) 리턴 //PrincipalDetails는 2번에서 UserDetails을 구현한 클래스
			없으면 UsernameNotFoundException 던지기
	이런 순서대로 진행됨
	
	이렇게 로그인을 한 상태로 권한이 없는 페이지에 접근하면 403이 뜸(로그인요청이 뜨지않음)
	권한은 SecurityConfig에서
		 it.requestMatchers("/manager/**").hasAnyRole("MANAGER","ADMIN")
	이렇게 url단위로(와일드카드 사용가능)할수도있고(이때 "ROLE_MANAGER"이렇게 ROLE_를 붙이면 예외뜸,자동으로 붙여서 붙이지마라고 예외치는듯)
	메서드단위로 할수도있음
	이건 SecurityConfig에 @EnableMethodSecurity(securedEnabled = true)를 붙이고,메서드에
		@GetMapping("/info")
		@Secured("ROLE_ADMIN")
		fun abc(){...}
	이렇게 하면 메서드에 권한을 걸수있음,이때는 ROLE_를 붙여야하는거에 주의
	
	그리고 @EnableMethodSecurity(securedEnabled = true, prePostEnabled = true)이렇게하면,
	@PreAuthorize와 @PostAuthorize를 사용할수있음
		@PreAuthorize는 메서드가 실행되기전에 실행돼서 메서드 실행전에 빠꾸놓을수있고
		@PostAuthorize는 메서드가 끝날때 실행돼서,메서드의 리턴값을 검사할수있음
	@PreAuthorize는
		@PreAuthorize("hasRole('ROLE_MANAGER') or hasRole('ROLE_ADMIN')")
	이렇게 코드를 스트링에 넣는식으로 사용하는데,이건 권한을 여러개 요구할때 사용함(하나만쓸거면 Secured쓰면됨)
	@PostAuthorize는
		@PostAuthorize("returnObject.body.owner == authentication.name")
	이렇게 response를 검사하는식으로 사용해서 값이 이상하면 리턴을 안하고 예외터트리는식으로 사용할수있음(잘안씀)
	
	메서드단위 권한요청은 섬세하게 하기좋고,url단위는 아직 안만든곳에도 와일드카드로 붙일수있기때문에 넓게쓰기좋음
	메서드가 뭐 안건드려도돼서 간단하게 쓰긴좋음
	
	
1.스프링 시큐리티 OAuth2.0
	구글로그인추가는 
		google api에서 프로젝트를 생성하고 
		OAuth 동의를 하고(외부 체크)
		앱이름넣고 이메일넣고 다음다음다음 클릭 //이떄 테스트사용자에서 현재 사용할 계정의 메일을 넣어두는게좋음
		사용자인증정보가서 OAuth클라이언트 id만들기
			앱유형 웹어플리케이션 선택
			승인된 리다이렉션 url에 로그인url추가
				ex)http://localhost:8080/login/oauth2/code/google //로컬테스트용
		생성후 클라id와 클라비번 저장
	승인된 리다이렉션url은,인증완료후에 코드를 돌려줄 url이름
	이 코드를 받아서 액세스토큰을 구글에 요청하면됨
	그리고 authclient라는 라이브러리를 사용하게되면 저 주소 그대로쓰면됨(직접구현할거면 바꿔도되는데 보통 라이브러리쓰니)바꿀수없음
	즉
		http://내주소:포트번호/login/oauth2/code/google
	이런식으로 도메인을 제외한 패스는 라이브러리에서 고정으로 가져가서 사용함
	그래서 컨트롤러에 해당 주소를 매핑할필요없이 라이브러리에서 알아서 만듬
	
	프로젝트에는 oauth2 client가 들어있어야함(start.spring.io에 있음)
	그냥 디펜던시 추가는
		implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	추가하면됨
	그리고
		spring:
		  security:
			oauth2:
			  client:
				registration:
				  google:
					client-id: 클라id
					client-secret: 클라패스워드
					redirect-uri: http://localhost:8080/login/oauth2/code/google #구글 승인된 리다이렉션url에 넣은거
					scope: //받아올 정보들
					  - email
					  - profile
	이걸 application.yml에 추가하면됨
	이때 https설정안됐으면 에러나니까 https설정하고,테스트라서 인증서없으면 http사용
	
	그리고 로그인폼에 a태그를 달고
		<a href="/oauth2/authorization/google">구글로그인</a>
	추가하면됨,저 주소도 고정임(oauth2-client가 사용)
	그리고나서 시큐리티컨피그에서 oauth설정을 켜주면됨
	    http.oauth2Login {
            it.loginPage("/loginForm")
			it.userInfoEndpoint{
                it.userService(principalOauth2UserService) //밑에거 추가한뒤 di받으면됨
            }
        }
	이러면 일단 로그인은 할수있음
	여기서 기본적인 oauth2.0로직순서는
		1.코드받기(인증완료)
		2.엑세스토큰(권한)
		3.토큰에있는 권한으로 프로필정보접근
		4.정보를 토대로 회원가입 자동진행(이메일,전화번호,이름,아이디)
	이라는 로직으로 진행해야하는데,회원가입은 직접시켜야함
	저기에 있는 정보가 모자라면,해당정보를 입력하고 추가로 입력을 더받을수도있음(회원가입창)
	
	근데 oauth2-client가 코드를 받아서 토큰을 요청해서 토큰을 받아서 가져오는거까지 자동으로해줌(userRequest)
	그리고 프로필정보접근 로직은 이미 만들어져있고(super.loadUser(userRequest)) 이거사용하면됨
	그래서 회원가입코드만 짜면되는거임
	그리고나서
		@Service
		class PrincipalOauth2UserService: DefaultOAuth2UserService() {
		    override fun loadUser(userRequest: OAuth2UserRequest?): OAuth2User {

				return super.loadUser(userRequest)
			}
		}
	를 추가
	여기서 loadUser메서드가,인증을 완료한 뒤에 토큰을 받고난뒤에 호출되는 메서드임
	그래서 여기의 userRequest를 사용해서 회원가입을 여기서하면됨(이게 )
	여기서 정보는
		super.loadUser(userRequest).attributes
	안에 들어있음
	각 항목은
		sub:구글id의 프라이머리키
		name:이름
		picture:프로필사진
		email:이메일
		email_verified:이메일이 휴면인지 아닌지,정상이면 true
		locale:국가
	임
	여기서 
		sub를 아이디로 쓰고(앞에 google_sub명 이런식으로 플랫폼별 이름을 붙이면 중복안됨)
		패스워드는 아무거나 사용(널만아니면됨,어짜피 패스워드쓸일이 없기때문)
		이메일은 저이메일 그대로 사용
		provider에 현재 oauth플랫폼을 넣고 //유저엔티티의 필드
		providerId에 sub를 그대로 넣음 //변형없이,앞에 google_안붙임
	이렇게 회원가입을 진행시키면됨(권한은 기본으로 넣으면됨)
	이거 말고 받을수있는 정보들은
		userRequest?.clientRegistration:registrationId로 어떤 oauth로 로그인했는지 확인가능
		userRequest?.accessToken?.tokenValue:토큰을 받아볼수있음
	들이 있음
	
	그리고 이렇게 인증이 된 상태에서는,컨트롤러에서 Authentication를 받으면 자동으로 그안에 현재 인증된유저의 정보가 들어가게됨(di해줌)
	그걸 UserDetails를 상속받는 클래스로 형변환해주면 현재 유저정보를 받아볼수있음(오브젝트라서 다운캐스팅하는거)
		@GetMapping("/test/login")
		fun loginTest(authentication:Authentication):String{
			val principalDetails:PrincipalDetails=authentication.principal as PrincipalDetails
			println("authentication = ${principalDetails.user}")
			return "세션정보확인"
		}	
	귀찮으면
	    fun loginTest(@AuthenticationPrincipal principalDetails: PrincipalDetails ):String{
			println("userDetails = ${userDetails.user}")
		}
	이렇게 어노테이션으로 받아다쓸수도있음
	
	근데 oauth로그인을 하면 값을 받을수가 없는데,이건 authentication의 UserDetails로의 캐스팅이 실패했기때문
	OAuth는
		@GetMapping("/test/oauth/login")
		@ResponseBody
		fun loginOauthTest(authentication:Authentication):String{			
			val oAuth2User:OAuth2User=authentication.principal as OAuth2User
			println("authentication = ${oAuth2User.attributes}")
			return "oauth세션정보확인"
		}
	이렇게 OAuth2User를 사용해야함
	이거도 어노테이션쓸수있는데
		@GetMapping("/test/oauth/login")
		@ResponseBody
		fun loginOauthTest(@AuthenticationPrincipal oAuth: OAuth2User):String{
			println("authentication = ${oAuth.attributes}")
			return "oauth세션정보확인"
		}
	이렇게 어노테이션은 @AuthenticationPrincipal로 같은데 클래스가 다름(OAuth2User)
	
	즉 Authentication는 UserDetails형태일수도(일반로그인),oAuth2User형태일수도(oauth2로그인)있음
	이건 UserDetails는 userDetailsService.loadUserByUsername()를 거쳐서 들어오고,
	oAuth2User는 DefaultOAuth2UserService.loadUser()를 거쳐서 들어와서 이렇게되는거임
	
	이건 왜이러냐면,세션안에는 스프링시큐리티가 관리하는 시큐리티세션영역이 있는데,
	이안에는 Authentication타입만 들어갈수있음(이걸 컨트롤러나 서비스에서 di받아서 쓸수있는거 위에서처럼)
	
	이렇게 두개로 나뉘니까 엄청 귀찮아짐,그래서 두개를 둘다 상속(구현)받은 클래스를 사용하면되는데(어짜피 둘다 인터페이스니까),
	그냥 PrincipalDetails에 OAuth2User를 추가로 상속받아서 구현하면됨
	이러면 두개를 뭉쳐서 유저엔티티를 가져와서 사용할수있음
	
	이러면 OAuth2User 메서드도 구현을 해줘야하는데 getAttributes는 OAuth2에서 받은 프로필정보를 리턴해주는 메서드임	
		class PrincipalDetails(val user:User):UserDetails,OAuth2User {
			private var attributes=mutableMapOf<String,Any>()
			constructor(user:User,attributes:MutableMap<String,Any>) : this(user) {
				this.attributes=attributes
			}
			override fun getName(): String {
				return "" //이건 어짜피 안쓰는메서드라 공백이나 아무거나보내면됨
			}

			override fun getAttributes(): MutableMap<String, Any> {
				return attributes
			}
			...
	이런식으로 생성자를 하나 더만들어서,하나만 들어오는거는 주생성자(UserDetails),두개가 들어오는거는 부생성자(oAuth2User)로 만드는거임
	그리고 받아온거를 getAttributes로 던져버리면됨
	그리고나서 DefaultOAuth2UserService를 구현한데 가서(PrincipalOauth2UserService)
	loadUser에서 user과 attributes를 PrincipalDetails에 넣어서 리턴하면되는거임
	즉
		id와 기타 정보들을 받아와서
		해당 id로 회원가입이 됐는지를 확인하고,
		없으면 회원가입하고 해당개체 리턴
		있으면 해당개체 리턴
	이런순서임
		@Service
		class PrincipalOauth2UserService(val bCryptPasswordEncoder: BCryptPasswordEncoder,
			val userRepository: UserRepository): DefaultOAuth2UserService() {
			override fun loadUser(userRequest: OAuth2UserRequest?): OAuth2User {
				val oAuth2User = super.loadUser(userRequest)//유저리퀘스트를 프로필정보객체(OAuth2User)로 변환
				val provider = userRequest?.clientRegistration?.registrationId?: //여기부터
					throw IllegalArgumentException("프로바이더 널 오류")
				val providerId = oAuth2User.getAttribute<String>("sub")?:
					throw IllegalArgumentException("프로바이더ID 널 오류")
				val username="""${provider}_google"""
				val password=bCryptPasswordEncoder.encode("qwer")
				val email = oAuth2User.getAttribute<String>("email")?:
					throw IllegalArgumentException("이메일 널 오류")//이건 기본값넣어도될듯
				val role = "ROLE_USER"									//여기까지 프로필데이터 파싱
				var userEntity = userRepository.findByUsername(username)//회원인지 아닌지 확인
				if (userEntity==null){									//회원이아니면 회원가입
					userEntity=User(username,password,email,role,provider,providerId)
					userRepository.save(userEntity)
				}

				return PrincipalDetails(userEntity,oAuth2User.attributes)//유저엔티티와 프로필정보 리턴
			}
		}
	이러면 일반로그인이든 소셜로그인이든 둘다 같은 클래스객체에 같은 엔티티객체를 가지게되니까,이 엔티티객체만 사용하면되는거임
	
	참고로 이때 순환참조오류뜨면 bCryptPasswordEncoder빈등록이 시큐리티컨피그에 있어서그런거니까 외부로빼주면됨
	
	이때 컨트롤러에서 어노테이션이나 직접 di받는거가 동작을 하는 이유는
		서블릿 필터단에서 시큐리티 시작
		현재 url이 post로 loginProcessingUrl에 표시된 url이거나(일반로그인),
			get으로/oauth2/authorization/google일경우(소셜로그인)//이건 url 각 플랫폼별로 고정임
		UserDetailsService or DefaultOAuth2UserService발동
		두 서비스 모두 자기가 작동하고나면 post로 @AuthenticationPrincipal에 값을 집어넣어둠(시큐리티세션에 값 저장)
		기타시큐리티동작
		시큐리티끝
		디스패쳐서블릿 작동
		컨트롤러작동
		컨트롤러메서드에서 @AuthenticationPrincipal의 값을 가져와서 매개변수에 넣음
		컨트롤러메서드 동작 후 종료
	이런순서임,즉 스프링이전에 동작해서,정해진장소(시큐리티세션)에 이미 던져놨고 스프링은 그냥 그거가져다쓰는거임
	우리가 굳이 DefaultOAuth2UserService나 UserDetailsService를 만들지않아도 기본적으로 빈이 만들어져있음(각자 자기타입을 리턴하는)
	이걸 대체해서 우리가 만든빈을 끼워넣는거
	대체하는이유는,그냥 소셜로그인과 일반로그인을 통합해서,
	즉 UserDetails와 OAuth2User를 둘다 구현한 PrincipalDetails로 리턴타입을 맞추기위해서 직접 구현하는거임
	이래야 쓰기편해지니까(추가로 자동회원가입이나 로깅같은 로직넣으려고 하는거도있음)
	
	
	페이스북 로그인 추가는 그냥 강의만보자
	회원가입을 안시켜주는데 어떻게해
	
	application.yml에 registration: 밑에(구글이랑 같은라인에)
	        
	  facebook:
		client-id: id값
		client-secret: 패스워드
		redirect-uri: http://localhost:8080/login/oauth2/code/facebook
		scope:
		  - email
		  - public_profile
	추가하고,DefaultOAuth2UserService를 상속한 클래스에서 각 플랫폼에 맞게 getAttribute를 하는걸 수정해야함
	구글에선 id가 sub였는데,페이스북은 id(getAttribute("id"))임
	이렇게 다 달라서 불편하니까,인터페이스를 만들고,
		interface OAuth2UserInfo {
			fun getProviderId()
			fun getProvider()
			fun getEmail()
			fun getName()
		}
	각 플랫폼별로 구현체를 만들어서,의존성역전을 시키면됨
	구글
		class GoogleUserInfo(val attributes: Map<String,Any>):OAuth2UserInfo {
			override fun getProviderId():String {
				return attributes["sub"] as String
			}
			override fun getProvider():String {
				return "google"
			}
			override fun getEmail():String {
				return attributes["email"] as String
			}
			override fun getName():String {
				return attributes["name"] as String
			}
		}
	페북
		class FacebookUserInfo(val attributes: Map<String,Any>):OAuth2UserInfo {
			override fun getProviderId():String {
				return attributes["id"] as String
			}

			override fun getProvider():String {
				return "facebook"
			}

			override fun getEmail():String {
				return attributes["email"] as String
			}

			override fun getName():String {
				return attributes["name"] as String
			}
		}
	이런식임
	그리고 DefaultOAuth2UserService를 상속받은곳의 loadUser메서드에서
	    override fun loadUser(userRequest: OAuth2UserRequest?): OAuth2User {
			if (userRequest==null){
				throw IllegalArgumentException()
			}
			val oAuth2User = super.loadUser(userRequest)
			var oAuth2UserInfo:OAuth2UserInfo
			if (userRequest.clientRegistration.registrationId=="google"){ //각 프로바이더별로 분기타서 구현체생성
				println("구글요청")
				oAuth2UserInfo=GoogleUserInfo(oAuth2User.attributes)
			}else if(userRequest.clientRegistration.registrationId=="facebook"){
				println("페북요청")
				oAuth2UserInfo=FacebookUserInfo(oAuth2User.attributes)
			}else{
				throw IllegalArgumentException()
			}


			val provider = oAuth2UserInfo.getProvider()
			val providerId = oAuth2UserInfo.getProviderId()
			val username="""${provider}_${providerId}"""
			val password=bCryptPasswordEncoder.encode("qwer")
			val email = oAuth2UserInfo.getEmail()
			val role = "ROLE_USER"
			var userEntity = userRepository.findByUsername(username)
			if (userEntity==null){
				userEntity=User(username,password,email,role,provider,providerId)
				userRepository.save(userEntity)
			}

			return PrincipalDetails(userEntity,oAuth2User.attributes)
		}
	이런식으로 인터페이스를 믿고 생성하면됨
	
	네이버 로그인은,OAuth2Client가 기본적으로는 제공하지않기때문에(구글,페북,트위터등만 기본제공자임)
	직접 추가해서써야함
	이거도 똑같이
		naver:
		  client-id:
		  client-secret:
		  client-name: Naver
          authorization-grant-type: authorization_code
		  redirect-uri: http://localhost:8080/login/oauth2/code/naver
		  scope:
			- name
			- email
	추가해주고,여기서 authorization-grant-type는,방식이 코드방식인지 토큰방식인지 등을 선택하는식임
	authorization_code는 코드를 받아서 액세스토큰으로 교환하는방식
	redirect-uri는 끝나고 콜백을 받는주소임(그냥 고정으로 저거쓰면됨,마지막만 교체해가면서 쓰면됨 naver,kakao)
	
	그리고 프로바이더정보가 없기때문에 이거도 등록해줘야함
	  security:
		oauth2:
		  client:
	밑에,즉 registration:과 같은라인에
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize  #요청주소,로그인창이 뜨는곳
            token-uri: https://nid.naver.com/oauth2.0/token    #코드를 주고 토큰을 받는곳
            user-info-uri: https://openapi.naver.com/v1/nid/me #토큰을 사용해서 유저정보를 받는곳
            user-name-attribute: response                 #json안에 데이터들을 담아둔 키이름
	이걸 추가,보통 이런건 도큐먼트에서 소셜로그인보면있음
	
	네이버 개발자센터가서 앱등록하고 
		서비스url에 http://localhost:8080 //도메인
		콜백url에 http://localhost:8080/login/oauth2/code/naver		
	코드받고 클라id패스워드 application.yml에 적고 프로바이더도 다 채워줬으면,
	로그인폼에서
		<a href="/oauth2/authorization/naver">네이버 로그인</a>
	이렇게 /oauth2/authorization/프로바이더명 을 호출하면,즉
		1./oauth2/authorization/프로바이더명 을 호출
		2.시큐리티가 프로바이더의 해당 프로바이더명의 authorization-uri를 호출
		3.그리고 그안에서 로그인이 끝나면,
		4.자동으로 코드를 받아서 토큰uri로 코드를 보내서 토큰을 받고,
		5.토큰으로 user-info-uri로 보내서 유저프로필정보를 받아서
		6.oauth2User.attributes안에 받은 프로필정보json의 user-name-attribute에 있는 키값을 찾아서 때려박음
	즉 로그인이 끝난뒤로는 다 시큐리티가 자동진행하는거임
	
	이제 DefaultOAuth2UserService를 구현한 구현체의 loadUser에서
	        }else if(userRequest.clientRegistration.registrationId=="naver"){
				oAuth2UserInfo=NaverUserInfo(oAuth2User.attributes.get("response") as Map<String, Any>)
			}
	를 추가해주면됨,네이버는 response안에 데이터들이 다 들어있기때문에(2중구조),한번 더 벗겨서줘야함
		response={
			resultcode=00,
			message=success,
			response={id=172314,email:이메일값,name=이름}
		}
	즉 user-name-attribute는 첫번째의 response를 찾아주지만,내부에 뭐가들어있는진 알아서 해야하는데,
	네이버는 그안에서 데이터부분을 이중래핑해둬서 한번더벗겨야하는거임
	벗겨서줄거니까 NaverUserInfo는 그대로만들면되고
	
	이때 attributes.get("response")의 리턴타입이 any라서,
	Unchecked cast경고가 뜰텐데(any를 map으로 캐스트하는데 캐스트될지 보장할수없다) 
	@Suppress("UNCHECKED_CAST")위에붙여서 없앨수있음(이건 어짜피 api쪽에서 주는게 확정되었기떄문에 없애도됨)
	
	
	
	
2.스프링 시큐리티 웹 보안 이해
	jwt는 json web token의 약자임
	즉 json으로 구성된 토큰임
	
	이건 http의 헤더에 쿠키를 만들어서 그안에 세션id을 담아서 보내는데,이건 대상이 가진 권한의 id값같은거임,
	타임아웃이 있고 휘발성(로그아웃하면 삭제됨)이 있는,현재 활성화된 권한집합이라고 보면됨,user의 권한을 가지고 찍어낸 대상이라고 봐도됨
	이건 로그인을 하게되면 모든일에 자동으로 담아서 던지게되는데,
	만약 이걸 브라우저가 헤더에 이걸 담아서 던지지않으면 로그인을 하지 않은거고,그러면 로그인을 하게 유도하면되고
	세션id를 넣어서 던졌는데 틀렸거나 권한이 없으면 해당 http에러코드(403,410)를 던져주면됨
	세션id는 그냥 보안키같은거라고 생각해도됨
	그리고 서버는 세션id를 포함한 권한집합 테이블을 가져야하고,거기서 세션id를 검색해서 권한을 받아서 auth를 하는거임
	여기서 세션id가 없으면 만료 혹은 위조로 판단을 하고,권한이 없으면 403을 던지는거임
	
	이 세션은 세가지상황에서 사라짐
		브라우저의 종료(브라우저끄면 사라짐)
		서버의 삭제(서버재부팅이나 그런이유)
		세션의 만료(만료시간을 지나면 사라짐,기본값 30분)
	이 세션은 지속시간이라는 단점과(장기로그인불가),세션저장소를 서버쪽에서 유지해야한다는 단점이 있음 
	그래서 
		스테이트리스 불가(db로 뺄순있음 mvc입장에선),
		세션 저장소 용량문제,
		세션db의 로드밸런싱 문제(세션db도 스케일아웃하면되긴함 리드라이트나눠서)
		세션db의 io로 인한 속도문제(보조기억장치에 접근해야하니,레디스쓰면 해결가능하긴함)
	등이 생기게됨

	jwt를 사용하면 이 세션을 사용하지않게되면서(공개키비밀키방식),이런 단점들이 해결이됨

	
	웹에는 osi 7계층이 있음
	백엔드입장에선 상위4단계인 (어플리케이션,프레젠테이션,세션,트랜스포트)까지만 신경쓰면됨
	뭐 다본거니까 대충하자
	보통
		응용계층:실제 프로그램이 데이터를 던짐(시작점)
		프레젠테이션:암호화,압축등 데이터전처리
		세션:인증체크(보낼수있는지없는지,인증체크하는 계층,핑을 날려서 해당주소에서 반환하는지등을 체크하는식임)
		트랜스포트:tcp일지 udp일지를 선택함
	하위층은
		네트워크:ip담당
		데이터링크:맥주소담당
		피지컬:통신담당
	여기서 서로간에 통신을할떄,같은 계층까지 전달되면(어플리케이션-어플리케이션) 이걸 대칭이라고 함
	
	
	cia는 기밀성 무결성 가용성이라는 통신보안에 필요한것들임
		기밀성은 보안이 노출이 되면 안된다는것,즉 중간에서 훔쳐볼수있으면 안됨(암호화필요)
		무결성은 중간에서 탈취를 해서 위조해서,즉 변조를 막을수없으면 안됨(암호화필요)
		가용성은 받는대상이 그걸 해독할수있어야함
	그래서 사용되는게 공개키비밀키방식(rsa)임,이걸통해 키를 암호화해서 보내서 대칭키를 사용하는방식을 사용함
	이떄 비밀키로 잠그면 공개키로만 해제할수있고,공개키로 잠그면 비밀키로만 해제할수있음,
	즉 비밀키를 가지고 있는쪽이 보냈다는것과,내가 보내는걸 비밀키만 해독할수있다는게 보장됨
	그래서 클라이언트가 서버쪽으로 공개키로 대칭키를 암호화해서 보내면,중간에서 가로챌수없게 서로 키를 보유하고있어진다는게 보장됨(암호화비용도 낮아지고)
	
	즉 공개키로 잠그는건 암호화로 사용되고,비밀키로 잠그는건 인증(전자서명)으로 사용됨

	rfc문서는 웹의 규칙(프로토콜)에 대해 정의해둔 문서임
	이건 http의 프로토콜을 정의함


3.스프링 시큐리티 jwt서버 구축
	jwt는 json객체로 정보를 안전하게 전달하는 방식임
	이건 rsa(공개키비밀키)를 사용해서 전달됨
	여기서 핵심은 서명(비밀키로 잠금)임
	중간에서 해당 정보를 훔쳐갈순있지만,해당 정보를 변형시킬순 없다는것(무결성)
	그래서 비밀성을 보장할순없지만 무결성은 보장할수있게됨
	
	jwt는
		헤더.페이로드(유효탑재량).시그니처(서명)
	으로 이루어짐
	
	헤더는 토큰유형과 서명알고리즘으로 이루어짐
		"alg":"HS256" //알고리즘
		"typ":"JWT" //토큰유형
	이런식임
	이 헤더는 base64로 인코딩되어서 jwt의 맨앞에 들어감
	
	페이로드는 클레임(정보)들을 가지고있음,이건 등록된클레임과 개인클레임으로 이루어지고,
	등록된클레임은 필수는 아니지만 이미 정의된 클레임이고,
	개인클레임은 우리가 직접 넣은 정보임
	이 클레임에는 필수적으로 프라이머리키(해당유저의)가 들어가게됨(sub,sub는 등록된클레임임)
	이 페이로드도 base64로 인코딩되어서 jwt의 중간에 들어감
	
	시그니처는 rsa의 경우엔 헤더와 페이로드를 비밀키로 암호화해서 넣어둠(헤더의 alg알고리즘으로),
	이걸 공개키로 해독할수있으면 걔가 보냈다는게 보장됨
	
	hs256은
	헤더와 페이로드,대칭키를 비밀키로 암호화해서 넣어둠(헤더의 alg알고리즘으로),이걸 공개키로 해독할수있으면 걔가 보냈다는게 보장됨
	여기서 처음에는 비밀키공개키로 서로 맞는지 확인하고 대칭키를 나눠가지고,
	그뒤로는 대칭키를 사용해서 암호화해서 보냄(어짜피 양쪽다 가지고있으니 이게 더 쌈)
	
	보통은 rsa를 사용함
	
	즉 서버에서 세션을 사용하지않고,그냥 서로 키를 나눠가지는행위와 토큰을 클라로 던져서 그거쓰라고 하는 행위 두개로,
	서버에서 세션을 제거할수있어지고,토큰의 유효기간을 길게 잡아서 장기로그인도 가능하게됨
	이 토큰은,클라가 로그인시도를 하고 인증이 완료가 되면 그 응답에 담아서 클라에 던져줌
	클라는 모든 요청마다 이 토큰을 넣어서 던짐
	그러면 서버가 이 토큰을 검증하고(자기가 던진 토큰이니,시그니처를 자기공개키로 해독해봄,rsa기준)
	해당권한이 있는지(클레임)확인하고 요청처리하던지 403던지던지하면됨
	
	즉 모든 검증관련로직은 서버쪽으로 몰아지게됨
	
	jwt를 사용하면서 oauth2로그인을 하고싶으면,위의 세션쓰던방식과 다른방식을 써야함(리프레시토큰)
	
	jwt를 만들떄,직접만들수도있지만
		https://mvnrepository.com/artifact/com.auth0/java-jwt
	이 라이브러리를 쓰면 편하게 만들어줌(인코딩다해줌)
	그냥 빌드그래들에
		implementation 'com.auth0:java-jwt'
	하면됨
	
	
	스프링 시큐리티에서 jwt서버를 사용하려면 세션을 꺼야함
	이건 시큐리티컨피그에서
        http.sessionManagement {
            it.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        }	
	를 추가하면됨
	
	rest컨트롤러로가면 cors설정도 해줘야함
		@Configuration
		class CorsConfig {
			@Bean
			fun corsFilter():CorsFilter{
				val source = UrlBasedCorsConfigurationSource()
				val config = CorsConfiguration()
				config.allowCredentials=true //내서버가 응답할떄 json을 js에서 처리할수있게 허용
				config.addAllowedOrigin("*") //모든 ip에 응답을 허용
				config.addAllowedHeader("*")//모든 header에 응답을 허용
				config.addAllowedMethod("*") //모든 post,get,put등에 요청을 허용
				source.registerCorsConfiguration("/api/**",config)
				return CorsFilter(source)
			}
		}
	클래스만들고 시큐리티컨피그에 등록(이거말고 컨트롤러에 @CrossOrigin걸수있는데,이러면 시큐리티인증이 필요하면 다 거부되버림)
	allowCredentials는 httpOnly때문에 js에서 쿠키같은걸 처리못하게하는걸 풀어주는정책임
	이건 풀어주면 편하긴한데 서버쪽에 장난질을 칠수있어짐
	만약 설정해도 cors뜨면 addAllowedOrigin대신 setAllowedOriginPatterns()으로 와카말고 해당프론트도메인 등록
	allowCredentials=true일때는 와일드카드를 사용할수없음
	
	즉 jwt서버의 기본설정은
		@Configuration
		@EnableWebSecurity
		@EnableMethodSecurity(securedEnabled = true, prePostEnabled = true)
		class SecurityConfig(val corsFilter: CorsFilter) {
			@Bean
			fun filterChain(http:HttpSecurity):SecurityFilterChain{
				http.csrf(CsrfConfigurer<HttpSecurity>::disable)
				http.sessionManagement {
					it.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
				}
				http.addFilter(corsFilter) //위에서 설정한 필터 등록
				http.authorizeHttpRequests {
					it.requestMatchers("/api/v1/user/**")
						.hasAnyRole("MANAGER","ADMIN","USER")
					it.requestMatchers("/api/v1/manager/**")
						.hasAnyRole("MANAGER","ADMIN")
					it.requestMatchers("/api/v1/admin/**")
						.hasAnyRole("ADMIN")
					it.anyRequest().permitAll()
				}
				http.formLogin {
					it.disable()
				}
				http.httpBasic {
					it.disable()
				}
				return http.build()
			}
		}
	이거임
	cors꺼버리고 폼로그인 꺼버리고 httpBasic꺼버리고 세션꺼버리고 특정 url쪽은 권한요구하고 나머지는 풀어버리는식임
	이러면 세션을 안쓰기때문에 authorizeHttpRequests로 권한제한을 하지않은곳은 전부 접근이 가능하게됨(/home같은)
	
	httpBasic은 헤더에 id와 패스워드를 담아서 요청하는방식인데
	httpBasic은 확장성은 좋은데,http는 암호화가 안됨 그래서 잘 사용하지않음
	
	그래서 httpBasic이 아닌 Bearer라는 토큰을 사용해서 인증하는방식을 사용함
	이거도 httpBasic이랑 거의비슷한데,id패스워드 대신 토큰을 사용하니 노출이 된다고해도 토큰폐기하고 새로파면되니 위험부담이 적음
	그냥 리프레시토큰이 아닌 액세스토큰을 하루마다 폐기하고 새로받는식으로 처리하면 하루밖에못쓰니까
	이 Bearer를 사용하려면 세션과 httpBasic과 폼로그인을 다 꺼줘야함
	
	
	시큐리티에서 토큰 처리를 할땐 서블릿 필터를 쓰는게 가장 일반적임(jakarta.servlet.Filter)
		@Component
		class MyFilter1:Filter {
			override fun doFilter(request: ServletRequest?, response: ServletResponse?, chain: FilterChain?) {
				println("필터1작업")
				chain?.doFilter(request, response)
			}
		}
	이런식으로 필터를 만들고
	필터컨피그파일을 만들어서 빈등록을 하면		
		class FilterConfig {
			@Bean
			fun filter1():FilterRegistrationBean<MyFilter1>{
				val bean:FilterRegistrationBean<MyFilter1> =FilterRegistrationBean(MyFilter1())
				bean.addUrlPatterns("/**")
				bean.order=0 //낮은게 우선실행
				return bean;

			}
		}	
	자동으로 해당 필터가 실행이됨(order의 우선순위순서로 실행이됨)
	즉 필터를 빈등록하면 자동으로 해당 필터가 필터체인에 걸림(이때 시큐리티체인이 끝난다음에 걸림,즉 시큐리티체인 끝나고 실행)
	만약 시큐리티보다 먼저 필터가 실행되게하고싶으면 시큐리티필터체인에
			http.addFilterBefore(
			내필터(),SecurityContextHolderFilter::class.java)
				//SecurityContextHolderFilter 동작 이전인 시큐리티 시작전에 발동
	로 시큐리티필터체인 제일위에 추가하면됨
	
	필터가 중복실행되면,필터컨피그에서 @Configuration안붙어있나 확인
	저거도 붙이고 @Bean도 붙이면 둘다 등록돼서 이중으로 등록됨
	추가로 시큐리티컨피그에 등록하고 컴포넌트등록이 되어있거나(@Configuration,@Bean)하면 이것또한 이중등록임
	이거해도 안되면 (OncePerRequestFilter) 검색
	
	
	필터에서 토큰을 받아볼땐
		override fun doFilter(request: ServletRequest?, response: ServletResponse?, chain: FilterChain?) {
			val req: HttpServletRequest =request as HttpServletRequest
			val res: HttpServletResponse =response as HttpServletResponse

			val headerAuth = req.getHeader("Authorization")
			println("headerAuth = ${headerAuth}")

			println("필터1작업")
			chain?.doFilter(request, response)
		}	
	이렇게 req의 헤더를 까서 받으면됨
	토큰 검사를 할땐
		if (req.method=="POST"){
			val headerAuth = req.getHeader("Authorization")
			println("headerAuth = ${headerAuth}")
			if (headerAuth=="cos"){
				chain?.doFilter(request, response)
			}else{
				val writer = res.writer
				writer.println("인증안됨")//요청자에 이게출력됨
			}
		}
	이런식으로 doFilter로 다음으로 넘어갈지 말지를 선택하면되는거
	이 토큰검증은 시큐리티가 동작하기 전에 동작을 해야함,그래서
		http.addFilterBefore(MyFilter1(),SecurityContextHolderFilter::class.java)
	를 시큐리티컨피그에 추가해야함
	
	토큰을 검증할땐,토큰이 넘어오면 이 토큰이 내가만든 토큰이 맞는지 검증만 하면됨(Authentication헤더에 들어있는값을 공개키로 해독성공시)
	즉 id패스워드가 정상적으로 들어오면 비밀키로 잠근 권한목록을 토큰으로 만들어서 던져주고,그걸 받아다 검증해서 권한확인하는식
	
	
	토큰으로 로그인하려면 PrincipalDetails를 만들고(UserDetails+oAuth2User구현)
	권한이 여러개면
		override fun getAuthorities(): MutableCollection<out GrantedAuthority> {
			val collect = ArrayList<GrantedAuthority>()
			user.roleList.forEach {
				collect.add(GrantedAuthority { return@GrantedAuthority it })
			}

			return collect
		}
	이런식으로 더해서 권한리턴해줌
	그리고 UserDetailsService구현체 만들고(PrincipalDetailsService)
		override fun loadUserByUsername(username: String?): UserDetails {
			if (username==null){
				throw IllegalArgumentException()
			}
			val user = userRepository.findByUsername(username)?:throw IllegalArgumentException()
			return PrincipalDetails(user)
		}	
	만들어두면,로그인요청이 올떄 PrincipalDetails가 동작을 함
	근데 폼로그인을 안쓰고 restapi서버니까 로그인을 할수없는데,이쪽에서 로그인은,
		class JwtAuthFilter:UsernamePasswordAuthenticationFilter() {
		}	
	이 필터를 만들어서 등록해두면됨
	이건 폼로그인에서 /login을 할떄 발동되는 필터인데,이걸 수동으로 등록하는거(폼로그인꺼버렸으니까)
	이걸 시큐리티컨피그에서
	AuthenticationConfiguration di받고
		class SecurityConfig(val corsFilter: CorsFilter,
		val authenticationConfiguration: AuthenticationConfiguration) 
	필터등록해주면됨
		http.addFilter(JwtAuthFilter(authenticationManager(authenticationConfiguration)))
	이렇게 등록해주면됨(문제시 https://substantial-park-a17.notion.site/7-1d5e937c11564aeeafc55f24dae15b65 참고)
	이떄 필터에서는 private로 받아야함
		class JwtAuthFilter(private val authenticationManager:AuthenticationManager)
	아니면 빈 겹쳐서 에러남
	
	즉 로그인시도를 하면 
		1.UsernamePasswordAuthenticationFilter가 동작
		2.받은값이 정상인지 확인
			2-1.authenticationManager로 로그인시도하면
			2-2.PrincipalDetailsService.loadUserByUsername()실행
			2-3.이떄 정상적으로 PrincipalDetails가 리턴되면 성공,예외나 다른동작하면 실패		
		3.성공이면 성공로직 실행
			3-1.성공이면 PrincipalDetails를 세션에담고 //세션에 안담으면 권한처리가 안됨,즉 던지는게 목적이 아닌 서버내에서 쓰기위한목적
			3-2.jwt토큰을 생성해서
			3-3.응답
		 실패면 실패로직 실행	
	순서임
	
	일반적으로 restapi면 json으로 요청받게됨
	이걸 파싱은
	    val om = ObjectMapper()
        val user = om.readValue(request.inputStream, User::class.java) //파싱
	이렇게 파싱해버리면됨
	그리고 토큰을 만들고 인증확인을 해줘야함
	    val authToken = UsernamePasswordAuthenticationToken(user.username, user.password)
			//토큰생성,앞은 유저네임 뒤는 패스워드
        val authentication = authenticationManager.authenticate(authToken)
			//userDetailsService의 loadUserByUsername를 토큰의 앞에거로 실행(user.username),성공시 UserDetails리턴
	이때
		There is no PasswordEncoder mapped for the id "null"
	뜨면 
	    @Bean
		fun passwordEncoder():BCryptPasswordEncoder{
			return BCryptPasswordEncoder()
		}
	빈등록
	이떄 500이 아닌 404같은게 뜨면 로그인이 됐다는거임
	즉 필터를
		class JwtAuthFilter(private val authenticationManager:AuthenticationManager):UsernamePasswordAuthenticationFilter() {
			override fun attemptAuthentication(request: HttpServletRequest?, response: HttpServletResponse?): Authentication {
				request?:throw IllegalArgumentException()
				val om = ObjectMapper()
				val user = om.readValue(request.inputStream, User::class.java) //파싱

				val authToken = UsernamePasswordAuthenticationToken(user.username, user.password)//토큰생성,앞은 유저네임 뒤는 패스워드
				val authentication = authenticationManager.authenticate(authToken)//userDetailsService의 loadUserByUsername실행

				return authentication
			}

		}
	이렇게 만들어야함
	여기서 return authentication이 되면,해당 auth객체(userDetails나 oAuth2User)는 시큐리티세션에 등록이됨
	이게 토큰을 통해서 생성되니까,정상적으로 만들어졌다면 토큰도 보장이되는것(db유저네임과 패스워드가 일치한다는것)
	그리고 해당필터가 리턴되면 시큐리티세션에 등록되는거(시큐리티가 알아서해줌)
	세션은 단지 권한관리를 위해서만 사용함
	
	attemptAuthentication메서드가 종료되면,successfulAuthentication이 실행됨(성공시)
	여기서 토큰을 응답해주면됨
	만약 실패했으면 저 메서드가 실행안됨
	
	저 메서드에서 authentication에서 값을 꺼내서 토큰으로 만들어서 response헤더에 토큰을 담아주면됨
		override fun successfulAuthentication(
			request: HttpServletRequest?,
			response: HttpServletResponse?,
			chain: FilterChain?,
			authResult: Authentication?
		) {
			if (response==null || authResult==null){
				throw IllegalArgumentException("잘못된입력")
			}
			val principalDetails = authResult.principal as PrincipalDetails

			val jwtToken=JWT.create()
				.withSubject("abc토큰")//토큰명,큰의미없음
				.withExpiresAt(Date(System.currentTimeMillis()+(60000*30)))//만료시간,좀 짧게잡는게좋음,여기선 30분
				.withClaim("id",principalDetails.user.id)//내가넣을권한이나 정보
				.withClaim("username",principalDetails.user.username)
				.sign(Algorithm.HMAC512("abc"))//hash암호방식,rsa아니라서 키값들어가는거,키값적으면됨

			response.addHeader("Authorization", "Bearer $jwtToken")
		}
	여기서 JWT는 com.auth0.jwt.JWT라이브러리임,저번에 추가했던 서드파티
	그리고 토큰을 만들때 시간은 좀 짧게(10분 or 30분)잡는게 좋고,이걸 헤더에 담아두면 알아서 스프링이 요청끝부분에 던짐
	
	그리고 토큰을 받은 클라는,모든 요청에 이 토큰을 추가해서 던지면 처리가 됨
	이때 백엔드쪽에서도 토큰을 받아서 처리하는 필터가 필요함(토큰검증+토큰권한파싱)
	세션이야 자동으로 시큐리티가 처리하지만 토큰은 직접만들어야함
	
	즉,첫로그인시엔(토큰이 없을때)
		UsernamePasswordAuthenticationFilter구현체로 
		/login같은 로그인url로(미리지정) 아이디패스워드를 담아 시큐리티필터체인을 타고 요청이 들어옴
			해당 리퀘스트 정보로 attemptAuthentication메서드를 실행
				UsernamePasswordAuthenticationToken으로 아이디패스워드로 토큰생성
				위에서만든 토큰으로 authenticationManager.authenticate(authToken)를 실행
					authenticate메서드는 userDetailsService의 loadUserByUsername를 실행해서(해당정보가 db에있는지확인),
						성공시 userDetails 리턴,실패시 예외
					성공했으면 해당 userDetails를 authentication에 담아서 리턴
			attemptAuthentication메서드가 성공하면 successfulAuthentication메서드실행
				받은 userDetails(authentication에 들어있음)를 파싱해서 user객체로 변형
				토큰생성(토큰명,만료시간,권한(클레임),서명)
				토큰을 response헤더에 추가(response.addHeader("Authorization", "Bearer $jwtToken"))
	이런로직을 거침
	토큰이 있으면 토큰을 생성하는 이런 로직이 필요없고,토큰을 검증하고 권한을 파싱하는일만 하면됨
					
	이건 BasicAuthenticationFilter를 상속해서 만드는데,
	이 필터는 일단 모든 요청에서 다 동작하는데,여기로직에서 토큰이 있는지 없는지,유저가 있는지 없는지를 걸러줘야함
	즉 
		val jwtHeader = request.getHeader("Authorization")
	를 받아서
	있는지 없는지 일단 검증하고,없으면 그냥 다음으로 넘김(인증만 안해주고 그냥 알아서하게넘김)
        if (jwtHeader==null || !jwtHeader.startsWith("Bearer")){
            chain.doFilter(request, response)
            return
        }
	그리고 bearer을 지우고 토큰을 해독해봄
        val jwtToken = request.getHeader("Authorization").replace("Bearer ","")
        val username = JWT.require(Algorithm.HMAC512("abc"))//토큰만들때 넣은 시크릿값
            .build().verify(jwtToken).getClaim("username")
            .asString()
	해당값이 정상적이면 이거로 db에서 해당값이 있는지 확인후 강제로그인
        if (username!=null){ //서명확인
            val userEntity = userRepository.findByUsername(username)
                ?:throw IllegalArgumentException("유저아님")
            val principalDetails = PrincipalDetails(userEntity)
            val authentication:Authentication = UsernamePasswordAuthenticationToken( //강제로그인,해당유저존재확인했으니 가능
                principalDetails,
                null,   //null은 패스워드인데 필요없음
                principalDetails.authorities)//권한
			
			SecurityContextHolder.getContext().authentication=authentication//강제로 시큐리티세션에 값을 박아넣음
			
			chain.doFilter(request, response)
        }	
	강제로그인은,서명확인했고 해당값이 존재한다는거도 확인했으니 로그인했다치고 강제로 내 세션에 박아서 인증완료처리하는거임
	그리고 로그인 끝났으니 doFilter로 다음으로 넘김
	즉 인증실패하면 그냥 doFilter로 다음으로 넘기고,인증성공하면 시큐리티세션에 강제로 값 박고 doFilter로 다음으로 넘기면됨
	
	즉 얘는 토큰정상유무와 유저존재유무를 확인하고,유저정보와 권한을 시큐리티세션에 담는 역할만 하는거임
	그와중에 권한파싱은 PrincipalDetails.getAuthorities()에서 하는거고
	그리고나서 권한을 확인해서 접근을 허락할지말지는 다음필터들이 알아서함(시큐리티컨피그에 hasAnyRole(...)에 동작시키는필터)
	
	저기서 Authentication에 값을 넣었으니,컨트롤러에선 받아다쓸수있음
		@GetMapping("/api/v1/user")
		fun user(authentication: Authentication):String{
			val principal = authentication.principal as PrincipalDetails
			println("principal = ${principal.username}")
			return "user"
		}	
	이렇게
	
	서블릿필터에선 바로 예외를 던지면 무조건 500에러임
	여기서는
        try {
            username=JwtUtil().getTokenUsername(jwtHeader)
        } catch (e:Exception){
            response.status=HttpStatus.UNAUTHORIZED.value()
            response.contentType=MediaType.APPLICATION_JSON_VALUE
            response.characterEncoding="UTF-8"
            val statusException = ResponseStatusException(HttpStatus.UNAUTHORIZED, "토큰이 이상함")
            ObjectMapper().writeValue(response.writer,statusException)
            chain.doFilter(request, response)
            return
        }	
	이런식으로 response안에 예외를 넣고 다음으로 넘기는식으로 처리해야함
	
	
	

끝	
	추가적으로,
		리프레시토큰
			토큰2개만들어서 하나는 액세스토큰,하나는 액세스토큰 재발급용으로 사용
			리프레시토큰은 별도의 정보는 가지고있지않고,토큰id와 만료기한만 있음(즉 서버에서 레디스에 저장해야한다는것),
				단,정보를 담아서 서버 stateless할수도있음(이경우 강제로그아웃시키기는 불가능해짐)
			response.addHeader("Refresh-Token", "Bearer " + refreshToken)로 추가
			추가적으로 액세스토큰이 만료될때마다 리프레시토큰을 다시 재발급하는식으로 로그인기한늘리기+리프레시토큰 탈취방지를 할수있음
		oauth2 토큰로그인(두개 합쳐서 응용하면될듯),
		JwtProperties(하드코딩방지용 상수클래스,시크릿이랑 만료시간,Bearer 이랑 그런거 넣어두는곳,중복제거+실수방지)
	이것들 해보자
	
	
	
	
	
	
	
