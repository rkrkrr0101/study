1.보안 기본
	api보안을 하지않으면
		컨텐츠가 공개되어있어 정보를 보는사람을 통제할수없음
		컨텐츠는 익명이라 누가요청했는지 알수없음
		컨텐츠는 보호되지않아,악의적인 유저가 브라우저기반취약점을 이용할수있음
	같은 문제가 있음	
	
	컨텐츠는 공개되어서 그 ip에 접근할수있는 모두가 api를 열수있고 데이터를 볼수있음,
	이건 네트워크보안을 통해 완화할순있지만,보통은 퍼블릭으로 여는편이라 도움이 안됨
	퍼블릭망에 공개하지않았더라도,ssrf로 인해 열어두고싶어도 열면안됨
	
	컨텐츠가 익명이면,사용자가 누구인지,신뢰할수있는지,권한이 있는지를 알수없어서,해당 사용자의 특정컨텐츠를 표시하는게 더 까다로워짐
	이걸 인증을 요구해서 완화할수있음
		
	그리고 컨텐츠가 보호되지않아서,이게 브라우저에 노출될경우 추가개입없이 앱전체가 csrf,mitm,xss등의 공격에 취약해질수있음
	
	404낫파운드를 그냥 뜨게 두는거도 디렉토리 탐색을 할수있게되는등의 취약점이 발생할수있음
	
	즉 rest api는 기본적으로 공개되고,익명 및 보호가 되지않아서,
	다른 외부툴같은거로 인증,권한부여 방어메커니즘을 추가해야하는데 스프링에선 스프링시큐리티가 젤나음
		
		
	스프링 시큐리티가 클래스경로에 있으면,스프링부트는 rest api에 대해
		모든 요청에 인증필요
		모든 요청에 보안헤더로 응답
		부작용이 있는 모든 요청에 대해 csrf완화가 필요
		기본사용자로 http기본인증을 허용
		보안실패에 restful하게 대응
		앱방화벽으로부터 악의적인 요청으로부터 보호
	를 기본값으로 사용하여 어플리케이션을 구성함
	
	모든 요청에 인증필요는,엔드포인트가 뭐든간에 관계없이 모든 디스패치의 모든요청에는 인증이 필요함
	엔드포인트의 성격과 관계없이 시큐리티는 모든 요청을 검사하고 요청이 인증되지않으면 거부하는 서블릿필터를 적용함
	즉 디스패처서블릿의 앞단에 요청검사하는 필터를 둬서,아니다싶으면 튕겨내는거
	즉 그래서 엔드포인트가 뭐든 신경안쓰고 먼저 가로채니,404가 뜰수가 없어짐(권한없음이 먼저뜨고 권한이 있어야 디스패처서블릿가서 404띄우니까)
	그래서 최소권한원칙이 적용됨
	
	모든 요청에 보안헤더로 응답은,시큐리티는 요청이 인증되든 아니든 특정 헤더로 응답하는데,이떄의 기본값이 가장 안전한값임
	이떄 헤더로는
		캐시제어헤더:브라우저에 응답기록 캐싱하는걸 캐시하지못하게함
		엄격한 전송보안헤더:이건 브라우저가 지정된기간동안 요청을 https로 보내는걸 강제함
		컨텐츠유형옵션헤더(X-Content-Type-Options):브라우저가 응답의 컨텐츠 유형을 추측하지말라고 지시함,
			이걸통해 추측을통한 스크립트 실행을 방지할수있음
	가 있음

	부작용이 있는 모든 요청에 대해 csrf완화가 필요는,타사웹사이트가 동의없이 내 서버에 요청할수있음
	즉 이미 로그인을 했으면 해당 쿠키를 다른웹사이트에서 우리서버로 던져서 값을 훔쳐갈수있음,
	이걸 막기위해 후속요청에 사용해야하는 특수토큰을 클라로 던지는데,이게없으면 post,put,delete를 실행시키지않음
	이건 제 3자가 볼수없는 방식으로 전송되고,이 토큰이 반환되면 해당 클라는 합법이라고 간주함
		
	기본사용자로 http기본인증을 허용은,기본적으로 따로 뭘 안하면 시큐리티는 user라는 기본계정을 만드는데,이때 비밀번호는 시작할떄마다 생성됨(uuid)
	그래서 기본값으로 프로덕션에 배포할때 기본값id패스워드를 사용해서 난리치는걸 막음
		
	보안실패에 restful하게 대응은,요청에 자격증명이 잘못되었거나 누락되면 401을 날리는데,이건 요청이 인증되지않았다는것
	자격은 정상이지만 권한이 없으면 403을 날림,이건 요청이 승인되지않았다는것
		
	앱방화벽으로부터 악의적인 요청으로부터 보호는,이상한짓을 하는(줄바꿈이나 이중인코딩,캐리지리턴(아스키13)등이 포함된)요청들은 그냥 거부함
	이런 방확벽을 추가해서 취약성을 완화함
		
		
	스프링 시큐리티를 사용하려면,빌드.그래들에서 	
		dependencies {
		  ...
		  implementation 'org.springframework.boot:spring-boot-starter-security'
		  testImplementation 'org.springframework.security:spring-security-test'
		  ...
		}
	를 추가하기만 하면됨
	이때 시큐리티만 추가해서 테스트를 돌리면 테스트실패가 나는데,이건 모든 api요청에대해 인증을 필요로하기때문,그래서 테스트쪽은 따로 빼줘야함
	테스트코드의 클래스에 @WithMockUser 어노테이션을 추가하면됨(@SpringBootTest 밑에)
	그리고 post나 put,delete테스트는 csrf토큰을 추가해야하는데
		String location = this.mvc.perform(post("/cashcards")
							.with(csrf())
							...
	이런식으로 csrf를 모킹해서 사용하면됨(import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;)
		
	시큐리티를 사용하고 평범하게 서버에 api요청을 던지면 401이 나옴,404가 뜰곳도 다 401이 나옴(권한없음)
	그리고 헤더를 보면
		Cache-Control: no-cache, no-store, max-age=0, must-revalidate
		X-Content-Type-Options: nosniff
		X-Frame-Options: DENY
	가 붙은걸 볼수있음
	
	시큐리티를 기본값으로 실행시키면,아이디는 user이고 패스워드는 터미널에
		Using generated security password: 6cc833e4-8be5-44a6-b005-54e19c8e3201
	이런식으로 표시됨
	이걸가지고 api요청을 날릴때
		http -a 유저명:패스워드 ip:포트/상세주소
		http -a user:3ce23782-39af-4759-a221-4c08681daca9 127.0.0.1:8080/cashcards
	이렇게 날려야함
	이렇게 권한이 있는상태에서 404뜰곳에 날리면,404가 나옴
	
	이떄도 post를 날리면 401이 뜨는데,이건 csrf토큰이 없어서그럼,
	써드파티는 이 토큰을 볼수없기때문에,이게있으면 신뢰할수있는 출처에서 왔다고 믿을수있음
	
	그리고 스프링은,url에 이상한거 섞으면 기본적으로 튕겨냄,%2F같은거 들어가면 400에러를 띄움

	
	즉 스프링시큐리티는,모든엔드포인트에 대해 인증을 요구하고,
	부수적작업을 위해 csrf를 요구하며,
	시작시 기본패스워드를 다시 생성하고,
	응답에 보안헤더를 작성하고,
	여러 유형의 악성요청을 차단함


2.인증
	인증은
		호출자의 신원:요청을 한 대상(직전대상)
		요청자의 신원:요청의 최종사용자
		요청의 무결성:요청이 중간에 수정되지않았음
	을 확인하는걸 의미함
	
	스프링 시큐리티는 폼로그인과 http기본인증중 하나를 사용해서 주체의 신원을 확인함,이때 콘텐츠협상을 사용해서 둘중 하나를 선택함
	예를들어,폼일경우 브라우저가 api에서 인증되지않은 엔드포인트로 이동하면,기본로그인페이지로 리다이렉션하고
	rest요청일경우 WWW-Authenticate헤더를 사용하여 예상되는 인증체계를 표시함(autorization헤더를 추가해라),
	만약 요청에 autorization헤더가 있을경우,스프링 시큐리티는 기본체계를 인식하고 http인증지원을 실행함
	
	스프링 시큐리티의 인증지원은,어떤 인증체계를 사용하냐에 따라 세부분으로 나눌수있음
		요청자료를 자격증명으로 파싱
		해당 자격증명을 테스트
		자격증명을 통과하면 해당자격증명을 주체 및 권한으로 변환
	이걸 실제 동작방식으로 보면
		base64로 인코딩된 이름과 비번을 디코딩함,이때 비번이 자격증명임
		이걸 사용자저장소에 대해 테스트(이름과비번),비번은 해시화해서 비교함
		일치하면 해당 사용자 및 권한을 로드해서 보안컨텍스트에 저장하고,엔드유저는 이거의 주인이됨
	이런식으로 동작함

	스프링시큐리티에서 결과는 인증 인스턴스임,이건 클래스로
		Principal ("사용자명")
		Credentials ("증명")
		Authorities ("권한")
	이렇게 있음
	어플리케이션은 다양한 방법으로 이 인증인스턴스를 검색할수있음
	
	이떄 일부 인증체계는 스테이트풀이고,다른 인증체계는 스테이트리스임
	폼 로그인은 스테이트풀 인증체계임,이건 로그인한 사용자를 세션에 저장하고,이 세션id를 저쪽에서 반환하면 다시 로그인할필요가없음
	http basic은 스테이트리스임,이건 이전요청을 기억하지않기때문에,모든 요청에서 사용자이름과 비밀번호를 입력해야함

	
	스프링 시큐리티는 기본값으로 http basic을 활성화함(쉬워서 기본값임),하지만 여기엔
		장기자격증명
		인증우회
		민감한 데이터 노출
	같은 문제가 있음
	
	장기 자격증명은,아이디와 패스워드를 자격증명으로 사용하면,이걸 입수한 사람은 비밀번호를 바꾸기전까진 계속 사칭을 할수있다는것
	이건 서드파티앱말고 해커도 포함됨,그래서 사용자가 자주 비밀번호를 바꾸는걸 강제해야함
	
	인증우회는,서드파티앱에 아이디패스워드를 제공하면,해당 앱도 아이디와 비번을 소유하게된다는것,그래서 해당앱이 뭘하든 믿어야함
	즉 권한을 나눠서 주지못하니,단순조회와 수정삭제권한이 같이 주어지게됨
	
	민감한 데이터 노출은,http basic은 매번 아이디패스워드를 api로 던져야하고,
	클라앱에선 아이디패스워드를 평문으로 어디 저장하고있어야 api로 반복적으로 던질수있음
	그래서 한번이라도 패킷탈취를 당하거나,클라앱이 메모리덤프를 한번이라도 당하면 비밀번호가 그대로 노출되고 위험성도 높음
	그래서,특정작업을 승인할수있을정도의 단기인증정보를 보유하는식으로 해야하고,비밀번호는 절대 어떤방식으로도 보유하고있으면 안됨

	
	비밀번호는 장기적으로 매우 민감한 인증정보이고,몇분간만 사용할수있는 자격증명이 필요함
	이떄 사용하는게 OAuth임
	OAuth는 3가지 주체가 있음
		데이터에 액세스하고 서비스를 제공하는 클라앱(내가만들앱)
		데이터를 보관하고 보호하는 리소스서버(네이버,카카오같은 실제 회원가입한곳,restAPI로 통신해서 api서버라고도 부름)
		클라가 데이터에 엑세스할수있게 권한을 부여하는 인증서버
	로 구성됨
	
	유저가 클라에 요청하면
		1.클라는 인증서버에 리소스서버와 통신할수있는 권한을 요청
		2.인증서버는 권한을 부여할지 여부를 결정
		3.인증서버가 권한을 부여하기로했으면,액세스토큰을 생성함,이 액세스토큰은 클라에게 부여된 권한을 설명함
		4.클라가 리소스서버에 액세스토큰을 포함한 요청을 함
		5.리소스서버는 액세스토큰에 올바른 권한이 있는지 확인하고 그에 따라 응답함
	이런식으로 동작함,그래서 클라는 비밀번호를 절대 볼수없음,하지만 리소스서버는 여전히 주체를 인증해야해서 액세스토큰을 봐야함
	토큰은 비밀번호보다 안전하지만,자격증명이라는 중요한 보안기능을 수행하므로 안전하게 보관해야함
	
	jwt(json web token)은 액세스토큰을 인코딩하는 표준임
	가장 기본적으로 디코딩된 jwt는 헤더와 클레임(권한)의 집합임,json이라 구조는 json과같음
		{
			"키1":"밸류1",
			"키2":"밸류2"
		}
	헤더는 해당json이 jwt라는걸 보여주는거고,클레임은 해당 토큰이 가진 권한들을 나타냄
	이때
		iss클레임:토큰을 발급한 인증서버 식별자
		exp클레임:토큰만료시점
		scp클레임:인증서버가 부여한 권한집합
		sub클레임:토큰이 나타내는 주체에 대한 참조
	가장 중요한건 jwt의 서명임,좋은 서명은 하나의 주체에 의해서만 생성될수있으며,이건 본인이 서명했다는 증거로 사용됨
	서명은 메시지무결성도 제공함,그래서 발급과정의 일부는 인증서버가 jwt에 서명하고,리소스서버가 해당서명을 확인하는것(이때 공개키비밀키로 확인함)
	
	스프링시큐리티는 클라와 리소스서버,인증서버를 모두 지원함,단 여기선 리소스서버만 봄
	리소스서버는
		1.리퀘스트를 자격증명으로 구문분석:Authorization:Bearer ${JWT} 헤더를 찾음(bearer은 jwt or OAuth의 타입임)
		2.해당 자격증명을 테스트:jwtDecoder인스턴스를 사용하여 인증서버에 키를 쿼리하고 해당키를 사용해 jwt서명을 확인하고,
			신뢰할수있는 발급자인지와 만료기간을 확인함
		3.해당 자격증명을 소유자 및 권한으로 변환:클레임을 주체로 저장하고,
			범위클레임을 가져와서 각 개별값을 SCOPE_${값}패턴의 권한으로 파싱한 후(배열)
			주체와 권한을 스프링시큐리티에 저장해 나머지요청에 액세스함
	같은 순서로 진행함
	
	추가적으로 세션처럼 스테이트풀로 jwt를 사용하고싶을수도있는데,이건 거의항상 틀렸음
		jwt의 만료는 업데이트할수없지만,세션의 만료는 요청할때마다 업데이트되거나(둘의 불일치발생)
		사용자가 로그아웃했을때 세션은 만료되지만,토큰기한은 남아있거나
	이런거때문에 세션관리같은 상태저장방식에서 상태비저장토큰을 사용하면 불일치가 발생함

	내앱을 리소스서버로 만들땐
		1.implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server' 추가
		2.src/main/resources/application.yml에
		spring:
		  security:
			  oauth2:
				  resourceserver:
				    jwt:
					  public-key-location: classpath:authz.pub
		추가
	이렇게하면 리소스서버가 자동 활성화되고,저기있는 공개키를 사용하여 인증서버를 확인함(공개키비밀키)
	이렇게되면 실행시킬떄 uuid패스워드가 표시되지않음
	이상태로 http요청을 날리면,401이 뜨면서,WWW-Authenticate헤더가 Bearer로 들어있음
	보통 jwt는 인증서버에 인증을 요청하는 클라이언트에서 제공함
	
	jwt를 디코딩하고,exp를 보면 해당 토큰의 만료시간을 알수있고,sub를 보면 연결할 계정을 알수있음
	그리고
		http :8080/cashcards "Authorization: Bearer $토큰"
	이런식으로 날리면됨

	
	
	spring mvc에서 인증에 접근해야하는경우는
		본인프로필 또는 기타 세부정보확인
		쿼리에 사용할 본인의 id(프라이머리키)가 필요
		본인에게 해당작업을 수행할 권한이 있는지 여부 선언이 필요할떄
		다운스트림에 자격증명 전파를 해야할때
	같은 경우가 있음,이럴때 현재 인증된 주체를 가져와야함
	
	가장 기본적인 방법은(안쓰는)
		@GetMapping
		public ResponseEntity<Iterable<CashCard>> findAll(Authentication authentication) { ... }
	이런식으로 메서드의 매개변수에 Authentication authentication를 추가하는것
	이러면 자동으로 인증인스턴스를 조회하여 저안에 넣어둠
	이러면 필요에따라 권한,자격증명등을 메서드본문에서 접근할수있고,여기에는 앱의 서비스 및 리포지토리계층으로 사용자정보를 전달할수있는기능도 포함함
	
	그리고 Authentication#getPrincipal은 object를 반환함,이건 사용자정의를 할때 유용함
	단 이걸쓰면 원치않는 형변환이 발생해서,대신 @CurrentSecurityContext를 제공함
	@CurrentSecurityContext어노테이션은 사용자이름같은 특정값을 가져오는것같은 사용구를 제거할수있음
	이건
		@GetMapping
		public ResponseEntity<Iterable<CashCard>> findAll(
			@CurrentSecurityContext(expression = "authentication.principal") Jwt jwt) { ... }
	같은식으로 사용함,이건 jwt관련 정보를 얻어야할때 유용함(jwt객체에 담김),
	참고로 이 어노테이션은 어디든 붙일수있지만,컨트롤러에서만 처리되니 주의
	그리고 jwt가 아닌
		@GetMapping
		public ResponseEntity<Iterable<CashCard>> findAll(
			@CurrentSecurityContext(expression = "authentication.name") String owner) { ... }
	이런식으로 인증의 특정값만 가져올수도있음
	그리고 이건 메타어노테이션(어노테이션 여러개묶은거)도 지원함,이걸통해 이름을 바꿀수도있고,긴 어노테이션을 간결하게 사용할수도있음
	@CurrentSecurityContext(expression = "authentication.name")를 @CurrentOwner로 바꾸는식
	
	스프링에서 자체지원하는거도 이런게있는데
		@CurrentSecurityContext(expression = "authentication.principal")
		@AuthenticationPrincipal
	이거 두개는 같음(그냥 이름줄인거)
	
	
	@WithMockUser는 자동으로 사용자인증을 모킹하는 어노테이션임,
	이걸 @WithMockUser(username ="sarah1") 이런식으로 특정사용자로 고정하는거도 가능함
	Authentication authentication은
		authentication.getName();
	이런식으로 값을 가져오면됨,이걸 스프링데이터jpa나 jdbc같은거에 넘겨서 서치하는식
	인증은 컨트롤러단에서 알아서 다 처리하고 값만 밑으로 내려보내는게 이상적
	
	@CurrentSecurityContext(expression = "authentication")를 사용하면,좀 더 정교하게 값을 가져오는게 가능해짐
		@CurrentSecurityContext(expression="authentication.name") String owner //이름 바로받기
	이건 너무기니까,메타어노테이션을 사용해서 길이를 줄일수있음


	스프링 시큐리티는,서블릿필터로 동작하는데,이때 필터는 여러개의 필터체인으로 구성됨
	이 필터체인은,자기의 조건을 만족하지못하면 뒤로 보내지않고 바로 에러응답을 날림(미들웨어라고 생각하면됨)
	즉,통과,무시,반송 3가지선택지가있음
	이 필터체인은
		방어필터
		인증필터
		권한부여필터
		인프라필터
	로 구성됨
	
	방어필터는 필터체인의 제일위에있고,얘는 악성요청으로부터 앱을 보호함
	여기엔
		csrfFilter:csrf토큰을 검사하고 새토큰을 발급함
		headerFilter:리퀘스트의 보안헤더를 작성함
	가 포함되어있음
	
	인증필터는,각 인증필터별로 하나의 인증체계를 처리함
		BasicAuthenticationFilter:http기본인증처리
		BearerTokenAuthenticationFilter:베어러인증(jwt)를 처리
		UsernamePasswordAuthenticationFilter:폼로그인처리
		AnonymousAuthenticationFilter:널 오브젝트로 컨텍스트를 채움
	등이 있음
	이 인증필터의 동작은
		1.리퀘스트를 토큰으로 파싱
		2.해당토큰을 테스트하고 주체와 권한을 반환함
		3.주체와 권한을 구성함
	순임,이떄 토큰생성은 성공했는데 권한이 없을경우 리퀘스트를 거부함

	인증은 인증토큰(jwt)과 인증결과(인증자료)를 모두 나타내는 스프링시큐리티 인터페이스임
	각 인증 인스턴스는 토큰인지 인증결과인지에 따라 서로 다른값을 포함함
	토큰은
		principal ("who")	
		credentials ("proof")	
		authenticated = false	
	인증결과는
		principal ("who")
		credentials ("proof")
		authenticated = true
		authorities ("permissions")
	이렇게 구성됨
	이때 인증에 실패하면 바로 예외를 던지니,Authentication을 반환했으면 성공했다는거임

	AuthenticationManager는 인증토큰을 테스트하는 인터페이스임
	테스트에 성공하면 얘가 인증결과를 생성함
	이건 여러 AuthenticationProvider들로 구성되고,얘들은 각각 하나의 인증체계를 처리하고,그중 jwt처리하는애가 있음(핸들러선택하는방식)
	
	SecurityContext는 현재 인증을 보관하는 객체임(쓰레드로컬로 동작)
	얘안에는 Authentication이 선언되어있고,여기에 생성자주입으로 넣는식으로 SecurityContext는 생성됨
	이걸 사용해서 한 스레드안에서 하나의 인증을 계속 가져갈수있음

	인증필터에서 jwt인증을 하는 순서는
		1.BasicAuthenticationFilter가 jwt를 jwtAuthenticationToken객체로 추출
		2.해당토큰을 AuthenticationManager에 전달,얘는 jwtAuthenticationProvider인스턴스를 보유하고있음
		3.jwtAuthenticationProvider는 jwt를 인증하고,
			파싱된 jwt와 부여된 권한이 포함된 인증된 jwtAuthenticationToken인스턴스를 반환
			또한 실패시 AuthenticationException을 던짐
		4.마지막으로 필터는 인증결과를 SecurityContext에 보관함
	순서로 진행됨
	
	즉,방어필터를 통과한 안전한 요청은,인증필터를 거치는데 이 인증필터에서 요청이 인증되지않으면 필터가 요청을 거부함
	인증필터는 권한부여필터보다 우선함
	
	필터체인은 SecurityFilterChain이라는 단일 빈으로 구성됨
	이 빈은 모든 요청에 대해 실행할 임의의수의 보안필터를 보유할수있음
	이 빈은 기본적인 디폴트세팅이 되어있고,변경이 필요한거만 바꾸면됨
	얘는 HttpSecurity를 받는데,이걸 사용해서 스프링시큐리티의 대부분의 설정을 할수있음
		url접근권한
		인증실패시 이동페이지
		인증로직을 커스텀하기위한 커스텀필터
		csrf,강제 https호출 등
	설정을 다하고 http.build()해서 리턴하면됨
	이 필터체인빈은 인증+권한부여라서 이 빈을 선언할떄 두가지를 모두 지정해야한다는걸 기억해야함
	물론 안건드리면 기본값으로 알아서 생성하는데
		spring-security-oauth2-resource-server종속성 추가후
		yaml에 spring.security.oauth2.resourceserver.jwt.issuer-uri 추가하면
		OAuth2.0리소스서버 빈을 자동생성
	커스텀필요할경우가 있으니까


	SecurityContextHolder를 사용하면 스프링mvc없이도 인증인스턴스에 접근할수있음
	그래서 서블릿필터나 비동기처럼 요청컨텍스트 외부에서 처리할떄도 인증인스턴스에 접근할수있음
	이건
		SecurityContext context = SecurityContextHolder.getContext();
		Authentication authentication = context.getAuthentication();//인증정보받기
		
		Jwt owner = (Jwt) SecurityContextHolder.getContext().getAuthentication().getPrincipal();//토큰받기
	이런식으로 받아올수있음,이런식으로 어디서나 현재스레드의 인증에 접근할수있음
	이렇게 정적 SecurityContextHolder를 사용해서 인증인스턴스를 수동으로 받아오면,pojo에서도 인증정보에 접근할수있다는 장점이 있음
	이건 스레드로컬로 저장되니,해당 어플리케이션의 한 리퀘스트 전체에서 같은 인증정보에 접근할수있음
	단 이렇게되버리면 종속성이 생겨서 pojo가 아니겠지만 ㅋㅋ
	
	그리고 필터체인은 익명 인증 인스턴스로 securityContext를 채우기때문에,안에서 null건드릴걱정은 안해도됨
	
	
	인증정보를 파싱해서 토큰으로 만들고나서,해당토큰의 권한을 검증하는데는
		1.서명의 유효성검사
		2.현재시간이 iat(발행시점)과 exp(만료시점)사이에 있는지를 확인
	이거 2개는 기본값이라 반드시하고,추가적으로 iss(발행자)와 aud(대상)클레임의 유효성을 검사할수있음
	이거 2개는 기본값아니라 따로설정해야함,저거두개는 로컬한거라서 알방법이없으니까
	이걸 추가할떈 리소스의 yaml에
		spring:
		  security:
			oauth2:
			  resourceserver:
				jwt:
				  issuer-uri: https://issuer.example.org
				  audiences: https://cashcard.example.org
	이걸 추가하면,
	issuer-uri는 보낸사람 주소와 같이 토큰을 발행하는 엔드포인트를 나타내고(iss),여기의 jwt만 신뢰한다는걸 나타냄
	audiences는 받는사람의 주소와 같이 여기 적힌 주소로 던진거여야만 신뢰를 한다는걸 나타냄(aud)
	이걸 추가하기만 하면 바로 해당값을 읽고 값이 틀리면 401을 던짐
	
	유효성검사를 추가로 사용자지정하려면,AuthenticationManager를 사용하면되고,
	jwt는 JwtDecoder을 사용하면됨
	이건 AuthenticationManager의 구현체(정확히는 서브인터페이스),
	정확히는 JwtAuthenticationProvider의 서브인터페이스지만 그 슈퍼로 저게있음
	
	각 JwtDecoder 인스턴스는,서명확인과 클레임유효성검사 두가지일을 함
	스프링시큐리티는 기본적으로 Nimbus라이브러리를 사용해서,JwtDecoder의 기본구현체는 NimbusJwtDecoder임
	그래서 이걸 커스텀 jwtDecoder을 만들려면 이걸 생성해서 빈으로 등록하면됨
		@Bean
		JwtDecoder jwtDecoder(String issuer, String audience) {
			OAuth2TokenValidator<Jwt> defaults = JwtValidators.createDefaultWithIssuer(issuer);
			OAuth2TokenValidator<Jwt> audiences = new JwtClaimValidator<List<String>>(AUD,
				(aud) -> aud != null && aud.contains(audience));
			OAuth2TokenValidator<Jwt> all = new DelegatingOAuth2TokenValidator<>(defaults, audiences);
			NimbusJwtDecoder jwtDecoder = NimbusJwtDecoder.withIssuerLocation(issuer).build();
			jwtDecoder.setOAuth2TokenValidator(all);
			return jwtDecoder;
		}	
	이런거임,jwtDecoder에 위에 밸리데이터를 추가해서 더해서 빌드한다음에 리턴하면됨
	이 예제는 issuer-uri와 audiences를 추가한거
	
	
	스프링 시큐리티는 인증없는 요청을 받았을때,컨텐츠타입이
		브라우저면 폼로그인
		api면 401+WWW-Authenticate:Basic
		토큰클라면 401+WWW-Authenticate: Bearer 
	로 응답함
	그리고 잘못된 비밀번호나 토큰을 줬을때도 인증없는거랑 똑같이 동작함(인증되지않는요청과 인증실패는 모두 인증실패로 간주됨)
	그래서 인증실패가 리턴됐을떄,인증을 안했으면 인증을 해야하고,인증을했으면 뭐가틀렸는지봐야함
	이건 스프링시큐리티가 인증진입점(authentication entry points)를 통해 수행함
	
	AuthenticationEntryPoint는 각 시나리오별로 각각의 구현체가 있음
		LoginUrlAuthenticationEntryPoint:클라이언트가 브라우저일경우
		BasicAuthenticationEntryPoint:클라이언트가 http basic(api기본)일경우
		BearerTokenAuthenticationEntryPoint:클라이언트가 토큰기반일경우
	각 진입점은,스프링시큐리티가 클라에 오류 및 재시도정보를 제공하는 방식임
	스프링시큐리티가 어플리케이션의 진입점으로 돌아갔다고 생각하면됨
	각 진입점별 동작은
		LoginUrlAuthenticationEntryPoint:로그인진입점 페이지 or 메인페이지로 리다이렉트
		BasicAuthenticationEntryPoint:401리턴
		BearerTokenAuthenticationEntryPoint:WWW-Authenticate헤더에 정보(Bearer로 시작하는 에러 정보)를 추가후 401 리턴
	이런식으로 동작함
	이 인증진입점을 호출하는건 토큰을 처리하는부분을 try catch로 감싸두고 catch에 넣어서,거기서 예외가 발생하면 인증진입점을 호출함
		
	이 인증진입점도 커스텀이 가능함
	저 기본값 구현체의 경우,토큰의 문제가 여러개일때도 문제를 하나밖에 리턴을 안해주는데,이걸 여러개던지게 할수도있고 그럼
	이건
		@Component
		public class 커스텀엔트리포인트 implements AuthenticationEntryPoint {
			@Override
			public void commence(HttpServletRequest request, 
								 HttpServletResponse response, 
								 AuthenticationException authException)
				throws IOException, ServletException {
			}
	이걸 구현하면됨
	저 commence는 호출되면 저게 콜되니 저기안에 동작할방식을 그대로 넣으면됨
	
	
	
	
	
	



	
		