1.설치
	보통 요즘 스프링은 
		http://start.spring.io
	에서 만든다고함
	저기서 디펜던시에서
		spring web(restapi나 아파치톰켓같은게 들어가있음)
		thymeleaf(html엔진인데,딴거써도된대)
	선택해서 다운받고 압축풀기
	그리고 인텔리제이에서 build.gradle를 선택하고 열면됨
	
	build.gradle는 빌드데이터들(플러그인,디펜던시등)을 나열한거
	
	H2 데이터베이스를 2.1.214 버전이상사용
	
	static/index.html에 넣어두면 저게 기본페이지임
	
	검색할때 spring.io에서 프로젝트->스프링부트->런->버전
	여기서 비슷해보이는거 찾으면됨
	사실 구글링하면나올듯 ㅋㅋ
	
	템플릿엔진을 사용하면,정적 페이지가 아닌 코드형식으로 html을 변경할수있음(리액트생각하면됨)
	
	html에서 
		<html xmlns:th="http://www.thymeleaf.org">
	한건 th(타임리프)를 선언한거
	
	컨트롤러에서(mvc에서 c,컨트롤러에도 @Controller붙여줘야함) @getMapping를 붙인 Model model을 받는 함수를 만들고,
		model.addAttribute("html변수명","변경할값")
	을 하면,해당 html페이지의 해당변수명이
		<body><p th:text="'안녕하세요. ' + ${data}">안녕하세요. 손님</p></body>
		<body><p th:text="'안녕하세요. ' + 변경한값">안녕하세요. 손님</p></body>
	이렇게 치환됨
	
	즉,톰캣이 컨트롤러가 있나 확인하고,있으면 그 컨트롤러의 매핑된 메소드를 실행시킨다음,렌더링된 html을 리턴함
	매핑된걸 스프링이 확인하는방법은,리턴값임
		resources->templates->{리턴값}.html
	을 있나 찾고,있으면 그걸 대입하는식임
	즉,컨트롤러가 리턴값으로 문자를 반환하면,뷰리졸버가 뷰를 찾아서 처리함
	
	spring-boot-devtools추가하면,html만 컴파일해주면 서버 재시작없이 view변경이 가능함
	
	
	빌드할때 빌드된 파일 위치는,프로젝트루트폴더/build/libs에 저장됨
	실행은,
		java -jar 파일명.jar
	하면됨
2.스프링 웹개발 기초
	웹개발방법엔
		정적컨텐츠(정적으로 정해진html만 뱉는방식)
		mvc+템플릿엔진(동적으로 html을 바꿔서 리턴하는식)
		api
	3가지가 있음
	
	정적컨텐츠는 그냥 static에서,파일명 그대로 접근하면 접근됨
		static/heo.html
		->localhost:8080/heo.html
		
	이때 스프링이 각 url마다 구분하는 방식은,
		1.url요청받음
		2.컨테이너에서 컨트롤러를 찾음
		3.없으면 static에서 찾음
		4.없으면 404던짐
		5.있으면 그거리턴
	
	mvc사용이유는,관심사분리가 가장 큼
	view는 html
	controller는 백엔드 컨트롤러
	model은 db
	
	스프링 mvc에서 컨트롤러는
		@Controller
	로 표시해야함
	그리고 뷰는 리소스의 templates밑에 있으면됨
	
	그리고 mvc쓸땐 템플릿엔진이 있어야하니까,html의 속성에서
		<html xmlns:th="http://www.thymeleaf.org">
			...
		</html>
	를 넣어줘야함
	그리고 타임리프를 쓰면,뒤에 값을 넣어주면
		<body><p th:text="'hello ' + ${name}">hello! empty</p></body>
	저 hello empty가 기본적으론 안보이다가,그냥 html만 열었을때 저게 표시가되는 디폴트값을 넣을수있음
	
	컨트롤p누르면 해당대상의 속성을 볼수있음
	컨트롤클릭하면 해당 대상의 위치로 넘어갈수있음
		
	mvc사용시에 루틴은
		1.url요청받음
		2.컨테이너에서 컨트롤러를 찾음
		3.모델에 키:값으로 데이터들을 담음
		3.컨트롤러의 리턴에 해당되는 view를 찾아서 모델을 던짐
		4.뷰(뷰리졸버)는 모델을 받아서 키값으로 검색해서 키값과 밸류를 치환해서 리턴함(템플릿엔진이 처리)
		
	
	api를 사용할땐,@GetMapping밑에 @ResponseBody를 넣어줘야함
	이건 리스폰스바디에 직접 내가 데이터를 넣겠다고 선언하는것+view를 찾지않고(뷰리졸버대신 http메세지컨버터가 동작)
	+만약 대상이 객체면 json으로 게터세터가 있는 내부 변수를 전부넣어서 리턴
	or 스트링이면 그냥 스트링을 리턴
	
	알트인서트=제너레이터(코드뼈대생성기),이거로 게터세터같은거 만들떄편함
	
	객체를 반환하면서,@ResponseBody가 붙어있으면,해당 객체의 모든 변수들을 json으로 뱉어내게됨
	그리고, 이 변수들은 스프링도 게터와 세터를통해 접근하기때문에 강제적으로 모든 출력하려는 변수엔 게터와 세터가 달려있어야함(자바빈,프로퍼티)
		
3.백엔드기초(회원관리)
	설계시에
		컨트롤러:mvc의 컨트롤러
		서비스:핵심 비즈니스로직(웨이브덱의 ai서버같은)
		리포지토리:db에 접근을 할수있는 객체,저장등을 담당하고,얘만 db에 직접적으로 연결되어있음
		도메인:비즈니스 도메인객체,orm이라고 봐도될듯?
		
	만약 설계시에 확정이 안난부분이 있으면,인터페이스로 생성해서,temp를 임시로 끼워두고 개발을 시작하면됨
	
	알트쉬프트엔터=클래스 임포트
	
	함수의 Optional은,만약 null같은게 반환될때,저게있으면 에러안띄우고 반환된다는듯
	
	인터페이스 구현도 알트인서트로 해당인터페이스 메소드 전체 뼈대생성가능
	인터페이스 구현체(실제클래스)에서 만약 리턴이 null일 가능성이 있을경우
		return Optional.ofNullable(리턴값)
	을 하면 됨
	여기서 값꺼낼땐 .get()으로 꺼낼수있음
	근데 보통 .orElseGet()를 주로 사용함
	이건 값이 있으면 꺼내고,없으면 메소드를 실행하는 메소드임
	즉 예외처리를해버리거나 할수있음 
	
	키값에서 값객체에서 값을 찾을땐
		return store.values().stream().filter(member -> member.getName().equals(name)).findAny();
	이렇게 람다써서 하면됨
	
	
	테스트코드작성할땐,test밑에다가 해당파일명에 test붙여서 만들고,해당 객체 생성한뒤에 같은메소드이름으로 테스트하면됨
	이때 비교는
		Assertions.assertThat(member).isEqualTo(res);
	이런식으로 비교하고 테스트 실행시키면됨
	
	쉬프트f6하면 같은 모든 변수를 한번에 바꿀수있음
	
	그리고 테스트의 모든 메서드는,순서가 랜덤하게 동작하기때문에,서로간에 의존성이 있을경우엔 동작이 될수도있고 안될수도있음
	그래서 테스트가 끝나면 데이터를 클리어해줘야함
	이때,원래 클래스에 클리어하는 메소드를 만들고,테스트케이스에서
		@AfterEach
		public void afterEach(){
			클리어메소드실행
		}
	이렇게하면됨
	AfterEach는 테스트하나실행이 끝날때마다 동작하는 콜백이라고보면됨
	
	컨트롤알트v를 리턴값이 있는 메소드 맨뒤에서 누르면,자동으로 리턴값에 해당하는 속성으로 변수를 생성해서,거기다 받을수있음
	
	옵셔널변수에서
		res.ifPresent
	이런식으로 만약 값이 존재하면,이런식으로 if를 짧게 메소드형태로 받는 방법도 있음
	
	컨트롤알트쉬프트t누르면 리팩토링과 관련된 창이뜨는데,거기서 드래그한걸 메소드로 뺄수가있음
	
	보통 서비스같은경우 비즈니스용어(조인,멤버 이런거)를 사용하게되고,레포지토리의경우엔 좀 더 개발스러운 단어를 선택하게됨
	
	실제 클래스에서 컨트롤쉬프트t누르면 바로 테스트코드뼈대가 생성됨
	
	테스트는 given(뭐가 주어지고),when(뭘했을때),then(뭐가 나와야함)이렇게 잘림
	그래서 미리 주석으로 잘라두고,하는게 좋음
	
	알트 엔터를 하면 스테틱임포트(해당 대상의 영역까지 임포트를해서,짧게쓸수있게함)
	
	만약 예외처리테스트일경우엔,예외가 발생하지않았을때
		fail("예외발생안함");
	이걸 정상동작한곳 밑에 넣어주면됨(예외가 발생했을때 못들어가는곳에)
	예외처리는 기본적으로 try catch를 사용할수있지만
		assertThrows(해당예외.class, 람다함수);
		assertThrows(IllegalStateException.class, () -> memberService.join(member2));
	이런식으로 검증할수있고,이걸 받아서 다시 assertThat에 넣을수도있음
        IllegalStateException e = assertThrows(IllegalStateException.class, () -> memberService.join(member2));
        assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다");	
	즉,내부메시지까지 일치확인할때 사용할수있음 
		
	
	쉬프트 f10은 이전 실행을 다시 실행할수있음(재실행)
	
	만약 다른테스트클래스끼리 의존해야할경우엔,원래클래스부터 의존성주입으로 외부에서 넣어주게 하는게 좋음
		private final MemberRepository memberRepository = new MemoryMemberRepo();
	이렇게 매번 만드는게 아닌
		private final MemberRepository memberRepository;

		public MemberService(MemberRepository memberRepository) {
			this.memberRepository = memberRepository;
    }
	
4.스프링 빈과 의존관계
	스프링 컨테이너가 실행되면,모든 컨트롤러 어노테이션이 붙은 모든 클래스를 생성해서 가지고있고,거기에 맞는 url이 들어오면 거기다가 줌
	그리고 그래서 컨트롤러에선,new로 객체(서비스)를 생성하는게 아닌,객체를 받아서 사용해야함
	이건 만약 여러 컨트롤러가 같은 서비스를 공유해야하면,의존성주입으로 해결해야하기때문
	그래서 의존성주입패턴(생성자로 생성하는것)으로 처리하고,위에
		private final AaaService aaaService;
		@autowired
		public 컨트롤러이름(AaaService aaaService){
			this.aaaService=aaaService
		}
	이런식으로 중간에 autowired를 붙여서 처리하면됨
	이러면(autowired를 붙이면) 스프링컨테이너가 자동으로 싱글톤으로 해당 객체를 하나 만들어서,같은객체를 필요로하는 모든곳에 넣어줌
	이때도 해당 객체도 스프링빈(어노테이션)으로 선언되어있어야함
	서비스의 경우엔
		@Service
		public class AaaService{
		...
		}
	해주면됨(컨트롤러랑 같음)
	리포지토리도 동일(인터페이스가 아닌 구현체에 가야함)
		@Repository
		public class aaaRepository implements aRepository{
		...
		}
	이건 진짜 정형화된 패턴(컨트롤러로 외부요청을 받아서 서비스에서 비즈니스로직을 돌리고 리포지토리에서 저장등)이라,자주써서 빈도 다 있는거
	일반적으론 @Component를 사용하면됨,@Service,@Controller,@Repository등은 @Component의 특수화된 케이스임
	그래서 이런걸 컴포넌트 스캔이라고 부름,컴포넌트를 찾아서 이걸 전부 컨테이너에 등록하는식
	일반적으로는 거의 다 스프링빈으로 등록해서 사용하게됨
	그리고 이 스프링빈은,실행위치의 루트부터 아래로 트리탐색을 하기때문에,루트랑 같은위치에 있거나 더 높은위치에 있으면 등록되지않음
	그리고 스프링빈은 기본적으로 설정하지않으면 다 싱글톤으로 생성됨
	
	
	컨트롤b는 해당 클래스,메소드위치로 이동
	
	이거말고 자바코드로 직접 스프링빈을 등록할수도있음
	이때는 메인클래스와 같은위치에 클래스파일을 하나 만들고,
		@Configuration
		public class SpringConfig {
			@Bean
			public MemberService memberService() {
				return new MemberService(memberRepository());
			}

			@Bean
			public MemberRepository memberRepository() {
				return new MemoryMemberRepo();
			}
		}
	이런식으로 위에 configuration붙이고,생성할거 하나마다 @Bean붙이고 생성하면됨
	생성할때 의존성필요하면 필요한 객체 생성자메소드 넣어주면됨
	이경우에도 컨트롤러는 무조건 @Controller식으로 해야함,이게 제일 위라서 어쩔수없음
	
	코드로 스프링빈을 등록하는거와 어노테이션으로 등록하는거의 장단점은
	
	의존성주입(di)에는 필드주입,세터주입,생성자주입 이렇게 3가지방법이 있는데,보통은 생성자주입을 사용하는편
		필드주입예제 @Autowired private final MemberService memberService;
		세터주입예제
			@autowired
			public set컨트롤러이름(AaaService aaaService){
				this.aaaService=aaaService
			}
		생성자주입예제
			@autowired
			public 컨트롤러이름(AaaService aaaService){
				this.aaaService=aaaService
		}
	필드주입은 안쓰고,세터주입은 세터가 퍼블릭으로 열려있어야해서 잘안씀(사실 중간에 바꿔치기해야할 이유도 보통없음)
	그래서 생성자로 사용하는편
	
	실무에서는 보통 컨트롤러,서비스,리포지토리를 컴포넌트스캔하고,정형화되지않거나 구현클래스를 상황에따라 변경해야하면 자바코드로 등록함
	즉 인터페이스가 있으면 자바코드로 등록하는게 좋음
	그러면 그냥 컨피그코드만 건드리면 되고,나머지는 안건드려도됨
	
	그리고 @autowired는 스프링이 관리하는 객체에서만 동작함,즉 @controller같은거나 config파일설정이 없는곳에서 동작하지않음
	
	
5.회원관리예제-웹mvc
	mvc(템플릿엔진)와 스태틱간엔 mvc가 더 우선순위가 높아서,거기부터들려서,둘다있을경우엔 mvc가 우선임
	postmapping에서
		return "redirect:/"
	이런식으로 다른 url로 보내버릴수가있음
	
	그리고 html의 form과 post가 받는 클래스에서 같은 이름(html의 name tag)이 있을경우엔 거기에 매칭이되어서 자동으로 삽입되게됨
	(컨트롤러의 postmapping에서)
	
	템플릿엔진이 만약 리스트를 받고,html에서 th:each가 있으면 foreach를 돌아서 안에있는걸 전부 한개씩 만듬(타임리프문법)
	
6.스프링 db 접근 기술	
	스프링에서 db추가할땐,application.properties에서
		spring.datasource.url=jdbc:h2:tcp://localhost/~/test
		spring.datasource.driver-class-name=org.h2.Driver
	이렇게 경로랑 드라이버추가해주고,build.gradle에서 오른쪽위에 코끼리눌러주면 자동으로 임포트됨
	저기다가 db아이디비번적으면됨
	
	이때 레포지토리를 그냥 springconfig에서 구현체를 바꿔버리면됨(개방폐쇄원칙)
	
	테스트코드에서 스프링을 쓸땐,테스트 클래스위에
		@SpringBootTest //스프링 컨테이너를 실행해서 테스트함
		@Transactional //이건 db에서 트랜잭션을 걸고,커밋을 하지않고 롤백을 하는거,즉 db테스트가 반복가능해짐,@Commit하면 커밋할순잇음
	넣어줘야함
	
	그리고 테스트는 그냥 제일 autowired같은거 막써도됨 어짜피 의존관계없으니까
	그리고 db연동 통합테스트시엔 테스트전용db에 연결해서함
	
	그리고 가능하면 유닛테스트로 만드는게좋음
	
	jdbctemplate
	
	그리고 생성자가 딱 하나 있을경우엔,autowired를 생략할수있음
	
	알트엔터로 함수를 람다로 바꿀수있음
	
	jpa사용시엔 빌드그래들에 의존성추가하고
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	어플리케이션 프로퍼티에서 설정추가
	
	jpa를 사용하면 알아서 테이블도만들어줌
		spring.jpa.hibernate.ddl-auto=create
	그리고 스프링부트 2.4이상일땐
		spring.datasource.username=sa
	가 있어야함
	
	jpa는 기본적으로 인터페이스고,그걸 각 업체에서 구현해서 배포함
	jpa는 기본적으로 orm이고,사용할땐
	해당 데이터클래스에
		@Entity
	넣으면,이 데이터클래스를 테이블로 잡고,스프링에서 관리하게됨
	
	그리고 오토 인크리즈되는 id같은건
		@GeneratedValue(strategy = GenerationType.IDENTITY)
	를 위에 붙여주면 됨,원래도 db가 알아서 생성해주는거일때 이거붙이면됨
	
	그리고 이미 테이블이 있을떄,컬럼과 변수를 매핑시킬땐
		@Column(변수명="컬럼명")
	붙여주면됨
	
	그리고 jpa는
		private final EntityManager em;
	이거로 모든게 동작하기때문에 jpa 레포지토리에 넣고,생성자로 di받아야함 스프링한테
	
	저장할땐
		em.persist(member);
	이거만 하면됨
	조회할땐
		Member member = em.find(Member.class, id);
        return Optional.ofNullable(member);
	
	쉬프트알트컨트롤t는 리팩토링,이거로 변수리턴할때 두줄을 한줄로 합치거나하는걸 쉽게할수있음(변수인라인화)
	
	그리고 특수조회시엔
		return em.createQuery("select m from Member m", Member.class).getResultList();
	이런식으로 createQuery를 쓰는데,이건 표준sql이 아니라 객체를 대상으로 쿼리를 날리는거임(실제 구현상에선 sql을 쓰겠지만 윗단에서는)
	그래서 엔티티를 대상으로 나가고 ,조회대상도(*자리에 들어간거) 자기자신임
		
	조건쓸떄도
	    List<Member> res = em.createQuery("select m from Member m where m.name=:name", Member.class)
            .setParameter("name", name).getResultList();
        return res.stream().findAny();
	이런식
	이런 쿼리같은건 프라이머리키 대상이 아닌걸로 조회할때 적어야하고,프라이머리키면 그냥 find하면됨
		
	그리고 jpa를 쓸땐 항상 @Transactional이 있어야함
	그래서 서비스객체에 이걸추가해야함
	그리고 springconfig객체에서 em을 생성자로 받아야함
	
	스프링jpa는 레포지토리를 인터페이스로 설정하고,extends를
		extends JpaRepository<Member, Long>,MemberRepository//사용객체와 pk의 타입
	이렇게 인터페이스 다중상속을 받고
		public interface SpringDataJpaMemberRepo extends JpaRepository<Member, Long>, MemberRepository {
			@Override
			Optional<Member> findByName(String name);
		}	
	
	스프링jpa를 사용하면,인터페이스 구현체를 스프링이 만들어서,그냥 이렇게만 하면 crud와 서치가 자동으로 들어감
	그래서 그냥 가져다쓰면됨
	스프링컨피그에서 생성자로 di만 받고
	    @Autowired
		public SpringConfig(MemberRepository memberRepository) {
			this.memberRepository = memberRepository;
		}
	그리고 리포지토리 bean으로 구현도 할필요없음
	기본적으로 제공되는 메서드는
		findall,findall(sort),findall(Iterable<id>)
		save(이터레이터),
		flush(),
		saveAndFlush()
		deleteInBatch(이터레이터)
		deleteAllInBatch()
		getOne(ID)
	등이 있고,이외에 필요한건 직접 넣어야하는데,이때 함수의 이름을 가지고 알아서 구문분석 하는식으로
		findByName(String name12)->findBy Name(String name12)->select m from Member m.name12
	이런식으로 알아서 만듬
	즉,이름을 만드는 규칙을 알아야함
		
	그리고 복잡한 동적쿼리같은경우엔 Querydsl을 사용함
		
7.AOP		
	얘는 만약 모든 메소드에서 호출해야 할경우같을때,앞뒤에 프록시를 두고
		선딜프록시
		실제 메소드실행
		후딜프록시
	이런식으로 실행하는거임
	이러면 공통관심사항과 핵심관심사항을 분리할수있고,일단 모든메소드를 안건드려도됨
	즉 메소드를 두고,걔를 들렀다가 가는거임
	
	Aop클래스엔 클래스위에
		@Aspect
	를 넣어줘야함,그리고 스프링빈에 등록해야하니 컨피그에서 등록하던가 컴포넌트스캔쓰면됨(@Component)
	그리고 execute위에 @Around를 붙이고 적용범위를 패키지단위로 명시해주고
		@Aspect
		public class TimeTraceAop {
			@Around("execution(* rkrk.rkrkspring..*(..))")
			public Object execute(ProceedingJoinPoint joinPoint) throws Throwable {
				long start = System.currentTimeMillis();
				System.out.println("START:" + joinPoint.toString());
				try {
					//대상메인메소드실행
					return joinPoint.proceed();
				} finally {
					long finish = System.currentTimeMillis();
					long timems = finish = start;
					System.out.println("END:" + joinPoint.toString() + " " + timems + "ms");
				}


			}
		}
	execute를 만들고 조인포인트를 받은다음에,
		내가 할거 실행하고 
		return joinPoint.proceed();로 메인 메소드 실행하고
		aop남은거 실행하고
	이런식으로 프록시처럼 동작함(실제로 프록시패턴으로 만들어진듯)
	즉 가짜객체를 만든후 걔가 실제객체를 호출하는식으로 바뀌게됨
	그래서 프록시에서 할수있던거(메인메소드 실행안되게 막는다던지)는 다 가능함
	이게 di를 쓰니까 프록시도 쓸수있고 그런거
	
	
8.다음으로	
	
	
	
	
	
	
	
		