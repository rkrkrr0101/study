1.예제생성
	로그에서 시작시간을 알면 종료시간도 알수있음(둘뺴면되니까)
	
	쌩으로 로그찍을때는,하단에서 예외가 터지면,그대로 뒤에꺼가 다 무시되니 트라이캐치로 싸서 파이널리에 넣어두거나 트라이랑 캐치 각각넣어둬야함
	그리고 로그가 어플리케이션의 흐름을 바꾸면안되니,캐치에선 무조건 다시 같은예외를 던져야함
	
	필요없는건 다스킵

2.쓰레드로컬
	기본적으로 빈등록하면 따로 뭐 안해주면 싱글톤빈임
	그래서 만약 빈 내부에 뭐 값을 가지고있다면 바로 동시성문제터짐
	싱글톤은 여러쓰레드에서 공유하기때문에..
	이런 동시성문제는
		싱글톤의 인스턴스필드
		static의 필드
	등에 접근할때 발생(물론 모든곳에서 접근만하면(final이면) 상관없음)
	그래서 이런건,보통 스프링은 같은로직의 실행은 한쓰레드로 몰아주기때문에,쓰레드에 값을 저장하는식으로 해결할수있는데,이걸 쓰레드로컬이라고 함
	쓰레드로컬은,해당쓰레드만 접근할수있는 저장소임
	즉 싱글톤에서 쓰레드로컬을 사용하면,하나의 인스턴스라도 각 쓰레드별로 같은이름으로 다른 변수를 사용할수있는것
	이건 java.lang.ThreadLocal에 있음
	사용은
		private ThreadLocal< String> nameStore=new ThreadLocal<>();
		nameStore.set(name);
		nameStore.get();
	이렇게 쓰면됨
	그리고 주의해야할건,무조건 이걸썼으면 마지막에
		nameStore.remove()
	로 지워줘야함(보통 필터나 인터셉터에서 지워버리면되는듯)
	쓰레드는 생성비용이 비싸서,한번생성해서 돌려쓰는데,이미 반납한거 안에 안비워두면 다른애가 그거 그대로쓰면 바로 문제터짐


3.템플릿메서드와 콜백패턴(전략패턴포함)
	템플릿메서드패턴은, 메인로직을 제외한부분을 미리 메서드로 만들어두고,중간부분에 추상메소드를 박음
	이때 해당부분을 오버라이드해야하는 추상메서드로 뽑은다음,
	템플릿메서드에서 그걸 콜하고,실제 로직에서 추상메서드를 구현하는식으로 디자인하는 패턴임
	즉
		템플릿로직
		실제로직(추상메서드)
		템플릿로직
	이런식의 메서드를 가진 추상클래스를 생성해서,실제로직에선 추상클래스의 메서드를 구현하는식임
	즉 이런식으로 공통적인 부가기능이 있다면(트랜잭션,로그등)이렇게 뽑아낼수있음(변하는것과 변하지않는것을 분리해서 모듈화)
	즉 추상클래스안에 변하는부분과 변하지않는부분을 나눠서 메서드를 만들고,그걸 상속받아서 변하는부분만 구현하는식임
	실제로 사용할땐
	    AbstractTemplate template1=new SubClassLogic1();
        template1.execute();
	이런식으로 템플릿부분만 실행하면되고(변하는부분은 상속받아서 구현해뒀을테니)
	바꿀때도 묶어서 변경할수있음(케이스따라 오히려 강결합이라고 느껴질때도 잇긴하겟지만)
	
	이 템플릿메서드패턴의 단점은,클래스를 계속 만들어야한다는것,이건 익명내부클래스로 보완할수있음
	익명내부클래스를 사용하면,객체인스턴스를 생성하면서 동시에 생성할 클래스를 상속받은 자식클래스를 정의할수있음(한마디로 new쓰면서 만드는거)
        AbstractTemplate template2=new AbstractTemplate() {
            @Override
            protected void call() {
                log.info("익명내부2번");
            }
        };
	그거맞음 2학년떄본거
	
	좋은설계는,변경이 일어났을때 자연스럽게 보이게됨,이런식으로 템플릿메서드를 사용해서 단일책임원칙을 지키게 할수있어진거
	그래서 하나의변경으로 모든코드에서 수정이 가능해지게됨
	
	템플릿메서드는,추상클래스로 알고리즘의 골격을 정의하고,일부단계를 하위(상속받는)단계로 연기해서,알고리즘의 구조를 바꾸지않고 특정부분을 재정의할수있어짐
	즉 상속과 다형성으로 문제를 해결하는것
	단,상속을 사용하기때문에 상속의 단점을 그대로 들고감(강결합,사용하든말든 컴파일시점에 자식클래스에 부모클래스의 모든 코드가 적히는것)
	특히 자식클래스는 부모클래스의 기능을 전혀 사용하지않는데,단지 패턴을위해 부모클래스를 상속받아야함
	
	그래서 이런 비슷한역할을 하면서,상속의 단점을 제거하는게 스트레티지(전략)패턴임(상속보다 위임)
	전략패턴은,변하지않는부분을 컨텍스트에 두고,변하는부분을 인터페이스를 만들고,해당인터페이스를 구현하게해서 문제를 해결함
	즉 상속이 아닌,위임으로 문제를 해결하는것
	즉,context가 템플릿역할,인터페이스가 call같은 변하는 알고리즘역할을 함(사실상 템플릿메서드랑 거의똑같음)
	
	이건,그냥 인터페이스를 만들고,그 인터페이스를 컨텍스트클래스에서 di받아와서,
	템플릿부분에 그 인터페이스의 call을 호출하면됨(사실 상속안쓴다는거말곤 똑같은느낌)
	이 전략패턴의 핵심은,컨텍스트(템플릿)는 strategy인터페이스에만 의존한다는것,
	그래서 구현체를 변경하거나 새로만들어도 컨텍스트에선 영향을 받지않고,구현체도 인터페이스에 변경만 없으면 컨텍스트의 영향을 받지않음
	
	스프링에서 di에 사용하는 방식이 이 전략패턴임
	
	전략패턴도 익명내부클래스를 사용할수있음
        Strategy strategyLogic1 = new Strategy() {
            @Override
            public void call() {
                log.info("비즈니스로직1 실행");
            }
        };
        ContextV1 context1 = new ContextV1(strategyLogic1);
        context1.execute();
	그냥똑같음(인터페이스를 인코드로 구현하는거니까)
	아예 람다식으로 박아도됨(구현해야할 대상메서드가 하나일경우,따로표시안해도 알아서 거기에 박음)
	    ContextV1 context1 = new ContextV1(() -> log.info("비즈니스로직1 실행"));
        context1.execute();
	이렇게
	
	이런식으로 하는게 선조립 후실행(컨텍스트의 내부필드에 인터페이스를 두고 di받는)방식임
	실행하기전에 미리 조립(di받는거)해두고,그 뒤에 사용하는것(어플리케이션 로딩시점에 다 끝내놓고 사용만하는느낌)
	그래서 실행이 편하다는게 장점임(그냥 execute만 실행하면되니까)
	이거의 단점은,한번 조립한 후에는 전략의 변경(인터페이스구현체의 변경)이 번거로움
	세터를 사용해서 변경해도되지만,싱글톤으로 사용하면 동시성이슈등 고려해야할게 많아짐(변경하고있는데 이미사용하고있거나)
	
	그래서 아예,필드에 넣고 di받는게 아닌,파라미터로 전략을 받아서 실행시키는,
	즉 한번실행할때마다 실행자가 직접 전략을 가져오는 방식으로 쓸수도있음
		public void execute(Strategy strategy){...}
	이렇게 걍 파라미터로 받는거임,즉 실행이 좀 더 귀찮아진 대신 변경이 편해짐(그냥 옆그레이드라고 보면됨 상황따라고르는)
        ContextV2 context = new ContextV2();
        context.execute(new StrategyLogic1());
	이렇게 실행하면됨(아예 람다식으로 넣어도될거고)
        ContextV2 context = new ContextV2();
        context.execute(()->log.info("abc"));
	이렇게
	이렇게하면 컨텍스트를 실행할때마다 전략을 인수로 받음
	그래서 좀 더 유연하게 원하는전략을 변경할수있음
	단점으론 쓸때마다 전략을 계속 지정해줘야한다는거(실행이 귀찮아짐)
	
	그래서,그냥 템플릿을 쓰고싶으면(로그넣는다던가) 실행시에 전략넣는게좋고,여러개중 하나를 끝까지쓸거면 di받는게 나음(일단 이게 정석이긴함)
	디자인패턴에서 중요한건,의도임
	의도만 구현하면 다 같은패턴임
	
	이렇게 파라미터로 전략을 넘기는패턴을,스프링에선 템플릿콜백패턴이라고 부름(gof패턴은 아님)
	그래서 xxxTemplate라는게 있으면 다 템플릿콜백으로 만들어졌다고봐도됨
	콜백은 다른코드로 넘기는 실행가능한 코드조각을 말함
	
	즉,콜백은 코드가 콜은 되는데,넘겨준곳의 뒤(백)에서 실행된다고 보면됨
	자바에서 실행가능한 코드를 인수로 넘길땐 객체가 필요하고,자바8부터는 람다를 사용할수있음
	이렇게 콜백쓸땐 람다쓰는게 편하고,만약 여러곳에서 똑같이 쓰는거있으면 별도의 클래스로 뽑아도되고


4.프록시패턴과 데코레이터 패턴
	스프링에선 @Controller이나 @RestController이 어노테이션이 있어야 해당 클래스를 컨트롤러로 인식하고,그래야 http url매핑이 동작함
	그래서 인터페이스에 이걸 박아둬야함(인터페이스를 사용할거면)
	그리고 인터페이스에선 @RequestParam을 넣어줘야 정상적으로 파라미터매핑해줌
	
	객체에서 요청하는객체는 클라,요청을 처리하는객체는 서버가 됨
	이때,클라가 서버를 직접 호출하고,결과를 직접 받으면 이건 직접호출임
	근데,클라가 요청을 다른 대리자를 통해서 간접적으로 요청할수있는데,이걸 프록시라고 함
	이때 프록시를 사용하면,여러 추가적인 일을 할수있음
		접근제어,캐싱(이미있는거는 바로반납)
		부가기능추가(로깅추가)
		프록시체인(프록시를 체인타고 갈수있음,이건 그렇게안중요함)
	이런 이점이 있음
	근데 객체에서는,중요한게 같은 인터페이스를 사용해야(프록시와 실제객체가),클라가 프록시에 요청했는지 서버에게 요청했는지 까지 감출수있음
	그래서,서버와 프록시는,서버를 프록시로 바꿔도  클라코드를 변경하지않고 동작할수있어야하고(di로),그러니 같은인터페이스를 사용해야함
	즉 클라는 인터페이스에만 의존함,그러니 di를 통해 대체할수있음
	
	이때 프록시는 의도에 따라 2가지 패턴으로 분류됨(프록시랑 프록시패턴은 다름)
		접근제어(프록시패턴)
			캐싱
			권한에따른 접근차단
			지연로딩(jpa그 콜해야 호출하는 그런거)
		부가기능추가(데코레이터패턴)
			원래서버기능에 더해 부가기능수행(로그추가,응답값변형)
	이렇게 나눠짐
	이렇게 둘다 프록시를 사용하지만,의도에따라 구분됨(생긴거도 거의똑같음)
	그리고 프록시라는 개념은,클라와 서버라는 개념이 있는 모든곳(객체,서버등)에서 같은느낌으로 구현할수있음 규모차이만 있을뿐
	
	보통 프록시패턴을 사용하면,클라는 프록시를 의존하고(인터페이스로 di받으니 좀 틀리긴하지만),프록시는 실제객체를 의존하는 그림이 나옴
	그래서 프록시패턴의 핵심은,구현체와 클라이언트코드를 전혀 변경하지않고,di만을 활용해서 접근제어를 하는거임
	
	데코레이터패턴은,프록시를 사용해서 부가기능을 추가하는 패턴임
	즉 이거도 프록시패턴이랑 생긴건똑같은데,하는일만 좀 다름
	데코레이터는 계속 체인을 탈수있는데,이러면 계속 부가기능을 추가하는것(각 데코레이터 하나마다 기능하나씩넣는게 단일책임원칙에 좋으니)
	
	여기서 데코레이터에서 실제객체를 받을 필드를 만들고,생성자를 받는거에 계속 중복이 일어나기도 하고,실제객체랑 데코레이터를 구분하기위해 사용되는게
	데코레이터용 추상클래스임(실제객체를 받을 필드를 속성으로 가지고있는)
	이거까지 있는게 gof에서의 데코레이터임
	
	이렇게 인터페이스가 있으면 편하게 넣을수있음
	스프링에서도 인터페이스가 있으면,그냥 인터페이스 구현하고,매개변수로 그걸 집어넣은 프록시를 메인빈으로 설정한 설정파일을 넣으면됨
	이때 중요한건,di받을때 무조건 프록시를 호출해야함
		@Bean
		public OrderServiceV1 orderService(LogTrace logTrace){
			OrderServiceV1Impl serviceImpl=new OrderServiceV1Impl(orderRepository(logTrace));
			return new OrderServiceInterfaceProxy(serviceImpl,logTrace);
		}
		@Bean
		public OrderRepositoryV1 orderRepository(LogTrace logTrace) {
			OrderRepositoryV1Impl repoImpl=new OrderRepositoryV1Impl();
			return new OrderRepositoryInterfaceProxy( repoImpl,logTrace);
		}
	이렇게 등록된 프록시를 호출해야함
	즉 프록시만 등록하고,실제객체는 등록하면 안됨
	어짜피 이래도 싱글톤이니까 실제객체도 하나만 생성돼서(정확히는 생성을 한번만 거쳐서)상관없음
	이렇게되면 실제객체는 스프링이 관리하지않지만,어짜피 프록시를 통해서만 접근할거니까 상관없어지는거
	
	그리고 인터페이스가 없는,구체클래스만 있는곳에 프록시를 적용할때는 클래스기반 프록시를 적용할수있음
	자바는 인터페이스를 구현하든,클래스를 상속하든 상위타입만 맞으면되니까(다형성),구현클래스를 상속받아서 프록시를 만들겠다는것
		public class TimeProxy extends ConcreteLogic{}
	이렇게 상속받고 실제클래스 di받아서 해당메서드 오버라이드한다음
		프록시에서할일
		String result = concreteLogic.operation();
		프록시에서할일
		return result;
	이런식으로 똑같이 하면됨,구현대신 오버라이드하는것
	그리고 똑같이
	    ConcreteLogic concreteLogic = new ConcreteLogic();
        TimeProxy timeProxy=new TimeProxy(concreteLogic);
        ConcreteClient client = new ConcreteClient(timeProxy);
	이렇게 집어넣어버리면됨(어짜피 상속받았으니 부모자리에 대신들어갈수있으니까)
	
	그리고 이때 해당부모클래스가 생성자가 있어서, 부모클래스를 호출해야하면(super()),어짜피 프록시에선 아무것도 안할거니까
		super(null)
	하면됨
	이렇게 클래스기반프록시는 이런 귀찮은게 좀있음
		super(null)을 쓰거나 부모클래스에서 기본생성자가 있어야함
		클래스에 final이 붙으면 상속이 불가능
		메서드에 final이 붙으면 오버라이딩이 불가능
	그래서 인터페이스가 사용하기 더 편한데,인터페이스의 단점은 인터페이스를 일단 만들어야한다는것(캐스팅관련해서도 문제가 하나 더 있긴함)
	
	실무에선 이 두상황이 둘다 사용되기때문에,둘다 알고있어야함
	
	근데 이렇게만들면,기존코드를 안건드려도되긴하는데,어짜피 하는일은 똑같은데,대상클래스마다 하나씩 프록시 클래스를 만들어야함(클래스100개면 100개)
	이걸 클래스 하나로 다 땜빵치는게 동적프록시임




5.동적프록시
	자바에서 기본으로 제공하는 jdk동적프록시나,cglib같은 프록시생성 오픈소스(바이트코드변경)를 사용해서 프록시 객체를 동적으로 찍어낼수있음
	근데 기본적으로 코드짤땐 불안정성이 높아서 잘 사용되지않고,다른사람들이 프레임워크같은거로 만들어둔걸 가져다쓰게되지만,어떻게 동작하는지 알고는 있어야함
	
	이 jdk동적프록시를 이해하려면,자바의 리플렉션을 이해해야함
	기본적으로 다똑같고 중간에 호출하는 메서드가 다르면 밖으로 뽑기 빡센데,이부분을 동적으로 처리하는게 리플렉션임(람다로 처리할수있긴함)
	이건 클래스나 메서드의 메타정보를 사용해서 동적으로 호출하는것
        Class classHello = Class.forName("hello.proxy.jdkdynamic.ReflectionTest$Hello");

        Hello target=new Hello();
        Method methodCallA = classHello.getMethod("callA");
        Object res1 = methodCallA.invoke(target);
        log.info("res1={}",res1);
	이런식으로 무슨메서드를 호출할지를 스트링으로 받아서 호출하는거임,이러면 걍 텍스트 파라미터로 받을수있으니 동적지정이 가능해짐(한번 추상화가 된느낌)
	즉
	    private void dynamicCall(Method method,Object target) throws Exception {
			log.info("start");
			Object res1 = method.invoke(target);
			log.info("result={}",res1);
		}
	이런식으로 해당클래스와 호출할메서드를 받아서 돌리면되는거
	즉 클래스나 메서드를 추상화해서 메타정보 바꿔치기로 공통화하는거임
	단,이건 런타임에 동작해서(스트링쓰니까) 컴파일오류가 나지않고,무조건 실행시켜서 에러를 찾아야해서(런타임오류),가급적이면 사용하지않는게 좋음
	보통 프레임워크만들때나,매우 일반적인 공통처리가 필요할떄,부분적으로 주의해서 사용해야함(막 프록시클래스를 1000개만들어야한다 이러면 사용할수있긴함)
	
	동적프록시를 사용하면,런타임에 개발자대신 프록시객체를 만들어주고,원하는 실행 로직을 지정할수 있음
	그리고 jdk동적프록시는,인터페이스 기반이라서 인터페이스가 필수임
	이건 InvodationHandler인터페이스를 구현해서 작성하면되는데,제공되는 파라미터는
		Object proxy  프록시 자신
		Method method 호출한 메서드
		Object[] args 메서드 호출할때 전달한 인수
	이 3개를 받을수있음
	그리고 invoke를
		private final Object target; //생성자로 해당클래스 받는용도
		@Override
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
			log.info("타임프록시 실행");
			long startTime = System.currentTimeMillis();
			
			Object invoke = method.invoke(target, args);
			
			long endTime = System.currentTimeMillis();
			long resTime=endTime-startTime;
			log.info("resTime={}",resTime);
			return invoke;
		}
	이런식으로 구현하면됨
	사용은
	    AInterface targe1t=new AImpl();
        TimeInvocationHandler handler1 = new TimeInvocationHandler(target1);
        AInterface proxy1 =(AInterface) Proxy.newProxyInstance(AInterface.class.getClassLoader(),
                new Class[]{AInterface.class}, handler1);
        proxy1.call();
		
		BInterface target2=new BImpl();
		TimeInvocationHandler handler2 = new TimeInvocationHandler(target2);
        BInterface proxy2 =(BInterface) Proxy.newProxyInstance(BInterface.class.getClassLoader(),
                new Class[]{BInterface.class}, handler2);
        proxy2.call();
	이런식으로 핸들러를 만들어서 구현체를 넣고,인터페이스기반으로 프록시를 생성함
	이렇게 TimeInvocationHandler라는 핸들러 하나만 가지고,저안에 있는 로직을 각 구현체마다 바로 적용하고,걔는 또 그대로 할일하는거
	
	좀더 자세하게는,수동으로 프록시클래스 만드는거랑 런타임에서 만들어진 클래스 결과는 똑같은데,
	어짜피 각 프록시클래스마다 구현체메서드콜을 제외한 나머지가 다 똑같으니,
	그걸 한군데다 모으고 클래스레벨이 아닌 코드레벨에서 프록기기반코드(핸들러)를 기반으로 즉석에서 동적으로 프록시클래스를 만들어서 사용하겠다!라는 컨셉인거임
	
	즉 이렇게 즉석으로 인터페이스기반 동적프록시를 생성하고,그 결과를 반환할수있음
	이렇게하면 프록시를 여러개안만들어도되고,부가기능로직도 한군데에 몰아서 단일책임원칙도 지킬수있게됨
	
	그리고 method에서는
		String message = method.getDeclaringClass().getSimpleName() + "." + method.getName() + "()";
	이렇게 클래스이름과 호출한메서드이름도 받을수있음
	그리고 빈등록은
		@Bean
		public OrderRepositoryV1 orderRepositoryV1(LogTrace logTrace){
			OrderRepositoryV1 orderRepository = new OrderRepositoryV1Impl();

			return (OrderRepositoryV1) Proxy.newProxyInstance(OrderRepositoryV1.class.getClassLoader(),
					new Class[]{OrderRepositoryV1.class},
					new LogTraceBasicHandler(orderRepository,logTrace));
		}
	이렇게 등록하면됨(프록시로 실제객체 싸서)
	
	근데 이렇게하면,문제는 클래스단위로 전체를 싸버리기때문에,
	특정메서드는 적용하기싫을경우라도 전부 적용이 되는데,
	이것도 필터써서 특정메서드는 지나가게하거나 특정메서드만 로직타게하거나 할수있음
	이건
		private final String[] patterns;
	이렇게 패턴 생성자로 받고
	    String methodName = method.getName();
        if(!PatternMatchUtils.simpleMatch(patterns,methodName)){
            return method.invoke(target,args);
        }
	invoke 최상위에 패턴에걸리면 그냥 위임하고 지나가게하면됨(PatternMatchUtils.simpleMatch()를 쓰면,쌍방향*로,*ab*==abc 이렇게 들어감)
	
	이 jdk동적프록시의 한계는,인터페이스가 꼭 있어야함
	그래서 클래스만 있는경우에 동적프록시를 적용할땐,일반적방법으론 어렵고,
	cglib(코드제너레이터라이브러리)라는 바이트코드를 조작하는 특별한 라이브러리를 써야함
	
	cglib는 외부라이브러리지만,스프링쓰면 스프링에서쓰기때문에 포함되어있음
	그리고 일반적으로 cglib를 직접 사용하는일은 거의없으니(보통 프록시펙토리사용)그냥 개념만 알고가자
	
	이건 MethodInterceptor를 구현하면됨
	여기서 받는 매개변수는
		obj cglib를 적용할 객체
		method 호출된 메서드
		args 메서드를 호출하면서 전달된 인수
		proxy 메서드호출에 사용
	이거도 동적프록시랑 코드는똑같음
	    @Override
		public Object intercept(Object obj, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
			앞로직
			Object invoke = methodProxy.invoke(target, args);
			뒷로직
			return invoke;
		}
	이렇게 똑같이쓰는데,아마 Object[]가 objects가 기본이름일텐데 저게 args라서 이름바꿨음
	그리고 method로 호출해도되는데,methodProxy쓰면 더 빠르대
	사용은
	    ConcreteService target=new ConcreteService();

        Enhancer enhancer=new Enhancer();
        enhancer.setSuperclass(target.getClass());
        enhancer.setCallback(new TimeMethodInterceptor(target));
        ConcreteService proxy =(ConcreteService) enhancer.create();
        proxy.call();
	이렇게 인헨서만들고,
	뭘로만들건지 구체클래스를 클래스타입지정해주고(상속으로 처리함),
	콜백뭐쓸건지 지정해주고(아까만든 인터셉터넣어주면됨),
	생성한다음 그거로 메서드부르면됨
	
	그리고 cglib는,클래스기반프록시라 상속을 쓰기때문에 제약이 있음
		부모클래스에서 기본생성자가 있어야함(자식클래스를 동적으로생성해야해서)
		클래스에 final이 붙으면 상속이 불가능해서 예외발생
		메서드에 final이 붙으면 오버라이딩이 불가능해서 프록시로직이 동작하지않음(예외는안뜸)
	이런것들을 처리해줘야함
	
	그래서,인터페이스가 있을땐 동적프록시를 쓰고,그렇지않으면 cglib를 적용하려고 하거나,
	아니면 둘다쓸건데 둘다만들어야하는상황이 싫거나(중복),
	특정 조건이 맞을때 프록시로직을 적용하고싶으면
	프록시팩토리를 사용하면됨
	
6.스프링이 지원하는 프록시
	프록시팩토리는,인터페이스가 있을땐 jdk동적프록시,없으면 cglib를 자동으로 선택해주고(그러니 코드는 한번만만들어도되고,설정변경가능 무조건cglib같은),
	필터기능도 지원해주는 스프링의 기능임
	맨날 스프링이 하던,추상화해서 싸주는거임
	
	이걸 사용할땐,advice(MethodInterceptor,얘가 어드바이스를 상속받고있음)를 구현하면 알아서 스프링이 조건맞춰서 선택해주고,
	필터는 pointcut으로 일관성있게 해결할수있음
	
	즉 프록시생성은 프록시팩토리로 알아서해주고,우리는 어드바이스만 구현하면 알아서 인터페이스 깡클래스 상관없이 알아서 선택하고,
	포인트컷으로 필터를 적용할수있음
	
	MethodInterceptor안에 MethodInvocation이 있는데,여기안에 현재프록시객체,args,메서드정보등이 전부 다 들어있음
	그래서 따로 타겟받을필요도없음,이미 프록시팩토리만들때 타겟을 넘겨야하고,그걸 저안에 넣어뒀기때문
	이때 org.aopalliance.intercept.MethodInterceptor를 받아서
		앞로직
		Object invoke = invocation.proceed();
		뒷로직
		return invoke;
	이렇게 실행시키면됨(그냥 args랑 타겟이랑 메서드명이랑 다 invocation이 가지고있으니까 그거 바로실행시키는메서드임)
	
	사용은
	    ServiceInterface target=new ServiceImpl();
        ProxyFactory proxyFactory = new ProxyFactory(target);
        proxyFactory.addAdvice(new TimeAdvice());
        ServiceInterface proxy =(ServiceInterface) proxyFactory.getProxy();
        proxy.save(); //클래스나 인터페이스의 메서드 그대로 호출하면됨
	이렇게 프록시팩토리에 타겟넣고,어드바이스(내가 추가할로직)넣고 프록시를 생성한후에 메서드호출하면됨(원래객체쓰는거랑 똑같이쓰면됨)
	그리고 프록시팩토리를쓰면,
		AopUtils.isAopProxy(proxy)
	이렇게 프록시가 적용됐는지도 확인할수있고,
		AopUtils.isJdkDynamicProxy(proxy)
		AopUtils.isCglibProxy(proxy)
	jdk동적프록시인지 cglib프록시인지도 알수있음(이 3개는,프록시팩토리를 써서 생성했어야만 알수있음)
	그리고 무조건 cglib로 만들고싶으면
		proxyFactory.setProxyTargetClass(true);
	추가해서 프록시생성하면됨(나름 쓸일이 있다고함,특히 aop쓰면 스프링이 무조건 이거 켜두고 만들어서,무조건 cglib기반임)
	
	포인트컷은 어디에 부가기능을 적용할지 적용하지않을지 판단하는 필터링 로직임,클래스와 메서드이름으로 필터링함
	어드바이스는 프록시가 호출하는 부가기능,단순하게 프록시로직이라고 생각하면됨
	어드바이저는 하나의 포인트컷과 하나의 어드바이스를 합쳐둔거
	
	즉 포인트컷으로 어디적용할지를 선택하고,어드바이스가 적용할 로직,어드바이저는 이 둘을 합쳐둔거
	이렇게 필터와 로직을 분리해서,단일책임원칙을 지킬수있음
	
	작동로직은,일던 포인트컷을 들러서 여기가 맞나 if문으로 체크하고,맞으면 어드바이스실행후 타겟로직실행,아니면 그냥 바로 타겟로직실행하는식
		메서드호출-프록시.포인트컷에서 대상확인-대상이면 어드바이스,아니면 타겟인스턴스호출
	이 어드바이저는
        DefaultPointcutAdvisor advisor = new DefaultPointcutAdvisor(Pointcut.TRUE, new TimeAdvice());
        proxyFactory.addAdvisor(advisor);
	이렇게 만들어서 넣으면됨(Pointcut.TRUE는 항상 참인,즉 모든곳에 어드바이스를 적용하는거)
	프록시팩토리에 어드바이저는 필수인데,만약 addAdvice로 넣어도,안에서 포인트컷 true로 해서 어드바이저를 생성해서 넣음

	포인트컷은,기본적으로 스프링이 만들어주는걸 보통 사용하는데,직접 만들수도 있긴함
	직접구현할땐 classFilter과 MethodMatcher을 둘 다 구현하고,pointcut으로 싸면됨
	이게 둘다 true를 반환해야 어드바이스를 적용하는거
	어짜피 만들일없는데 대충보고넘어가자
	
	스프링에서는 포인트컷을 대부분 제공함
	 가장 쉬운건 NameMatchMethodPointCut임,이름그대로 이름매칭으로 적용하는거
	    NameMatchMethodPointcut pointcut = new NameMatchMethodPointcut();
        pointcut.setMappedNames("save");
        DefaultPointcutAdvisor advisor = new DefaultPointcutAdvisor(pointcut, new TimeAdvice());
	이런식으로 사용하면됨
	보통 많이쓰는건 AspectJExpressionPointCut임,이건 aspectJ표현식으로 사용하게됨,이거만 사용한다고보면됨
	이건 나중에 나올예정
	
	그리고 하나의 타겟에 여러 어드바이스를 적용하려면,
	가장쉬운방법은 프록시를 여러개만들어서 프록시체인을 거는건데,이건 프록시를 여러번 생성해야하는문제가 있음(각 어드바이저마다 하나의프록시)
	이건 걍 프록시팩토리 2개만들고,처음은 타겟,두번째는 프록시1을 넣는거,이러면 프록시체인이 걸리니까
	
	그래서 스프링에선 하나의프록시에 여러 어드바이저를 넣을수있음
        DefaultPointcutAdvisor advisor1 = new DefaultPointcutAdvisor(Pointcut.TRUE, new Advice1());
        DefaultPointcutAdvisor advisor2 = new DefaultPointcutAdvisor(Pointcut.TRUE, new Advice2());
        proxyFactory1.addAdvisors(advisor1,advisor2);
        ServiceInterface proxy1 = (ServiceInterface)proxyFactory1.getProxy();	
	이렇게 addAdvisors넣으면됨,각 어드바이저는 각각 자기가 적용할거만 적용됨,즉 123이 있을떄 2번만 적용되거나 하는게 가능
	단,순서대로 동작하니까(프록시체인이 이순서대로걸리니까)이건 조심해서 순서맞춰야함(2번,1번,타겟,1번후,2번후 순서)
	즉 뒤에서부터 먼저 동작함 스택생각하면됨
	즉 이렇게하면 프록시는 하나만만들고 어드바이저만 여러개만들어서 하나의 프록시에 여러 어드바이저가 적용됨
	즉 프록시가 하나고,프록시가 가지고있는 모든 어드바이저에 대해 foreach돌리는느낌
	
	스프링 aop도,aop적용수만큼 프록시가 생성되는게 아닌,프록시는 하나만 만들고 거기에 여러 어드바이저를 적용함
	
	이렇게하면 일단 프록시 생성하고,어떤 부가기능을 어디에 적용할지 명확히 지정할수있게됐는데,설정이 매우귀찮고 컴포넌트스캔을 사용못한다는 단점이 있음
	이걸 해결하는게 빈 후처리기임
	
7.빈 후처리기
	빈후처리기는 빈 등록 직전에 뭔가 조작을 하고싶으면 빈 후처리기를 사용하면됨
	스프링빈등록은
		빈을생성
		빈을 후처리기에 전달
		후처리기는 빈저장소에 리턴값을 넣음(없으면 그냥 바로리턴)
	이순서로 작동함
	이거로 빈을 생성한후에 프록시를 끼워버린다던가(빈을 변형),아예다른객체를 넣는다던가 ,빈을 생성한후에 로그를찍는다던가 하는게 가능해짐
	그래서 컴포넌트스캔으로 등록되는걸 후처리기를 통해 건드릴수있음
	
	이 빈 후처리기는,BeanPostProcessor인터페이스를 구현해서 스프링빈으로 등록하면됨
	이떄
		postProcessBeforeInitialization //postConstruct가 발생하기전에 호출
		postProcessAfterInitialization  //postConstruct가 발생한후에 호출
	로 나뉘어지고,디폴트메서드니까 필요한거만 구현하면됨
        @Override
        public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
            log.info("beanName={} bean={}",beanName,bean);
            if (bean instanceof A){
                return new B();
            }
            return bean;
        }	
	이런식으로 그냥 객체 리턴하면됨,프록시넣는거도 이런식
	이런식으로하면 해당빈이름으로 바꿔치기해서 리턴한게 들어가니까,바꿔치기를 할수있는거
	이렇게하면 A클래스로 빈을 찾아도 안나오게됨
	이런식으로 컴포넌트스캔의 대상들도 건드릴수있게됨
	
	그리고 @PostConstruct도 이 빈 후처리기를 사용해서 동작함
	
	프록시적용할떄도 그냥 빈후처리기 하나 등록해두면,모든애들이(컴포넌트스캔포함) 프록시로 싸서 등록시킬수있고,따로 설정도 안해도됨
	이때 패키지로 거르려면
		private final String basePackage;
		private final Advisor advisor; //이2개는 생성자로받으면됨
		
	    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
			String packageName = bean.getClass().getPackageName();
			if(!packageName.startsWith(basePackage)){
				return bean;
			}
			ProxyFactory proxyFactory = new ProxyFactory(bean);
			proxyFactory.addAdvisor(advisor);
			Object proxy = proxyFactory.getProxy();
			return proxy;
		}
	이런식으로 거르면되고(걸러야하는건 생성자스트링으로 받으면됨)
	이렇게되면 설정파일에서 프록시세팅중복을 없앨수있음(그냥 세팅만하면됨)
	그리고 이런식으로 프록시적용할때 무조건 거르긴해야함
	스프링부트가 기본세팅하는빈중에 프록시를 못만드는애도있고,애초에 이렇게 다 프록시를 박는거도 비효율적이니
	
	애초에 포인트컷이 있으니 포인트컷을 써도됨
	이 포인트컷을 사용한 빈 후처리기(프록시등록을 위한)이 스프링엔 이미 있음
	여기서 포인트컷은,이미 클래스,메서드단위 필터가 있기때문에
		프록시 적용대상여부를 체크해서 꼭 필요한곳에만 프록시를 적용(프록시생성시,클래스필터사용)
		프록시의 대상메서드에 어드바이스를 적용해야할지 판단(프록시내부,메서드필터사용)
	두가지 일을 함,즉 두군데서 다 대상체크를함(클래스기반,메서드기반 따로따로)
	
	이 스프링이 주는 빈후처리기를 쓸땐 빌드그래들에
		implementation 'org.springframework.boot:spring-boot-starter-aop'
	추가해야함
	이러면 aspectJ 관련 라이브러리들을 등록하고,aop관련클래스들을 스프링빈에 등록함
	이러면 AnnotationAwareAspectJAutoProxyCreator이라는 빈 후처리기가 자동으로 등록되는데,얘는 프록시를만드는애임
	얘는 스프링빈으로 등록된 어드바이저들을찾아 프록시가 필요한곳에 자동으로 프록시를 적용해줌(어드바이스랑 포인트컷이 있으니,이것만가지고있어도됨)
	즉 어드바이저만 스프링빈에 등록하면됨(얘는 어드바이저뿐아니라 @Aspect도 자동으로 인식해서 프록시를만들고 aop를 적용해줌,즉 aop도 얘담당)
	
	얘의 동작과정은
		우리가 어드바이저 스프링빈으로 등록
		빈후처리기가 모든 어드바이저 빈 조회해서 자동프록시생성기 init
		스프링이 객체생성후 프록시생성빈후처리기(자동프록시생성기)에 넣어서 클래스기반대상체크+객체의 모든메서드를 포인트컷에 하나하나매칭
			그래서 메서드중 하나라도 만족하면,프록시적용대상이 됨(클래스단위로 프록시걸어야하는데 다른메서드가 대상아니면 걍 어드바이스적용안하면되니까)
		맞으면 프록시끼워서 컨테이너에 프록시빈 등록,아니면 그냥 빈 반환
	이렇게됨
	그러니까 어드바이저만 등록하면
	    @Bean
		public Advisor advisor1(LogTrace logTrace) {
			NameMatchMethodPointcut pointcut = new NameMatchMethodPointcut();
			pointcut.setMappedNames("request*","order*","save*");
			LogTraceAdvice advice = new LogTraceAdvice(logTrace);
			return new DefaultPointcutAdvisor(pointcut,advice);
		}
	끝임
	
	이렇게 그냥 메서드이름으로하면,일반적인 이름으로 잡으면 막 스프링이 만들어둔거도 다같이 걸려버림
	그래서 패키지로 1단계로 거르고,2단계로 메서드로 거르는게 필요함
	이게 AspectJ표현식이고,이걸 사용하는게 AspectJExpressionPointCut임(실무에선 이거만씀)
	이건
	    AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();
        pointcut.setExpression("execution(* hello.proxy.app..*(..))");
	이런식으로 쓰는데,표현식은 뒤에서 자세히나옴
	대충 
		* ->와일드카드
		hello.proxy.app.. ->저위치부터 해당패키지와 하위패키지
		*(..) ->모든메서드(*) 파라미터는 상관없음((..))
	이런거임
	그래서 특정대상제외하려면
		execution(* hello.proxy.app..*(..)) && !execution(* hello.proxy.app..noLog(..))
	이렇게 noLog는 제외할수도있음
	
	그리고 이렇게 어드바이저가 하나의 클래스에 여러개 적용된다고 하더라도,프록시는 하나만 생성됨
	프록시팩토리에선 내부에 어드바이저를 배열로 가질수있기때문에 그냥 그거 포이치돌리는식으로 동작시키는게 싸기때문
	그래서 시작할때 클래스의 포인트컷을 만족하는 모든 어드바이저를 하나의 프록시에 때려박고,그 프록시만 둘러싸버림
	그래서 모든 어드바이저적용대상이 아니어야 프록시가 생성되지않고 깡빈으로 등록되게됨
	이건 aop도 동일하게 동작함
	
	
8.@Aspect AOP	
	스프링에선 @Aspect를 붙여서 포인트컷과 어드바이스로 구성된 어드바이저를 생성할수있음
	일단 클래스에
		@Aspect
	붙이고
	로직은
		@Around("execution(* hello.proxy.app..*(..)")
		public Object execute(ProceedingJoinPoint joinPoint)throws Throwable{
			
		}
	이안에 쓰면되는데,@Around가 포인트컷이고 메서드가 어드바이스라고 생각하면됨
	@Around가 붙은메서드를 어드바이저로만드는느낌이라 그래서 한클래스에서 2개도만들어짐
	안에서 로직쓸때도
			앞로직
		    String message = joinPoint.getSignature().toShortString(); //메서드명을 뽑고싶을땐 getSignature
            status = 로깅로직(message);
            Object request = joinPoint.proceed(); //똑같이 proceed사용하면됨
			뒷로직
	이렇게 그대로쓰면됨,즉 포인트컷과 어드바이스를 한 클래스안에서 어노테이션만으로 어드바이저로 만들어 쓸수있다는것
	이때
		joinPoint.getTarget() //실제호출대상
		joinPoint.getArgs()//매개변수
		joinPoint.getSignature()//호출메서드
	이렇게 얻을수있음
	그리고 빈등록만 해주면됨(컴포넌트스캔으로하던가 수동으로하던가 상관없음)
	
	이건 사실,자동프록시생성기(AnnotationAwareAspectJAutoProxyCreator)가,
	이 @Aspect를 찾아서 자동으로 어드바이저로 바꾸고 빈으로등록해줌
	그래서 AnnotationAware이 이름에 있는거
	그래서 어드바이저를 만들고나면 동작은 똑같음
	
	이렇게 어플리케이션의 여러기능들에서 비슷하게 관심이 있는걸 횡단관심사(로깅,트랜잭션등)라고 하고,aop는 이 횡단관심사를 해결해줌
	
9.스프링 aop 개념
	어플리케이션로직은 핵심기능과 부가기능으로 나눌수있음
	핵심기능은 해당객체가 제공하는 고유기능(결제모듈에서 결제같은)이고
	부가기능은 핵심기능을 보조하기위해 제공되는기능(결제모듈에서 트랜잭션설정,로그남기기)임
	
	여기서 핵심기능은 만들어야하지만,보통 부가기능은 여러 모듈에 걸쳐,똑같이 사용되는경우가 많은데 따로 뭘 안하면,
	한 기능안에 여러 기능들이 섞이고(단일책임원칙위반),중복이 발생함	
	이런건 메서드로 뽑기 어려울수도있고(핵심기능을 감싸야하면),
	일단 메서드로 뽑았다고해도 메서드호출을 하긴해야하니까 이것도 중복이고,trycatch가 들어가면 더복잡해지는데,
	oop로는 이런걸 해결하기가 어려움
	
	이런 여러모듈에 걸쳐서 사용되는 부가기능은 횡단관심사가 되고,이런것들을 쉽게 처리하는게 aop임(프록시를 싼게 aop니까,프록시도 맞긴하지만)
	
	애스펙트는 이런 부가기능(어드바이스)과 부가기능을 어디적용할지(포인트컷)를 합쳐서 하나의모듈로 만들었는데,이게 애스펙트임
	기본적으로는 애스펙트는 그 하나로 스프링과 별개의 라이브러리인데(AspectJ),그냥 저기서 기능일부와 이름을 따와서 스프링이 안에서 구현해서 사용하는게
		@Aspect
	임
	이런 aop는,oop를 대체하는게 아니라 횡단관심사를 oop에서 처리하기어려워서,이걸 보조하는목적으로 개발됐음
	보통 aop는
		오류검사 및 처리(밸리데이션 처리)
		동기화
		성능최적화(캐싱)
		모니터링 및 로깅
	들을 위해 사용됨
	
	이 aop를 사용하면,핵심기능과 부가기능이 코드상으로 완전히 분리되어서 관리되는데,
	이걸 실제 로직에 추가할때는,3가지 방법이 있음(우리가 하는건아니고,동작방식임)
		컴파일시점
		클래스로딩시점
		런타임시점(프록시)//지금까지했던방식
	컴파일시점은,컴파일시점에 실제로 클래스를 뜯어붙이는거임(위빙)
	단점은 특별한 컴파일러(aspectJ에서 줌)도 필요하고 복잡함(잘사용하지않음)
	클래스로딩시점은,컴파일을 마치고 실행하면 자바는 jvm내부의 클래스로더에 클래스를 보관하는데,이때 올리기전에 .class파일을 조작해서 jvm에 올리는것
	단점은 자바를 실행할때 옵션(java -javaagent)을 줘야하는게 귀찮고,운영이 어려움(잘사용하지않음)
	런타임시점은 클래스로딩시점 이후에 이미 자바가 실행되고 난 다음(main실행이후),di와 프록시,빈후처리기등을 사용해서 스프링빈을 프록시로 싸서 올리는거
	즉 지금까지했던방식임
	단점으론 프록시를 사용하기때문에,aop기능에 일부제약이 있지만(상속으로인한 final사용불가,생성자에 적용불가),
	특별하게 뭐 귀찮게구는게없음(스프링만 있으면됨)
	
	보통 프록시를 사용하지않으면,생성자,필드값접근,스태틱메서드접근,메서드실행 시점에 aop를 적용가능함,이걸 조인포인트라고 함
	단,
		프록시를 사용하면 메서드 실행 시점에서만 aop를 적용할수있음
		프록시는 메서드오버라이딩하는식으로 동작하기때문에,그래서 스태틱메서드에도 접근할수없음(오버라이딩할수없는건 다 접근할수없음 생성자,필드등등)
		추가로 스프링빈을 사용하기때문에,스프링빈에만 aop를 적용할수있음(스프링빈에 등록해야 aop가 동작)
	이런 한계들이 있긴함
	
	용어정리
		조인포인트:어드바이스가 적용될수있는 위치,추상적개념임(스프링에선 메서드실행시점하나뿐)
		포인트컷:조인포인트중에서 어드바이스가 적용될 위치를 선별하는기능,AspectJ표현식을 사용(스프링에선 메서드실행시점만 선별할수있음)
		타겟:어드바이스를 받는 실제 객체,포인트컷으로 결정됨
		어드바이스:부가기능자체,스프링에선 메서드하나임,여기에 @Around같은 포인트컷을 다는것으로 작동(@Around,@Before,@After등이 있음)
		애스펙트:어드바이스와 포인트컷을 모듈화한것,@Aspect임,하나의 애스펙트에 여러 어드바이스와 포인트컷이 함께 존재할수있음
		어드바이저:하나의 어드바이스와 포인트컷으로 구성된 모듈(애스펙트의 하위집합이라고 보면됨),스프링aop에만 사용함
		위빙:포인트컷으로 결정한 타겟에 어드바이스를 적용하는것,이걸로 핵심기능에 영향을 주지않고 부가기능을 추가할수있음,즉 애스팩트를 객체에 연결한상태
		aop프록시:aop기능을 구현하기위해 만든 프록시객체,스프링에선 jdk동적프록시나 cglib프록시임
	
	
10.스프링 aop 구현	
	aop쓰려면
		implementation 'org.springframework.boot:spring-boot-starter-aop'
	추가
	
	aop를 구현하는 가장 일반적인방법은,@Aspect를 사용하는것
	저번에본거처럼 @Aspect를 클래스레벨에 붙이고,
	하위메서드에서 @Around나 @Before같은걸 붙이고 괄호안에 AspectJ표현식 넣어주면됨
		@Around("execution(* hello.aop.order..*(..))")
	그리고 메서드에서 제일첫번째 매개변수로 ProceedingJoinPoint를 받고
		public Object doLog(ProceedingJoinPoint joinPoint)throws Throwable{}
	타겟메서드를 실행시킬땐(정확히는 다음애스팩트로 넘김,즉 미들웨어생각하면됨 마지막에 애스팩트의 마지막에 타겟메서드가 있는거)
		joinPoint.proceed()
	하면됨
	타겟메서드 실행시키고 돌아오기때문에,
	맨마지막에 넣으면 aop전부분-타겟메서드 가 되고,
	중간에넣으면 aop전부분-타겟메서드-aop후부분
	젤처음에넣으면 타겟메서드-aop후부분
	이 됨
	그리고 joinPoint.proceed()를 호출하지않으면,그 이후 Aspect도 실행되지않음
	
	그리고나서 이걸 스프링빈으로 등록하면됨(@Component)
	
	이떄 포인트컷을 저렇게 스트링으로 던져도되지만,아예 분리해서 재사용할수도있음(모듈화가능)
	    @Pointcut("execution(* hello.aop.order..*(..))")
		private void allOrder(){}//메서드안엔 비워두면됨
	그리고 
		@Around("allOrder()")
	이렇게 사용하면 됨
	이때 포인트컷메서드를 포인트컷 시그니쳐라고 함
	이런식으로 같은 포인트컷이 여러군데서 들어가도,관리포인트를 통일할수있음+메서드명으로 포인트컷의 의미를 부여할수있음
	그리고 이런 포인트컷을 다른클래스에서도 사용할수있는데,그러려면 메서드(포인트컷시그니처) 클래스 둘다 public으로 설정해둬야함
	그리고 사용할땐
		@Around("hello.aop.order.aop.Pointcuts.allOrder()")
	이렇게 패키지명 다 나열하고 메서드까지 넣어주면됨	
		
	포인트컷을 여러개를 동시적용할수도있는데
		@Around("allOrder() && allService()")
	이렇게 &&(and) ||(or)등 !(not) 똑같음
	이렇게 여러 포인트컷을 묶어서 포인트컷시그니처로 만들어둘수도있음
	    @Pointcut("allOrder()&&allService()")
		public void orderAndService(){}
	이렇게
	
	그리고 클래스의 이름가지고 포인트컷표현식만들땐
		execution(* *..*Service.*(..))
	이렇게하면 뒤에 Service가 붙은모든클래스와 인터페이스가 대상이됨(클래스만이 아니라 인터페이스도 포함임)
	
	그리고 aop에서 타겟메서드 실행을 제어할수있는걸 이용해서,밸리데이션처리가 가능해지는거
	값이 맞으면 joinPoint.proceed()를 실행하고,틀리면 그냥 끝내는식으로 분기타는게 가능
        try{
            log.info("[트랜잭션 시작] {}",joinPoint.getSignature());
            Object result = joinPoint.proceed();
            log.info("[트랜잭션 커밋] {}",joinPoint.getSignature());
            return result;
        }catch (Exception e){
            log.info("[트랜잭션 롤백] {}",joinPoint.getSignature());
        }finally {
            log.info("[리소스 릴리즈] {}",joinPoint.getSignature());
        }
	이런식으로 로그자리에 실제트랜잭션코드가 들어가면,트랜잭션처리가 가능해지고(그 트랜잭션참여식으로하게되니),예외가 떳냐안떴냐에 따라 분기가 가능해짐
	
	그리고 여러 어드바이스를 실행시킬때,기본적으로는 순서를 보장하지않음
	만약 순서제어를 적용하고싶으면,@Aspect밑에 @Order을 붙여야하는데,문제는 이걸 클래스단위로 붙여야한다는거
	그래서 만약 한 @Aspect밑에 여러어드바이스가 있고,순서제어를 하고싶으면,각각 하나의 클래스로 분리해야함(별도의파일로 뽑거나,내부클래스쓰거나)
	그리고
		@Order(1)
		@Order(2)
	일떄,숫자가 작은,그러니 1부터 실행되고 그뒤에 2가 실행됨


	어드바이스의 종류엔,@Around말고도 여러가지가 있음
	이건
		@Around:메서드 호출 전후에 수행,가장 강력한어드바이스,조인포인트실행여부선택,전달값반환,조작한값반환,예외반환이 가능,즉 http에서 post같은거임
		@Before:조인포인트 실행이전에 실행(Around에서 proceed사용전이라고 보면됨)
		@After Returning:조인포인트 정상완료후 실행(Around에서 proceed사용후 정상로직이라고 보면됨)
		@After Throwing:메서드가 예외를 던지는 경우 실행(Around에서 proceed사용후 catch라고 보면됨)
		@After:조인포인트가 정상 또는 예외에 관계없이 실행(Around에서 proceed사용후 finally라고 보면됨)
	이렇게 있음
	그래서 어라운드를 제외한애들은 이미 위치가 정해져있기때문에,어스펙트에서 따로 실행(proceed)시킬수없음(일반적인상황에서 실행을 막을수없음,예외제외)
	그래서 받는 joinPoint도 다른데
		@Before("hello.aop.order.aop.Pointcuts.orderAndService()")
		public void doBefore(JoinPoint joinPoint){
			log.info("before{}",joinPoint.getSignature());
		}	
	이런 Proceeding이 빠진 일반적인 조인포인트를 받음
	아예 저런 메서드정보같은 메타정보가 필요없으면 빼버려도됨
		@Before("hello.aop.order.aop.Pointcuts.orderAndService()")
		public void doBefore(){
			log.info("abcd");
		}
	이렇게
	그리고 이렇게 around말고 다른데서도 aop에서 예외가 터지고 못잡으면 그대로 로직실행끝이니까 조심
	
	after들은 타겟로직의 실행결과값을 받아올수있음
		@AfterReturning(value = "hello.aop.order.aop.Pointcuts.orderAndService()",returning = "result")
		public void doReturn(JoinPoint joinPoint,Object result){
			log.info("[return]{} return={}",joinPoint.getSignature(),result);
		}
	여기서 returning에 있는 스트링과,메서드에서 매개변수로 받고있는 변수의 이름이 같은곳에 들어가게됨
	단,여기서 result의 값을 변경해서 리턴한다고해서,결과값을 변조할순없음
	결과값변조하려면 Around써야함
	@AfterThrowing은 예외를 받을수있음
		@AfterThrowing(value = "hello.aop.order.aop.Pointcuts.orderAndService()",throwing = "ex")
		public void doReturn(JoinPoint joinPoint,Exception ex){}
	위랑 상세내용은같음
	
	조인포인트에서 있는 메서드들은
		joinPoint.getTarget() //실제호출대상반환
		joinPoint.getArgs()//매개변수반환
		joinPoint.getSignature()//호출메서드반환
		joinPoint.getThis()//프록시객체반환
		joinPoint.toString()
	들이 있음
	
	그리고 returning같은건,해당 매개변수에 지정된 타입을 반환하는메서드만 대상이 됨(부모타입으로 자식타입먹는건 가능)
	즉 int를 반환하는데 저기에 string이 설정되면 해당어드바이스가 무시됨(void의 경우엔 Object넣어야함),추가포인트컷이라고 생각해도될듯 
	
	@Around에서 할수있는일은
		조인포인트실행여부선택(joinPoint.proceed() 호출여부선택)
		전달값변환(joinPoint.proceed(args[]) 매개변수 조작)
		반환값변환(object res=joinPoint.proceed() 이후 값 조작후 리턴)
		예외변환(catch에서 예외받아서 변환)
		트랜잭션처럼 try catch finally가 모두들어가야하는 구문을 처리할수있음(이런건 around를 쓸수밖에없음)
	이 있고,추가적으로 Around는 첫파라미터로 ProceedingJoinPoint를 받아야하고,proceed를 통해 대상을 실행할수있는데,
	proceed를 여러번 호출할수도있음(실패시 재시도가능,이거도 around를 쓸수밖에없음)
	
	Around말고 다른 어드바이스들이 있는 이유는,post도배를 안하는거와 같은이유,즉
		제약을 통해 좀 더 편하게 역할을 가이드하는것(실수로 proceed호출안해도 Around말고 다른데선 상관없는거처럼)
		어노테이션명으로 직관적으로 어디서 실행될지 표시(작성한 의도를 명확히 표시)
	하는데 있음

11.포인트컷
	애스팩트j표현식의 지시자는,맨앞에 있는(execution같은거)거임
	포인트컷표현식은 이 지시자로 시작함
	종류는
		execution:메서드 실행조인포인트를 매칭,스프링aop에서 가장많이 사용함
		within:특정 타입내 조인포인트 매칭,즉 해당타입이 매칭되면 안에 메서드들은 신경쓰지않음
		args:인자가 주어진 타입의 인스턴스인 조인포인트
		this:스프링빈객체를 대상으로 하는 조인포인트 //특정대상하나를 조인포인트로 잡음
		target:타겟객체를 대상으로하는 조인포인트  //특정대상하나를 조인포인트로 잡음
		@target:실행객체의 클래스에, 주어진 타입의 애노테이션이 있는 조인포인트
		@Within:주어진 애노테이션이 있는 타입 내 조인포인트
		@annotation:메서드가 주어진 애노테이션을 가지고있는 조인포인트를 매칭(메서드가 해당 어노테이션이 있는거대상)
		@args:전달된 실제 인수의 런타임 타입이,주어진 타입의 어노테이션을 갖는 조인포인트(매개변수에 해당 어노테이션이 있는거 대상)
		bean:스프링전용,빈의이름으로 포인트컷지정
	보통 @달려있으면 어노테이션대상이라고 보면됨
	execution을 거의 대부분 사용하긴함
	
	자바에서 어노테이션만드는법은 자바노트참조

	execution은,
		execution(접근제어자? 반환타입 선언타입?메서드명(파라미터타입)예외?) //파라미터는 여러개적을수있음
		execution(public String hello.aop.member.MemberServiceImpl.hello(String)) //가장 정확히 매칭하는 구문(예외생략)
		execution(* *(..))//가장 많이 생략한 포인트컷(반환타입과 메서드명,파라미터타입만 적고,그거도 와일드카드로 처리)
		execution(* hello.aop.member.*.*(..)) //패키지로 위치잡고,거기있는 모든거와 모든메서드에 적용(바로 자기안에있는거만)
		execution(* hello.aop.member..*.*(..)) //패키지로 위치잡고,거기있는 모든거와 모든메서드에 적용(하위도 포함)
		
	이렇게 구성되어있음,이때 ?는 생략할수있고,*로 와일드카드를 사용할수있음,글자단위라 hel*->hello *el*->hello 이런매칭도 가능
	파라미터에서의 ..은 파라미터의 타입과 파라미터수가 상관없다는 뜻
	파라미터는
		execution(* *()) //파라미터가 없는메서드들만 매칭
		execution(* *(*))//파라미터는 딱 하나,타입은 자유로 매칭
		execution(* *(..))//파라미터갯수 자유,타입 자유로 매칭(파라미터가 없어도됨)
		execution(* *(String, ..))//맨앞파라미터는 스트링고정,뒤부터는 갯수타입자유
		execution(* *(String, String, ..))//맨앞과 두번째파라미터는 스트링고정,뒤부터는 갯수타입자유
		execution(* *(String, String))//맨앞과 두번째파라미터가  스트링고정,갯수도 2개
		execution(* *(String, *))//맨앞이 스트링고정,갯수도 2개,단 두번째꺼 타입자유
	이렇게 하면됨,이때 파라미터의 부모타입으로 해도 실패하니까 조심해야함(object써봐야 진짜 Object아니면 안붙음)
	
	그리고 주의할건,
		패키지에서 .*은 바로 그 패키지 안에 있는것(하위패키지는 포함x)만 포함
		패키지에서 ..*은 바로 그 패키지의 밑에 있는것(하위패키지도 포함)도 포함
	임
	패키지의 맨 마지막.을 타입이라고 부르고(aop.member.MemberServiceImpl에서 MemberServiceImpl)
	그리고 타입에서,
		타입정보가 일치하면(MemberServiceImpl->MemberServiceImpl) 당연히 일치
		부모타입이면(MemberService->MemberServiceImpl)일단 일치하고,뒤에 메서드에서 한번 더 걸러짐(자식에서만 있는메서드사용할땐 적용안됨)
	이렇게 타입정보로 매칭(다형성기반)하기때문에 타입매칭이라고 하는거(이게(부모매칭) 되는 지시자가 있고 안되는게 있는데,execution은 됨)
		
	
	테스트돌릴때 포인트컷이 적용된지는
		Method helloMethod = MemberServiceImpl.class.getMethod("hello", String.class);
		pointcut.matches(helloMethod,MemberServiceImpl.class)
	이렇게 matches사용해서 매치해보면 TF로 나옴
	
	within은 특정타입내의 조인포인트에 대한 매칭을 제한,즉 해당타입이 매칭되면 안에 메서드들은 신경쓰지않음(*처리)
		within(hello.aop.member.*Service*)
	이건 execution에서 타입부분만 사용한다고 보면됨
	주의할건,이건 표현식에 부모타입을 지정하면 안됨,정확히 타입이 맞아야함(인터페이스로 적용불가)
		within(hello.aop.member.MemberService) //적용안됨
		execution(* hello.aop.member.MemberService.*(..))//적용됨
	이게 가장 큰 차이점
	사실 별로 사용하지않음,그냥 execution사용함
	
	args는 인자가 주어진 타입의,인스턴스인 조인포인트로 매칭,즉 매개변수만 보고 매칭하는거임
	이건 execution에서 매개변수부분만 사용한다고 보면됨
		args(String)
	execution은 파라미터의 타입이 정확하게 매칭되어야하지만,args는 파라미터의 부모타입이라도 허용해줌(실제 넘어온 파라미터인스턴스를 보고 판단)
	즉,string을 받을때
		args(Object)//적용됨
		args(String)//적용됨
		execution (hello.aop.member.MemberService.*(Object))//적용안됨
		execution (hello.aop.member.MemberService.*(String))//적용됨
	이렇게됨
	왜냐면 execution은 메서드의 시그니처(빌드시 생기는 메타정보라고 생각하면됨)를 기반으로 매치를 해보고(정적),
	args는 런타임시 직접 전달받은 인수를 가지고 매치를 해보기때문에 args는 부모클래스가 되는거임(동적)
	이건 이거만쓰기보다,파라미터바인딩에서 주로 사용됨
	
	@target는 실행객체의 클래스에,주어진 타입의 어노테이션이 있는 조인포인트,즉 클래스에 해당 어노테이션이 있으면됨
	@within은 주어진 어노테이션이 있는 타입 내 조인 포인트,이거도 클래스에 해당어노테이션이 있으면됨
	즉 직접 어노테이션을 만들고,그걸 기반으로 포인트컷을 걸수있는거임
	사용은
		@Around("execution(* hello.aop..*(..)) && @target(hello.aop.member.annotation.ClassAop)")//같이사용
		@Around("@target(hello.aop.member.annotation.ClassAop)")//단일사용,이렇게사용하면안됨
		@Around("execution(* hello.aop..*(..)) && @within(hello.aop.member.annotation.ClassAop)")//같이사용
		@Around("@within(hello.aop.member.annotation.ClassAop)")//단일사용		
	이런식으로 해당 어노테이션경로를 넣으면됨
	이 둘의 차이는,
		@target는 해당 인스턴스의 모든 메서드를 조인포인트로 사용하고(부모클래스의 메서드도 허용,인스턴스기준이니까 저때는 이미 다 들어가있는상태니)
		@within은 해당타입내에 있는 메서드만 조인포인트로 사용함(부모클래스의 메서드는 허용하지않음,단 오버라이드하면 가능)
	그리고 @target는 인스턴스기준으로 판단하기때문에,애스팩트를 직접 만들어야함 이건
	그냥 포인트컷만 가지고 테스트돌릴수없음
	
	그리고 args,@args,@target는 단독으로 사용하면 안됨
	얘들은 실제 객체 인스턴스가 생성되고 실행될때 포인트컷 적용여부를 확인할수있는데,
	런타임시 일어나는 포인트컷 적용여부도 결국 프록시기반인데,프록시가 없으면 판단이 불가능해져서 그냥 다 적용하려고해버림,
	근데 스프링컨테이너가 프록시를 생성할땐 앱 로딩시점이라서,
	이러면 모든 빈에 aop를 적용하려고해버리는데(일단 클래스단위로 걸리면 걸고나서 실행시점에 메서드보고 어드바이스적용할지 판단할수있으니까)
	스프링내부빈중엔 final이 붙은애들도 있어서 에러떠버림,그래서 다른애들이랑 같이써야함
	즉 빈 전체가 스코프에 들어가게 포인트컷을 넣으면안된다는것과 저3개(인스턴스기반으로 체크하는애들)는 서브용으로만 써야한다는것





































	
	


