1.객체지향설계와 스프링
	객체지향은 유연하고 변경이 용이해야함,
	확장엔 열려있고 변경엔 닫혀있어야함
	그리고 상위객체는 하위 인터페이스에 의존해야지,하위 구현체에 의존하면안됨(의존성역전)
	이렇게 설계하면 클라이언트가 하위단의 수정에 맞춰서 수정해야하는일이 일어나지않음
	
	근데 그래봐야 인터페이스의 변경이 일어나게되면(엄청 큰 변경이 있으면) 다 뜯어고쳐야하는건 맞지만..
	그래서 설계를 잘해야한다...
	
	solid
		단일책임원칙
			변경이있을때 파급효과가 작아야함
		개방폐쇄원칙(ocp)
			확장엔 열려있고 변경엔 닫혀있어야함
			다형성을 활용해야함(인터페이스나 오버로드,오버라이드를 활용해야함)
			인터페이스를 구현한 구현체를 새로 하나 더 만드는건 ocp를 위반한게 아님
			단,클라이언트가 구현클래스를 직접 선택하는건 ocp를 위반하게됨,
			그래서 객체를 생성하고 연관관계를 맺어주는 별도의 조립,설정자가 필요하게됨(스프링이 해줌)
		리스코프치환원칙
			인터페이스를 구현한 구현체들은 인풋아웃풋을 다 지켜야함,즉 서로 바꿔치기를 해도 상관없어야함
			서브클래싱이 아닌 서브타이핑을 해야함
		인터페이스 분리 원칙
			인터페이스는 큰거하나보단 잘 쪼개는게 좋다
			ex)자동차 인터페이스보단,운전,정비 인터페이스로 분리
			이러면 재사용가능성이 올라가고,다른곳에 영향을 주지않을확률이 올라가고,대체가능성이 올라가고,인터페이스가 명확해짐
		의존관계 변경 원칙(dip)
			상위객체는 하위인터페이스에 의존해야지 하위 구현체에 의존하면안된다
			이거도 클라이언트가 구현클래스를 선택하는건,
				ex)memberrepo m=new memorymemberrepo();
			dip 위반임(인터페이스와 구현체에 동시에 의존함)
			이거도 스프링이 di를 하게해서 해결할수있음
			
	다형성만으로는 ocp와 dip를 지킬수가없음
	그래서 스프링은 di를 사용해서(의존성주입),클라이언트 코드의 변경없이 기능을 확장할수있게 해줌
	그리고 이상적으로는,모든 구현체에 인터페이스가 있는게 맞음
	근데 기능을 확장할 가능성이 없으면,그냥 구현체써도되고 나중에 필요할때 인터페이스를 덮으면됨
	근데 확장할거같으면 그냥 인터페이스쓰는게 좋음
		
		
		
2.스프링 핵심원리 이해-예제만들기
	start.spring.io에서 만들고,
	설정에서 빌드-빌드도구-gradle에서 빌드,테스트 실행 인텔리제이로 변경
	이러면 빌드가 좀 더 빨라짐
	
	설계할땐,도메인 협력관계,클래스 다이어그램,객체 다이어그램을 그려두면 좀더 이해가편함
	도메인협력관계는 비개발자도 이해가편하고,클래스다이어그램은 실제 구상도라 그런거필요할때 편하고,
	객체다이어그램은 진짜 단순히 동작방향볼때편함,즉 동적으로 변하는(구현체는 바뀔수있으니)걸 전부 제거한상태
		
	컨트롤 알트 v=해당 메서드의 리턴값 받는 변수생성
	org.assertj.core.api로 Assertions 써서 테스트하면됨
		Assertions.assertThat(member).isEqualTo(findmember);
		
		
	알트insert에서 생성할때,tostring생성하면,현재 객체값전체를 리턴하는게 자동으로 나옴
		
		
3.스프링 핵심원리 이해	2-객체지향원리적용
	컨트롤 쉬프트 t = 해당메서드 테스트자동생성(껍질만 생성해줌)
	테스트에서
		@Test
		@DisplayName("vip10퍼할인")
	이렇게하면,실행시 테스트에 표시되는이름을 저거로 표시할수있음
	
	di를 사용하지않으면 구현클래스에 의존할수밖에없음(ocp,dip위반)
	순수 자바로도,외부에서 생성자를 통해 주입하는 클래스를 만들고 걔를통해서만 생성하는식으로 해결할수있긴함
		
	테스트에서 
		@BeforeEach
	테스트전에 실행
	appconfig같은거 여기다가 넣어서 di하면됨
	
	컨피그같은곳에선 역할과 역할에 따른 구현이 한눈에 보여야함
	그래서 여기서는 각 구현 하나당 하나씩 생성메서드를 만들어두고,그거 조합해서 쓰는식으로 해야함
	자기자신을 제외한 다른 new가 메서드내에 있으면안됨
	
	컨트롤 알트 m하면 해당 new 구현체를 외부 메서드로 추출할수있음
	
	di를 사용하면 구현클래스를 의존하지않으니,새로운 구현클래스를 생성해도 실행영역에서의 변경은 일어나지않음,
	appconfig같은 구성영역에서의 변경만 일어나게됨
	
	이런걸 프레임워크단에 전부 맡겨버리는걸(appconfig같은 생성영역이나 제어영역을)ioc(제어의역전)라고 하고,
	보통 이렇게 하는게많은걸 프레임워크라고 함
	즉 내가 만든 객체들은,로직을 실행하는 역할만 담당하고,다른 모든것(객체생성같은)들은 내가 안하고 다른애한테 요청함
		
	의존관계에는 정적인 클래스 의존관계와 동적인 객체 의존관계를 분리해서 생각해야함
	정적 클래스 의존관계는,실제 인터페이스를 의존하는걸 말하고
	동적 객체 의존관계는 실제 실행시점에서 실제로 생성된 객체를 의존하는 관계를 말함
	
	정적 클래스 의존관계에선 실제로 어떤 인터페이스를 구현한 객체가 실행될지 알수없음
	
	이렇게 외부에서 di를 해주는걸 ioc컨테이너,혹은 di컨테이너라고 함
	이렇게 di를 사용하면,정적 클래스 의존관계를 전혀 건드리지않고,동적 객체 의존관계를 변경할수있음(ocp,dip)
		
	appconfig의 클래스에
		@Configuration
	추가하고
	각 생성메서드마다
		@Bean
	추가
	이러면 각 생성메서드들이 스프링컨테이너에 등록되고,
	스프링을 시작할땐 퍼블릭스태틱보이드메인에서
		ApplicationContext applicationContext=new AnnotationConfigApplicationContext(AppConfig.class);
		MemberService memberService=applicationContext.getBean("memberService",MemberService.class);
	추가하면,저 안에 있는 설정정보를 가지고 di컨테이너를 만들고,해당 스트링에 맞는 메서드를 실행해서 넣어줌
		applicationContext.getBean("메서드명",메서드리턴값.class)
	그러니까 appconfig처럼 applicationContext.getBean를 통해서만 생성시키면됨 앞으로는
	그리고 일반적으로 디폴트값은 싱글톤이라,어디서해도 같은값을 줌 기본값은
	
	
	ApplicationContext가 스프링 컨테이너고,얘는 @Configuration이 붙은걸 설정정보로 사용함
	@Configuration안에서 @Bean이 붙은걸 전부 호출해서 미리 객체를 만들어두고,
	만약 getBean이 오면 그 객체의 포인터값을 리턴해줌(그래서 싱글톤이됨)
	일단 기본적으로는 이렇고,보통 @autowired 생성자로 di했던거같음
		


4.스프링 컨테이너와 스프링 빈
	빈의 이름은 기본적으로 메서드이름인데
		@Bean(name="abc2")
	이렇게 명명할수도 있음
	단,이경우엔 모든 빈 이름이 하나도 겹치는게 있어선안됨
	그래서 그냥 기본값(메소드명)으로 두고쓰는게좋음..
	
	그리고 각 메소드끼리의 의존관계가 있을경우 알아서 밑단부터 생성해서 연결함
	정확히는 일단 다 생성을 하고나서 의존관계를 엮어서 주입함(물론 자바코드로 생성하면 메서드실행시켜야하니까 바로 생성하면서 엮이긴함)
	모든빈이름 출력할땐
		String[] beanDefinitionNames = ac.getBeanDefinitionNames();
	그리고 foreach로 
	iter하고 엔터치면 foreach자동으로 생성됨
	그리고 object로 getBean받아서 출력해보면됨
	사실 쓸일많진않을듯? 
	
	만약 내가 등록한거만 보고싶으면(시스템적으로 등록한거빼고)
        String[] beanDefinitionNames = ac.getBeanDefinitionNames();
        for (String beanDefinitionName : beanDefinitionNames) {
            BeanDefinition beanDefinition=ac.getBeanDefinition(beanDefinitionName);
            if(beanDefinition.getRole()==BeanDefinition.ROLE_APPLICATION){
				...출력코드
            }

	이런식으로 if문돌리면됨
	BeanDefinition.ROLE_APPLICATION이 내가만든거,BeanDefinition.ROLE_INFRASTRUCTURE가 스프링이 자체적으로 만든거

	보통은 이렇게 다 출력할일은 없고,조회를 하게됨(getBean같은)
	만약 getbean을 했을때 대상이 없으면,NoSuchBeanDefinitionException이 나게됨
	
	그리고 getBean에서 이름없이 타입으로만 조회할수도있음
		MemberService memberService = ac.getBean( MemberService.class);
	이경우 같은타입이 여러개일땐 오류가 발생함(NoUniqueBeanDefinitionException),이경우엔 이름을 넣어줘야함
	이떄 ac.getBeansOfType으로 해당타입의 모든 이름을 리턴받아볼수있음
		Map<String, MemberRepository> beansOfType = ac.getBeansOfType(MemberRepository.class);
	그리고 인터페이스를 받아올수도있고,구체클래스를 받아올수도있음
		MemberService memberService = ac.getBean("memberService", MemberServiceImpl.class);
	같은거일경우 결과가 같음
	기본적으로 실제반환타입을 보고 조회를 하기때문에,인터페이스나 구현체나 둘다 되는거(물론 구현체적는건 의존성생기니까 당연히 안좋음)
	
	테스트코드에서 예외테스트할땐 org.junit.jupiter.api의 Assertions.assertThrows를 쓰면됨
		org.junit.jupiter.api.Assertions.assertThrows(NoSuchBeanDefinitionException.class,
		()->ac.getBean("xxxx", MemberService.class));
	이렇게 해당예외클래스와 람다식으로 해당예외를 만드는 코드를 던져주면됨

	클래스에 static를 붙인다는건,내부클래스일때 스코프를 그 안에서만 사용하겠다는소리임

	그리고 스프링빈을 조회할때,만약 상속관계인 타입이 있으면,부모타입으로 조회할경우 자식타입도 함께 조회함
	그래서 object로 조회하면 모든 빈을 조회함
	그래서 만약 자식타입이 두개이상있으면(인터페이스의 자식관계도 포함)중복예외가 발생하게됨
	그래서 이름을 붙여야함
	물론 하위타입으로 조회할수도있지만,안좋은방법임(인터페이스만 의존해야하니까)



	스프링 컨테이너의 상속구조는
		BeanFactory
		ApplicationContext
		AnnotationConfigApplicationContext
	순으로 상속되어있음
	BeanFactory와ApplicationContext는 인터페이스임
	ApplicationContext는 여러가지 인터페이스를 상속받고있는데,
		BeanFactory->빈 관리조회
		MessageSource->메시지위치에 따라 국제화(언어변경)기능,파일을 분리해서 처리하는식
		EnvironmentCapable->환경변수
		ApplicationEventPublisher->이벤트를 발행하고 구독하는 모델 지원
		ResourceLoader->리소스를 편리하게 조회
	등을 받고있음
	
	보통 BeanFactory를 직접사용할일은 없고,ApplicationContext를 사용하게됨
	
	그리고 ApplicationContext는 인터페이스니까,이걸 구현하는게 여러개로 나눠지는데,
	이건 보통 해당 설정정보를 어떻게 받아올거냐(AppConfig.class,xml파일 등)으로 나눠지게됨
	근데 보통 요즘은 보통 어노테이션 기반만 사용하고,xml같은거는 안씀,레거시에서나 사용함

	
	
	이렇게 xml이든 자바코드이든,스프링은 BeanDefinition이라는 인터페이스로,
	각각 구현체들이 xml이든뭐든 읽어서 같은 출력을 내게 만들어둔거임

	beanDefinition의 메타정보들이 있긴한데,뭐 중요하진않은듯
	이걸 뽑아서쓸일도 없음 ㅋㅋ



5.싱글톤 컨테이너
	기본적으로 스프링을 거치지않고 di를 하게되면 싱글톤으로 나오지않고,매번 새 객체를 생성시킴
	
	테스트시 같지않다 확인
		Assertions.assertThat(memberService1).isNotSameAs(memberService2);

	그래서 싱글톤을 적용해서(서비스나 레포지터리 구현체에서 적용하면됨,di랑은 상관없음)
	di할때는 new를 안하고 getInstance하면되는거
		private SingletonService(){

		}
	이런식으로 프라이빗으로 생성자를 만들어두면,외부에서의 접근을 막을수있음(안에 코드안넣고 프라이빗만 적용하는거)
	
	isEqualTo와 isSameAs의 차이는,same는 ==이고 equal은 =임,즉 싱글톤확인할땐 same를 써야함
	
	Assertions.assertThat(instance1).isSameAs(instance2)
	Assertions.assertThat(instance1).isSameAs(instance2)
	
	싱글톤의 문제는
		코드가 늘어남
		dip를 위반함(구체클래스의존)
		클라이언트가 구체클래스를 의존해서 ocp위반가능성이 높음
		테스트하기어려움
		자식클래스만들기 어려움
		유연성이 떨어짐
	
	그런데 스프링을 사용하면 기본적으로 싱글톤 컨테이너로 관리해줌(바꿀수도있음,근데 보통은 싱글톤씀 99퍼는)
	이러면 dip,ocp,테스트등이 자유로워짐

	★싱글톤쓸때 주의점은(패턴이든 컨테이너든),무조건 스테이트리스로 설계해야함
	당연히 객체가 유지되니까 거기에 뭘 남기면 안됨
	그래서 db커넥션같은걸 주로 싱글톤으로 썼던거
	그래서
		특정 클라이언트에 의존적인 필드가 있으면안됨
		특정 클라이언트가 값을 바꿀수있는 필드가 있으면안됨
		어지간하면 읽기만 가능해야함
		필드대신 자바에서 공유되지않는 지역변수,파라미터등을 사용해야함


	그리고 @Configuration으로 AppConfig내에서 new를 여러개해도 모두 하나의객체임(여러객체에서 같은걸 생성해도 하나만생성됨)
	무조건 싱글톤식으로 하나만 생성해서 그거 di하는식으로 동작함
	@Configuration을 사용하면,스프링이 진짜 바이트코드를 치환해서 호출하는식으로 변경하는것(cglib라이브러리 사용함)
	그 레지한 싱글톤 방식(코틀린에서 했던방식)으로 생성-호출방식으로 동작하는걸로 추정
	
	그래서 @Configuration을 사용하지않고 @Bean만 사용하면 싱글톤으로 동작하지않음
	그리고 생성된애들도 스프링에서 관리하지않기때문에,그냥 bean취급도 받지않음(스프링컨테이너가 관리하지않음)
	사실 안쓸이유도 없음
	모든 설정정보는 @Configuration넣으면됨
	

6.컴포넌트 스캔
	스프링은 설정정보가 없어도 자동으로 스프링빈을 등록하는 컴포넌트 스캔이라는 기능을 제공함
	또 의존관계를 자동으로 주입하는 @Autowired라는 기능도 제공함
	
	컴포넌트 스캔을 사용할땐
		@Configuration
		@ComponentScan
	이렇게 넣으면됨
	컴포넌트스캔에서
		@ComponentScan(
				excludeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = abc.class)
		)
	이런식으로 해당필터에 있는걸 빼버릴수도있음
	
	shift2번으로 클래스검색을 할수있음
	
	컴포넌트스캔은 @Component가 붙은 모든걸 검색해서 스프링빈으로 등록함
	그러니
		@Configuration
		@ComponentScan
		public class AutoAppConfig {
		}	
	이런식으로 비워두고,현재 사용하는 구현체에 가서 @Component붙여주면됨
	이경우 의존관계 주입은,의존관계주입이 필요한 해당 구현체의 생성자에 @Autowired 를 붙여주면됨(생성자주입 세터주입등 있지만 보통 생성자쓰니까)
	
	이 컴포넌트스캔은,기본값은,해당 appconfig파일(ComponentScan이 있는 위치)를 루트로 삼고,아래쪽으로 서치하기때문에,
	어디 밑에있으면 자기 위로 올라가서 서치할순없음
	
	컴포넌트스캔을 하면 자기밑에있는 모든 @Component를 스프링빈으로등록함
	이때 스프링빈의 기본이름은 클래스명을 사용하되,맨 앞자리를 소문자로 바꿈(MemberServiceImpl->memberServiceImpl)
	만약 빈 이름을 직접 지정하고싶으면
		@Component("빈이름")
	하면됨
	
	컴포넌트스캔에서 위치를 지정하려면
		@ComponentScan(
				basePackages="패키지명"
		)	
	으로 루트패키지를 지정할수있음
		@ComponentScan(
				basePackages={"패키지명1","패키지명2"}
		)
	이렇게 여러개지정도 가능함
		@ComponentScan(
				basePackageClasses=MemberService.class
		)
	이렇게 클래스를 지정하고,해당 패키지를 루트로 삼을수도있음
	근데 보통은 루트위치에 두고 패키지지정안하는게 관례인듯

	컴포넌트 스캔의 대상은
		@Component
		@Controller(스프링 mvc컨트롤러로 인식)
		@Service(아무것도안함,즉 Component와 같은데,그냥 개발자들이 여긴 비즈니스로직이라고 확인할수있게 이름만 다른거)
		@Repository(스프링 데이터접근계층으로 인식하고,데이터계층의 예외를 스프링예외로 변환해줌)
		@Configuration(스프링설정정보로 인식하고,싱글톤유지할수있게 추가처리해줌)
	들이 있음,얘들은 @Component를 포함하고있기때문,괄호속에있는건 추가기능임 기본적으로 Component를 깔고감

	
	컴포넌트스캔에서 필터를 사용해서 특정대상들을 제외한거처럼,특정대상들을 추가할수도있음
		includeFilters //포함
		ExcludeFilters //제외
	이렇게
	
	필터의 타입에는
		FilterType.ANNOTATION //어노테이션 인식
		FilterType.ASSIGN_TYPE //지정한 타입과 자식타입을 인식
		FilterType.ASPECTJ //안씀
		FilterType.REGEX//정규표현식
		FilterType.CUSTOM//TypeFilter라는 인터페이스 구현하는식으로 커스텀할수있는거,안씀
	가 있음
	
	어지간하면 이런 대상 제외나 추가같은건 안넣는게 좋음
	
	
	컨트롤누르면 해당대상으로 이동가능

	
	만약 빈 이름이 충돌날때 상황따라 다르게 동작함
	자동빈이 2개일경우엔 예외가 발생함
	수동빈vs자동빈일경우에는,수동빈이 자동빈을 이기고 자동빈을 오버라이드해버림
	그래서 이건 조심해야함 예외가 안뜨니까..
	그래서 최신 스프링부트의경우엔 이경우에도 예외를 띄움(스프링부트로 실행시켰을때)


7.의존관계 자동 주입
	보통 의존관계주입할땐 생성자주입을 사용하게됨
	생성자주입은 생성자 호출시점에 딱 한번만 호출하는게 보장되므로,불변+필수(final)인곳에 사용함
	생성자가 딱 한개가 있으면 @Autowired를 생략해도 자동주입됨(매개변수가 스프링빈일경우)
	
	좋은 설계는 제약이 있는것
	그래서 만약 중간에 바뀔일이 없는건 set을 만들어두지 않는게 좋음
	
	
	setter주입(set주입대상)은 선택,변경이 있는 경우에 사용하게됨
	이경우에도 @Autowired가 있으니,해당대상을 전부 주입함
	
	기본적으로 생성자주입은 무조건 강제적으로 호출하게되니,무조건 들어가거나 에러뱉음
	setter주입을 할때
		@Autowired(required=false)
	하면 선택적으로 넣을수있음
	스프링은 부트시에 크게 두가지일을 하는데,스프링빈을 생성하는것과,의존관계를 주입하는 두단계가 있음
	
	필드주입같은거도 있는데 이런건안씀(테스트코드등에서 뭘 바꿔치기하기힘듬)
	세터나 생성자 주입같은경우,순수자바코드로 넣을수가있는데(실제로 세터나 생성자를 호출해서 넣으면되니까)
	필드주입은 불가능함(di프레임워크가 있어야함)
	
	필드주입은 스프링부트 테스트코드나 configration정도에서만 사용할수있음
	
	그리고 세터주입도 세터를 퍼블릭으로 열어둬야하기때문에 어지간하면 안씀,생성자주입쓰면됨
	
	생성자주입이 좋은게,테스트를할때 di해야하는 대상을 생성할때 바로확인할수있다는거도 좋음
	그리고 final을 사용할수있음(생성자로만 추가가능하게)
	
	당연하지만 스프링빈이어야 di가 동작함(@Component)
	
	그리고 선택적으로 넣는건 3가지 방법이 있는데
		@Autowired(required=false)//자동주입대상이 없을때 메서드 호출 자체가 안됨
		
		@Autowired
		public void setAbc(@Nullable Member member){ //자동주입대상이 없으면 null이 들어감
		}
		
		@Autowired(required=false)
		public void setAbc(Optional<Member> member){ //자동주입대상이 없으면 Optional.empty가 들어감
		}		
	
	이떄 nullable이랑 Optional은 생성자나 setter의 경우에 특정 필드에만 적용해도 알아서 스프링이 처리해서 없으면 null던지고 예외안던짐
	
	
	요즘은 생성자주입이 코드가 많아서 롬복이라는 라이브러리를 사용함(의존성추가는 참고자료보자,build.gradle에서 라이브러리추가하고 설정해줘야함)
	그리고 lombok 플러그인 인텔리제이에 깔고
	인텔리제이 설정(빌드,실행,배포->컴파일러->어노테이션 프로세서 켜기)
	
	그리고
		@Getter
		@Setter
		public class 클래스명{
			private String name;
			private int age;
		}
	하면 자동으로 게터세터를 만들어줌
	보통 세터는 안넣고 게터는 잘씀
	@ToString은 클래스의 tostring을 자동으로 만들어줌
	
	
	그리고 @RequiredArgsConstructor는,final이 붙은 필드를 전부 di받는 생성자를 자동으로 생성해줌
	근데 이건 getBean(클래스.class)처럼 타입으로 조회하기때문에,조회된 빈이 2개이상일때 문제가 발생함
	수동등록도 되긴하지만 권장하지않고,
	방법은 3가지가 있는데
		@Autowired 필드명매칭
		@Quilifier
		@Primary 사용
	@Autowired는 타입매칭을 사용하고,중복이 있으면 필드이름이나 파라미터이름으로 빈 이름을 추가매칭함(즉 변수명에 명시를 하면 그거로 해줌 두개이상일때)
	@Quilifier는 추가구분자를 붙여주는거,k8s에서 라벨이라고 생각하면됨
	이건 빈 등록할때 붙여두고,
		@Component
		@Quilifier("mainDiscountPolicy")
		public class RateDiscountPolicy implements DiscountPolicy{
		}
	이렇게 등록하고
	받아올때 생성자에
		public OrderServiceImpl(Aaa aaa,@Quilifier("mainDiscountPolicy") DiscountPolicy discountPolicy){
		...
		}
	이렇게 어노테이션을 박아서 저 라벨을들고올수있음
	
	만약 저 라벨대상이 없으면,저 이름의 스프링빈으로 추가매칭을 하는데,이렇게 안되게 해야함,Quilifier는 무조건 라벨검색되게하는게 나중에 편함
	
	
	@Primary는,우선순위를 정하는방법임
	여러개가 매칭되면 이게 붙어있는애가 우선적으로 선택됨
	
	Quilifier의 경우엔 주입받는 모든 코드에 저걸 붙여줘야해서,@Primary를 주로 사용함
	그리고 Quilifier와 Primary의 우선순위는,Quilifier가 더 높음
	
	그리고 Quilifier는 컴파일시 타입체크가 안된다는 단점이 있음
	
	그래서 이걸 어노테이션을 직접 만들어서 해결할수있음
	그냥 상속받는다는느낌으로,해당 어노테이션을 붙이는식으로 만들면 쉽게만들수있음
	
	롬복을 사용할때도 그냥 맨위에 어노테이션 붙이면됨(Quilifier든 커스텀어노테이션이든)
	커스텀어노테이션을 사용하면,컨트롤 b로 그 어노테이션을 사용하는 모든 위치를 확인하기편함
	
	
	그리고 조회한 빈이 모두 필요할때도 있음(만약 클라이언트가 할인의 종류를 선택할수있어야할때)
	이럴때는 전략패턴을 사용하면됨
		@RequiredArgsConstructor
	    static class DiscountService{
			private final Map<String , DiscountPolicy> policyMap;
			
			public int discount(Member member, int price, String discountCode) {
				DiscountPolicy discountPolicy=policyMap.get(discountCode);
				return discountPolicy.discount(member,price);
			}
		}			
	이렇게 Map<String,타입>으로 받으면,해당타입인걸 전부 스프링이 map에 넣어줌
	그리고 그 맵에서 해당하는값을 꺼내다가(매개변수로 스트링 받아서)그 대상의 메소드 사용하면됨(어짜피 인터페이스구현이니 메소드는 같을테니까)
	
	기본적으로는 업무로직빈에선 컴포넌트스캔과 자동주입을 사용하고(컨트롤러,서비스,리포지토리등),
	기술지원빈에선 수동빈을 사용하면좋음(aop를 사용한 로그,데이터베이스연결등)
	
	보통 기술지원빈은 수도 적고,명시적으로 드러나지않는 경우가 많기때문에 명확히 들어내는게 좋음
	그래서 얘들은 appconfig에 명시하는게 좋음
	특히 aop사용하면 영향을 너무 많이주기때문에..
	
	그리고 비즈니스로직에서도 다형성을 적극 활용할때는 각각 패키지(인터페이스+모든구현체)로 묶어두거나 수동빈등록을 하는게 좋음
	수동빈등록을 하면 그 인터페이스에 뭐가있는지가 한눈에 보이니까..

8.빈 생성주기 콜백
	빈 생명주기 콜백은,앱 시작시점에서 무슨 액션을 하고,앱 종료시점에서 액션을 하는거임
	즉 객체 생성단계에선 정보가 없고,생성된 후에 외부에서 세터주입등을 통해서 정보를 넣어주고나서 액션을 취해야할때(네트워크 커넥트같은)사용됨
	그래서 스프링이
		컨테이너생성
		빈 생성
		의존관계주입
	을 한 뒤에 초기화 콜백을 주는데,거기다가 넣으면됨
	그리고 컨테이너가 종료되기 직전에도 소멸콜백을 받을수있음
	
	이게 생성자주입으로 모두 해결할수있긴한데(콜백까지), 좀 복잡해질경우엔 생성과 초기화를 분리하는게 좋음
	그래야 유지보수관점에서 좋음
	즉 생성과 초기화 책임을 분리하는것
	생성자에선 필수값만 받는정도로만 하는게 좋음
	
	이 콜백받는거엔 여러방법이 있는데
		인터페이스(InitalizingBean,DisposanleBean)
		빈 등록 초기화,소멸 메소드
		어노테이션 @PostConstruct,@PreDestroy
	

	인터페이스의 경우,implements InitializingBean 한 후에
	    @Override
		public void afterPropertiesSet() throws Exception {

		}
	를 구현하면됨
	즉 저안에다가 초기화루틴을 넣으면,의존관계주입이 끝나면 저걸 호출해주니까 저기다 넣으면됨
	
	종료루틴도 implements DisposableBean 한 후에
		@Override
		public void destroy() throws Exception {

		}	
	저안에다가 넣으면됨
	근데 이 인터페이스방식은 단점이 있음
		스프링전용인터페이스라,코드가 스프링에 의존함
		초기화소멸메소드의 이름을 바꿀수없음
		내가 코드를 못고치는 외부라이브러리에 적용불가능함
		인터페이스를 추가해야함
	그래서 요즘은 잘 사용하지않음


	그래서 나온게 빈에 생성,소멸 콜백 메소드를 지정하는방식임
		@Bean(initMethod = "init",destroyMethod = "close")
	이렇게 빈에 등록해주면됨
	이거의 장점은
		메소드이름을 맘대로 선택할수있음
		스프링빈이 스프링코드에 의존하지않음
		코드가 아니라 설정정보라서,외부라이브러리에도 초기화,종료 메소드를 적용할수있음(그냥 메소드이름만 등록하면되니까)
		
	그리고 이렇게 등록했을때 destroyMethod는,디폴트값이 추론이라서,close나 shotdown이라는 이름의 메소드들을 자동으로 호출해줌
	그래서 직접 빈으로 등록하면 종료메서드는 안적어도됨
	이게 맘에 안들면,destroyMethod=''하면됨,이러면 추론이 동작하지않음
	
	그리고 어노테이션 방식이 있는데,보통 이걸 사용함(@PostConstruct,@PreDestroy)
	그냥 해당 메소드에 가서,
		@PostConstruct
		void 메소드명(){
		}
	하면 끝임
	그리고 이건 자바 표준이라서 더 좋음
	단,이건 외부라이브러리에는 적용못한다는 단점이 있어서,이경우엔 @Bean을 써야함
	

9.빈 스코프
	빈 스코프는,기본적으로 사용했던 싱글톤 빈 스코프 말고도 프로토타입 스코프,웹관련스코프 등이 있고,
	스코프는 말 그대로 빈이 존재할수있는 범위를 뜻함
	
	싱글톤 빈은,스프링 컨테이너와 생명주기가 같고
	프로토타입은 생성과 의존관계주입까지만 스프링이 관리하고 그뒤로 관리하지않는 스코프임(그래서 종료메서드 호출은 안해줌)
	웹 관련스코프들은
		request:웹 요청이 들어오고 나갈때까지 유지되는 스코프
		session:웹 세션이 생성되고 종료될때까지 유지되는 스코프
		application:웹 서블릿 컨텍스트와 같은 범위로 유지되는 스코프

	등록은 그냥 컴포넌트스캔은
		@Scope("prototype")
		@Component
		public class he(){
		}
	이런식으로 등록하면되고
	수동등록은
		@Scope("prototype")
		@Bean
		PrototypeBean class he(){
			return new he();
		}
	이렇게 등록하면됨

	이렇게 등록하면,프로토타입의 경우 생성후엔 관리안하니까 매번 요청할때마다 새로운 프로토타입인스턴스를 생성해주고,
	싱글톤일경우 요청마다 같은 인스턴스를 반환해줌

	프로토타입빈의 경우엔 요청이 들어와야(조회시점) 생성하고 di함,즉 스프링컨테이너 init시기에 생성하지않음
	일단 생성은 하니까 @PostConstruct는 발동하는데,@PreDestroy는 발동하지않음(생성후 관리하지않으니까)
	그래서 종료메서드호출은 조회한애가 직접해야함


	프로토타입빈은 간단해보이지만,문제는 싱글톤빈과 프로토타입빈을 같이 사용할때가 문제임
	즉 싱글톤 빈 내에서 프로토타입빈을 주입받을때가 문제임
	싱글톤빈에서 프로토타입빈을 di받으면,그시점에서 프로토타입빈을 생성해서,싱글톤빈 내부에 보관함(정확히는 참조값을)
	이경우에서 프로토타입빈의 메서드를 실행하면 실행되는데,문제는 다른곳에서 이 싱글톤빈을 생성시켰을때임
	이경우에 싱글톤빈 내부에 있는 프로토타입빈은,이미 첫시기에 생성이 완료된 프로토타입빈임
	
	즉 싱글톤 내부의 프로토타입은 싱글톤처럼 동작하게됨
	(물론 여러빈에서 같은 프로토타입을 받을경우엔 여러개가 생성되지만,그 각각의 싱글톤빈을 여러번 조회하면 같은 프로토타입이 리턴됨)

	만약 이걸 매번 생성시마다 새로 생성해서 쓰고싶으면,Provider을 사용하면됨

	물론 싱글톤빈이 프로토타입 쓸때마다 스프링컨테이너에 새로 요청할순있음(싱글톤빈내에 ApplicationContext를 넣는 무식한방식)
	이렇게 의존관계를 외부에서 주입받는게 아니라(주는대로쓰는게아니라),내가필요한걸 찾는걸 의존관계탐색(DL)이라고 함
	이러면 문제가 스프링에 너무 종속적인 코드가 됨
	그래서 그냥 프로토타입 빈을 컨테이너에서 대신 찾아주는 정도로만 하는게 ObjectProvider임
	
	사용법은
		@Autowired private ObjectProvider<PrototypeBean> prototypeBeanProvider;//귀찮아서 필드주입,생성자주입해야함 원랜
		
		public int logic(){
			PrototypeBean prototypeBean=prototypeBeanProvider.getObject();
			...
		
		}
	이런식으로 받아다가 쓰면됨
	ObjectProvider는 정확히 프로토타입 재생성용도로만 쓰는게아니라,dl을 대신해주기위한거임
	즉 dl필요한곳에서 사용할수있음
	
	단 이거도 스프링에서 지원하는거라,스프링에 종속되는건 똑같음

	그래서 사용하는게 Provider임
	이걸 쓰려면 javax.inject:javax.inject:1을 build.gradle에 추가해야함

	이거도 사용은
		@Autowired private Provider<PrototypeBean> prototypeBeanProvider;
		public int logic(){
			PrototypeBean prototypeBean=prototypeBeanProvider.get();
			...
		
		}
	이렇게 똑같이 동작함
	얘는 자바표준이고 기능이 단순해서 단위테스트나 mock를 만들기좋음
	단점은
	get밖에없고,라이브러리를 추가해야함
	
	
	이런 프로토타입빈은,어지간하면 다 싱글톤으로 해결이되므로 별로 사용할일은 없음
	근데 dl은
		순환참조
		레지한 인스턴스
	등에서 사용됨
	보통 직접개발할떈 거의안쓰고,라이브러리 분석할때 쓰임
		
		
	웹스코프는 웹환경에서만 동작하고,얘는 해당스코프의 종료시점까지 스프링이 관리를 함(PreDestroy가 발동함)
	종류엔
		request:http요청 하나가 들어오고 나갈때까지 유지되는 스코프,각각의 http요청마다 별도의 빈이 생성되고 관리됨
		session:http세션과 같은 생명주기를 가지는 스코프
		application:서블릭컨텍스트와 같은 생명주기를 가지는 스코프
		websocket:웹소켓과 같은 생명주기를 가지는 스코프
	가 있음	
	
	그리고 스프링은,웹 라이브러리가 없으면 AnnotationConfigApplicationContext을 사용하지만,
	웹 라이브러리가 있으면 AnnotationConfigServletWebServerApplicationContext를 사용함
		
	request 스코프는,동시에 여러 http요청이 왔을때 어떤 요청이 남긴 로그인지 구분하기쉽게 하거나(uuid),
	각 요청마다 따로 처리해야하는게 있을때 사용하기좋음
	사용할땐
		@Scope(value = "request")
	넣으면됨
	uuid는 
		uuid=UUID.randomUUID().toString();
	이렇게 넣을수있음
		
	웹에서
		@ResponseBody
	하면 문자를 그대로 응답으로 보낼수있음
	
	그리고 주의점은,이경우에 싱글톤빈 내에서 리퀘스트빈을 di받으려고하면 di받을수가 없음,
	리퀘스트될때 생성되니까 싱글톤빈 init시점엔 당연히 생성이 안된 빈이기때문
	그래서 init시점이 아닌,리퀘스트가 들어왔을때의 시점으로 해당 빈의 di를 미뤄야함
	이경우에 provider를 사용하면됨
		private final ObjectProvider <MyLogger> myLoggerObjectProvider;
		
		실행시점 함수내부..
			MyLogger myLogger = myLoggerObjectProvider.getObject();
			
	이거말고 프록시를 사용하는 방법도 있음
		@Scope(value = "request",proxyMode = ScopedProxyMode.TARGET_CLASS)
	이렇게 넣고나서 그냥 싱글톤빈 di받는거처럼 쓰면됨
	이거 동작은,가짜 프록시 클래스를 만들어두고,그걸 싱글톤으로 만들어서 일단 주입을 시켜둔다음,
	그걸 콜하면 걔가 리퀘스트빈을 생성해서 리턴하는식으로 동작함
	이 프록시객체는 원본클래스를 상속받아서,이 객체를 사용하는입장에서는 원본인지아닌지 확인안해도 똑같이 사용할수있음
	어짜피 이객체가 싱글톤이라서 전부 공유를 해도,매번 새로운걸 생성시켜서 돌려주니까 싱글톤이든 아니든 의미없기도하고..
	
	뭐 프로바이더든 프록시든,핵심은 필요할떄까지 lazy하게 버티다가 진짜 호출되면 생성한다는게 메인임
	
	그리고 주의할건 뭐냐면,싱글톤처럼 보이지만 싱글톤처럼 동작하지않으니,주의해야함
	헷갈리니까 꼭 필요한데만 써야함(테스트하기도 어렵고..)
	
	그리고 request스코프를 쓰지않고,파라미터로 서비스로 내려보낼수도 있긴한데,이러면 파라미터가 너무많아서 지저분해지고,
	url이나 이런 웹과 관련된 정보가 웹과 관련없는 서비스계층까지 내려가게 돼버림
	웹과 관련된 부분은 딱 컨트롤러단에서 끊고,밑단에서는 순수하게 유지하는게 유지보수관점에서 좋기때문
		
		
10.다음
	별거없음 스킵
		
		