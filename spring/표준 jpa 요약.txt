1.강좌소개
	orm(jpa)는,그냥 컬렉션에 데이터를 담고 빼고 하는걸 데이터베이스와 매핑시키는거
2.jpa소개
	기본적으로 데이터를 저장한다는건,객체를 db에 저장한다는것과 같음
	근데 이때 sql이 들어가면,번역이 들어가서 코스트가 추가로 들어가게됨(넣을때랑 뺄때 둘다(insert와 select))
	
	sql중심적인 개발의 문제는,이 코스트낭비에 있음
	이건 유지보수(컬럼을 추가한다던가)할때 너무너무머리가 아프고,결국 sql에 의존적인 개발이 돼버림
	
	문제는 객체와 rdb는 패러다임이 다름
	크게
		상속
		연관관계
		데이터타입
		데이터 식별방법
	객체는 상속을 받을수있는데,rdb에선 슈퍼타입서브타입으로 풀순있는데,이건 너무복잡해져서 사용하지못할수준임
	객체는 연관관계할때 참조(객체의 주소값)를 사용하고,테이블은 외래키를 사용해서 조인을 해야함(복잡하기도하고,객체가 아닌 객체의id를 사용하게됨 테이블에선) 
	
	즉 객체처럼 모델링하면할수록 sql매퍼에선 매핑작업만 늘어남
	그래서 나온게 orm임
	
	즉 객체를 컬렉션에 저장하고 조회하듯 날로먹을수있음
		em.persist(객체) //저장
		Member member =em.find(memberId) //조회
		memeber.setName("바꿀이름") //수정(트랜잭션안에서 더티체킹으로 해야하긴함 )
		em.remove(객체)  //삭제
	상속받은객체도,그냥 가져오면 알아서 조인해서 가져다줌,연관관계도 알아서해줌(n+1은 조심해야하지만 기본적으론 레지로딩으로 처리하면됨)
	
	그리고 같은 트랜잭션안에선 항상 같은엔티티를 반환해줌(캐시를 사용해서 3번조회를해도 한번만sql날리고 그걸 던져줌)
	그리고 인서트쿼리같은거도 커밋을 하는순간 모아서보내서 통신코스트가 줄어듬(어짜피 트랜잭션커밋전에만 보내면되니)
		
3.jpa시작
	application.properties에 h2사용할때
		spring.datasource.url=jdbc:h2:tcp://localhost/~/test
		spring.datasource.driver-class-name=org.h2.Driver
		spring.datasource.username=sa
		spring.jpa.database-platform=org.hibernate.dialect.H2Dialect //h2방언선택,mysql은 org.hibernate.dialect.MySQL5InnoDBDialect
		spring.jpa.hibernate.ddl-auto=create-drop //현재 등록된 엔티티 스키마 생성 어케할거냐,운영환경에선 validate
	넣고
	빌드 그래들에
		implementation 'org.springframework.boot:spring-boot-starter-jdbc'
		runtimeOnly 'com.h2database:h2'
	추가
	
	@Entity를 붙이면 이건 jpa가 관리하는 객체라는거고,그안에서 @Id는 프라이머리키임
	모든 작업은 트랜잭션 내에서 일어나야함
	
	그리고
		생성=em.persist(객체)
		조회=em.find(객체클래스.class,객체)
		조건조회=em.createQuery("jpql내용",객체클래스.class).getResultList()
		삭제=em.remove(객체)
		수정=em.find(객체)->객체 변형(setter이나 그런거로),persist안해도됨
	조회를 제외한 모든건 트랜잭션안에서 일어나야하고,같은 트랜잭션내에선 조회의 결과값은 항상 같음 
	
	jpql은 테이블이 아닌 객체를 대상으로 쿼리를 짠다고 생각해야함
	이거의 장점은 페이징(setFirstResults,setMaxResults)같은게 쉽고,db의 변경도 쉬움
		
	jpa에서 생성자만들땐 기본생성자를 하나 꼭 넣어줘야함
		protected Member(){}
	이렇게 빈 생성자를 꼭 넣어줘야됨
	
4.영속성 관리
	jpa에서 가장 중요한건,객체와 rdb매핑과 영속성컨텍스트임
	
	깡jpa만 사용한다고 생각해보면,엔티티매니저팩토리로 요청이 오면 엔티티매니저를 만들어서 커넥션풀을 물려서 db를 사용함
	여기서 영속성컨텍스트는 엔티티를 영구저장하는 환경이라는것(em.persist(entity)가,정확히는 db에 저장하는게 아닌,엔티티를 영속화한다,
	영속성컨텍스트에 집어넣는다는것)
	
	여기서 영속성컨텍스트는 논리적개념으로,엔티티매니저를 통해서 영속성컨텍스트에 접근하게됨
	즉 @PersistenceContext를 붙이면,영속성컨텍스트를 생성하고,엔티티매니저에 그걸 di한다고 생각해도됨(그래서 n(em):1(PC)로 동작)
	
	엔티티의 생명주기는,
		비영속:영속성 컨텍스트랑 상관없는 새로운상태(Persist하기전)
		영속:영속성컨텍스트에 의해 관리되는상태(Persist나 더티체킹하고나서)
		준영속:영속성컨텍스트에 의해 관리되다 분리된상태(detach로 영속성컨텍스트에서 빼거나)
		삭제:객체와 db데이터가 같이 삭제된 상태(remove사용)
	순서임
	
	비영속상태는 그냥 객체를 막 생성한 상태임,퍼시스턴트해서 넣기전이라 jpa랑 관계없는상태
	영속상태는 비영속상태인걸 퍼시스트를 해서 영속성 컨텍스트에 넣은상태,즉 영속성컨텍스트에 들어있으면 영속이니까,find해서 찾아도(더티체킹) 영속상태임
	영속상태일때 변화가 있으면,트랜잭션이 끝날때 커밋(플러시)되면서 업데이트가 됨(쿼리가 날아감)
	
	여기서 영속성 컨텍스트의 이점은
		1차캐시:조회할때도 영속에 넣고 거기서 찾는거라,방금 영속에 넣고 커밋하기전에도 조회할수있어짐(쿼리도 안날려도되고)즉 중복쿼리가 줄어듬,중요하진않음
		동일성보장:영속엔티티끼리의 동일성을 애플리케이션레벨에서 보장해줌(member1==member2)
		트랜잭션을 지원하는 쓰기지연:영속객체에 변경이 있을때마다 쿼리를 안날리고, 커밋했을때 최종변경본만 가지고 쿼리를 날릴수있음(버퍼링)
		변경감지(더티체킹):영속컨텍스트 안에있는 엔티티에 변경이 일어나면,따로 뭘 안해도 자동으로 업데이트됨(persist가 그냥 영속컨텍스트에 올리는거니..)
		지연로딩:연관관계매핑이 된 엔티티를 조회할때,프록시를 날려서 진짜로 필요할떄 조회쿼리를 날릴수있고,범위제한같은걸 할필요없이 객체처럼 쓸수있음
	이 있음
	
	더티체킹을 할때 내부적으로 체크하는로직은,트랜잭션시작시의 스냅샷을떠두고,그거랑 비교하는거
		
	플러시는 영속성컨텍스트의 변경내용을 데이터베이스에 반영하는걸 말함(따로 영속성컨텍스트를 건드리진않고,sql저장소를 db에 밀어넣는거만 함)
	플러시가 발생하면
		변경감지
		수정된 엔티티를 쓰기지연sql저장소에 등록
		쓰기지연sql저장소의 쿼리를 데이터베이스에 전송(등록,삭제,수정쿼리)
	순서로 작동함
	
	플러시는,
		em.flush를 직접 호출하거나(쓸일없는데 테스트할때는 가끔사용),
		트랜잭션 커밋이 일어나거나,
		jpql쿼리를 실행하거나(id값으로 서치하는게 아니라 다른값으로 찾기때문에 어쩔수없이 플러시가 일어나게됨)
	하면 일어남
	
	플러시는
		영속성 컨텍스트를 비우지않고
		영속성 컨텍스트를 데이터베이스에 동기화
	임
	트랜잭션이라는 작업단위를 바탕으로->커밋직전에만 동기화하면되니 기본족으로 그때 플러시를 함
		
	
	준영속상태는 영속상태엔티티가 영속컨텍스트에서 분리된 상태
	그래서 이상태에선 변경이 일어나도 db에 적용되지않음
	준영속이 되는 이유는,일반적으로 영속성컨텍스트가 초기화되거나 했을때 일어남,
	em.find하면 영속컨텍스트로 들어가니까 이런식으로 영속으로 처리하면됨
		
		
5.엔티티 매핑
	객체와 테이블매핑
		@Entity
		@Table
	필드와 컬럼매핑
		@Column
	기본키매핑
		@Id
	연관관계매핑
		@ManyToOne
		@OneToMany
		@JoinColumn
		
	@Entity가 붙은 클래스는 jpa가 관리하고,이걸 엔티티라고 함
	jpa를 사용해서 테이블과 매핑할 클래스는 @Entity가 필수임
	이때 지켜야할조건은
		기본생성자는 필수이고(파라미터가없는 public나 protected생성자),
		final이나 enum,인터페이스,inner클래스를 사용할수없고,
		저장할필드에 final을 사용할수없음
	가 있음
	@Entity에서 name으로 jpa에서 사용할 엔티티명을 정할수있는데,안넣으면 클래스명을 그대로사용하고,이렇게쓰는게좋음
	@Table에서 name으로 매핑할 테이블이름을 정할수있고,기본값은 역시 엔티티이름(@Table(name="abc") )
	@Table에서 indexes=@Index()로 인덱스를 넣을수있음
	@Column에서 name으로 매핑할 컬럼명을 정할수있고,기본값은 현재 필드이름
	@Column에서 unique나 length,nullable등으로 컬럼의 설정을 추가할수있음(ddl생성기능)
	@Column에서 insertalbe,updateable로 등록 변경 가능여부를 설정할수있음,즉 한번생성하면 변경못하게할수있는거(기본값 true)
	@Column에서 columnDefinition으로 수동으로 설정값(default같은)을 넣을수있음
	@Enumerated(EnumType.STRING)으로 enum을 사용할수있음(이떄 그냥 STRING쓰는게 좋음..Ordinal쓰레기임)
	@Temporal(TemporalType.TIMESTAMP)으로 날짜타입사용시 붙이면됨(요즘은 안씀,LocalDateTime에선 자동으로 지원하기때문)
	@Lob으로 큰 데이터를 넣을수있음(html을 통으로넣는다거나),문자면 clob,나머지는 blob로 매핑됨
	@Transient로 db에 안올리는걸 표시할수있음(객체메모리에서만 가지고있음)
	
	ddl을 사용하면 애플리케이션 생성시점에 스키마를 자동생성하고,꺼질때 자동삭제 할수있음
	이건 개발서버에서만 사용해야함 당연히,이걸가지고 좀 수정해서 개발에 임포트하면됨
	종류별로
		개발에선 create나 update(변경점만 바꿈,삭제는 안됨)
		테스트코드는 create-drop  
		테스트서버는 update나 validate
		운영이나 스테이징은 validate나 none
	이렇게쓰면됨
	ddl생성기능은 ddl을 생성할때만 사용되고,실제 jpa동작엔 영향을주지않음(notnull이나 length정도는 체크해준다고함),
	그래서 엔티티 컬럼에서 조건걸어도 jpa내부에서 체크하지않고,영속에 넣어서 db에 던져봐야 알수있음
	
	기본키매핑은 @Id로 매핑하고,@GeneratedValue로 오토인크리즈하면됨
	이때 GeneratedValue에서 strategy로 어떤식으로 생성할건지 선택할수있는데(@GeneratedValue(strategy=GeneratedType.AUTO))
		IDENTITY:db에 위임,mysql에서의 오토인크리즈먼트 mysql,코끼리db등등에서 사용됨,
			이때 db에 인서트를 날려야 id값을 알수있기때문에,이걸쓰면,persist시점에 즉시 인서트를 날리고 식별자를 받아옴
		SEQUENCE:오라클용,따로 테이블을 만들어서 최신값을 가지고있고,인서트하면 그걸넣고 +1한다고생각하면됨
		TABLE:키생성용 테이블사용,시퀸스를 모든db에서 사용하려고 만든건데 성능이슈로 잘안쓰는듯?,모든db에서 사용가능
		AUTO:니가 알아서해줘,기본값
	이렇게있음,그냥 오토쓰면됨(기본값쓰면됨)
	
	식별자의 전략은
		키는 Long로 잡고 bigint로 무지성으로 박는게좋음
		not null,유니크(프라이머리키 제약)
		업데이트불가
	자연키로는 어지간하면 안되니까 그냥 만들어쓰자(오토인크리즈나 uuid)
	
	엔티티설계할때 객체자체가 아닌 객체id를 가져오는거의 문제점(테이블이랑 같은구조,테이블의 외래키를 객체에 그대로가져옴,데이터중심설계)은		
		객체그래프의 탐색이 불가능함(그냥 객체자체로 쓰고싶은데 다시 조회를 날려야함)
	
		
6.연관관계 매핑 기초
	포린키를 가져오는게 아닌,객체자체를 연관관계를 매핑해서 사용해야함 orm에선
	정확히는 객체의 참조와 테이블의 외래키를 매핑하는것
	이때 연관관계의 주인이 필요하고(관리의 주체),방향도 있고(단방향,양방향),n:m관계도 있음(하나의x에 여러 y가 소속될수있는지)
	
	연관관계를 사용하지않을땐 포린키를 가지고있는애가 1:n에서 n임(그래야 1정규화를 돌리니까)
	이건 넣을때도 깔끔하지않고,조회할때도 머리아픔(조인해야하는건 다시 또 find를 또 돌려야하는)
	
	즉,객체를 테이블에 맞춰서 데이터중심으로 설계하면,협력관계를 만들수가 없음
		테이블은 외래키로 조인을해서 연관된 테이블을 찾고,
		객체는 참조를 사용해서 연관된 객체를 찾으니까
	이런 차이때문
	
	단방향 연관관계는,한쪽에만 상대객체를 가지고있어서,반대쪽객체에서 이쪽으로 못넘어오는 구조임
	그리고 연관관계가 있으면 @ManyToOne @OneToMany로 싸줘야하는데
	이때
		@ManyToOne
		@JoinColumn(name="TEAM_ID") //조인할 컬럼이름
		private Team team;
	이렇게 하면됨
	이러면 해당 명시된 객체와 매핑된 테이블의 TEAM_ID컬럼과 저게 매핑돼서,객체를 참조할수있어짐
	그리고
		member.setTeam(team);
	으로 그냥 객체를 박아버리면 jpa가 알아서 키꺼내다가 매핑함
	조회할때도
		member.getTeam()
	하면 바로나옴,조인할필요없음
	
	양방향 연관관계는,양쪽으로 서로 왔다갔다할수있는상태,양쪽에 @ManyToOne @OneToMany가 붙어있고,
	1인곳엔 컬렉션으로(list같은),데이터를 n개 가지고있는 상태임
	이경우에도 테이블의 구조는 같은데
	포린키 가지고있는쪽(n)에선 조인하면되고,반대쪽(1)에선 자기키로 멤버에 조인해버리면됨
	
	즉,객체에선 양쪽에서 가지고있지만,테이블에선 한쪽에서만 가지고있다는거,여기서 키를 가지고있는쪽이 연관관계의 주인임
		
	만드는법은
		@OneToMany(mappedBy="team")	//내 반대편에 있는 필드명을 적어주면됨,내가 매핑된곳
		private List<Member>members=new ArrayList<>();
	이렇게하고
		member.getTeam().getMembers();
	이런식으로 현재 내가 들어있는 팀에 소속된 전 멤버를 긁어오거나 할수있음
	이때 컬렉션속에 있는 타입을 보고 해당 객체를 찾은다음,해당 명시된 해당필드에 가서 매핑되는식임
	
	이때 객체와 테이블이 관계를 맺는 차이는
	객체는
		회원->팀 (단방향)
		팀->회원 (단방향)
	테이블은
		회원<->팀 (양방향)
	즉 객체는 단방향 연관관계가 2개가 있는거임(필드가 2개),
		a.getB()
		b.getA()
		class A{ B b;}
		class B{ A a;}
	이렇게
	반대로 테이블은 딱 하나의 필드(외래키)로 조회를하니까 진짜 양방향 연관관계고
	그래서 테이블에 맞추려면,둘중 한군데서 키를 관리해야함(그곳에서 값을 바꿨을때 값이 바뀌는곳),
	이게 연관관계의 주인
	
	만약 멤버를 주인으로 잡으면,팀에서는 수동적으로 변경이 일어나게됨(현재 내 키랑 멤버전체를 서치하는거니)
	반대로 멤버에선 자기자신을 바꿔서 자기가 속한 팀을 바꿔버릴수있음(이게 더 편함)
	팀을 주인으로 잡으면,멤버쪽에선  수동적으로 변경이 일어나게됨(팀의 리스트속에 속한id값들만 그 팀의 멤버),
	반대로 팀에선 자기자신의 리스트를 수정해서 멤버를 추가하거나 제거할수있음
	그래서 두 사례 모두 캐스케이드를 하지않으면 정합성에 문제가생길수있음
	
	이때 연관관계의 주인의 규칙은
		객체 두개중 하나를 주인으로 지정해야함
		주인만 외래키를 관리(등록,수정)
		주인이 아닌쪽은 읽기만 가능 //중요,여기다 값을 변경시켜봐야 아무일도 안일어남(update가 나가지않음)
		주인은 mappedBy사용하면안됨
		주인이 아니면 mappedBy로 주인선택
	즉 mappedBy가 있으면 set이 불가능하고,관계를 끊으려면 주인한테가서 외래키를 변경하거나 해야함
	
	이때 주인선택방법은
		외래키가 있는곳을 주인으로 선택(1:n일때 n쪽을 주인으로),자동차와 바퀴중에선 바퀴가 연관관계의 주인
	하면됨
	
	양방향매핑시 가장 많이하는실수는,연관관계 주인에 값을 입력하지않는거(서브에만 값을 넣는다던지)
	서브(mappedBy걸린거)의 변경은 jpa에서 전혀 감지하지않음(읽기전용이니)
	사실 양쪽다 넣어주면 됨(이게 객체관점에선 더 좋음)
	안그러면 영속성컨텍스트내에서 서치할떄 값이 없어서(db에서 인서트해야 생기니까) null이 들어있음 트랜잭션끝나기전까지
	물론 트랜잭션들어가고나서 find하면 제대로 값이 들어가지만...
	그리고 테스트케이스 작성할때도,이렇게돼야 작성이 편해짐(메모리내에서 처리되니까)
	
	이거 까먹을수있으니까,만들때 연관관계 편의메소드를 만들어서 그거로 넣는게 편함
		public void changeTeam(Team team){
			this.team=team;
			team.getMembers().add(this);
		}
	이렇게
	이런 편의메소드는 양쪽에(주인이나 서브나)다 만들수있는데,하나만 만들어두는게 좋음(무한루프날수있고,어짜피 하나만 호출하니까)
	
	그리고 toString()이나 lombok,json라이브러리등에서 서로 무한루프를 형성할수있으니까 조심해야함
		멤버toString에 팀 toString이 있고,
		팀toString에 멤버 toString이 있을때
	롬복tostring같은데서 저런식으로 만들어버리니까 조심해야함(이건 사용안하는게좋음)
	
	그리고 엔티티를 직접 컨트롤러에서 사용할때,json라이브러리등에서 저걸 저렇게 뽑아버릴수있으니까,dto를 사용해야함(엔티티를 직접 반환하면안됨)
	
	
	정리하면
		단방향매핑만으로 이미 연관관계매핑은 완료된것(다쪽에서 manyToOne나 OneToOne거는거,주인쪽에서만 걸어두면됨)
		양방향매핑은 그냥 객체그래프기능(반대편으로조회)가 추가된거뿐
		jpql사용할때 이걸(역방향조회)사용할일이 많아서 넣은거
		단방향매핑을 잘 만들어두고,양방향은 필요해지면 넣어도됨(처음엔 그냥 단방향만 만들어두고,필요해지면 그때 넣으면됨,테이블은 그대로니)
	이게 됨
	
	
	
	
7.다양한 연관관계 매핑
	연관관계 매핑시 고려해야할건
		다중성(일대일 일대다같은거,다대다는 사용하지않음)
		단방향,양방향(테이블은 외래키하나로 양쪽조인이 됨,객체는 단방향이 하나면 단방향,2개면 양방향)
		연관관계주인(단방향 2개중에 어떤걸 주도권을 줄지,둘다주면 일관성에서 머리아파지니까)

	다대일매핑은,당연히 다쪽에 외래키가 가고,
	양방향으로 하면 이쪽이 주인이 됨,
	외래키있는걸 기준으로 객체에서 참조를 넣으면됨(Team team==TEAM_ID)
	이걸 가장 많이쓰고,이거의 반대는 일대다
	양방향쓰려면 반대쪽에서 list만들고,거기에 mappedBy넣은 일대다(@oneToMany(mappedBy="반대쪽의 매핑시킬 필드명" ))넣으면됨
	
	일대다매핑은(양방향매핑이 아닌 단방향매핑),일이 연관관계의 주인임(잘 사용하진않음)
	이경우에도 테이블에선 다쪽에 포린키가 들어가는건똑같은데,객체에선 일쪽에서 연관관계를 관리하는거임,
	즉,일쪽의 리스트필드를 수정하면,다쪽의 포린키에 변화가생김(1을 수정해도 jpa가 알아서 다쪽을 수정함)
	이경우 주의해야할건,꼭 @JoinColumn를 넣어야함(테이블쪽에서의 포린키명을 넣으면됨),아니면 조인테이블을 알아서 생성해버림(중간에 테이블을 만듬)
	이게 좀 직관적이지않고(객체와 테이블의 구조가 다르니),
	1쪽을 수정하면 n쪽에 업데이트가 나가고 그래서 잘 사용하진않음(차라리 다대일 양방향으로 만들어버리는게 나음)
	
	일대일매핑은 그 반대도 일대일임
	그리고 이건 주테이블(많이 엑세스하는 테이블)에 외래키를 넣어도되고,대상테이블(주테이블보다 엑세스빈도가 낮은테이블)에 외래키를 넣어도됨
	그리고 외래키에 유니크제약을 걸어두면편함
		@OneToOne
		@JoinColumn(name="LOCKER_ID")
		private Locker locker
	주테이블에 외래키를넣은 단방향은,그냥 생긴거그대로 하면됨(다대일단방향이랑 생긴건똑같음)
	양방향도 그냥 서브객체에 대상필드 넣으면됨
		@OneToOne(mappedBy="locker")		
		private Member member
	이렇게
	즉 외래키가 있는곳이 연관관계의 주인
	이경우 설계입장에선 최대한,나중에 변경점이 있을거같은곳중,일대다중 다가 될만한곳에 넣어두는게 나중에편한데,
	성능측면이든 뭐든 주테이블에 외래키를 넣는게 개발자입장에선 좋음(조회를 많이할만한 트리에서 위에있는곳,멤버와 락커중에선 멤버)
	그래야 락커id가 비어있으면 이런로직도 돌리기편하고(없으면 null이니),여러면에서 좋음
	
	주테이블의 외래키넣는건
		주테이블에 외래키를두고 대상테이블을 찾음
		개발자선호
		jpa매핑편리
		주테이블만 조회해도 대상테이블에 데이터가있는지 확인가능
		단,값이없으면 외래키에 null이 들어감
	대상테이블에 외래키넣는건
		대상테이블에 외래키가 존재
		dba선호
		주테이블과 대상테이블을 일대일에서 일대다로 바꿀때 테이블구조가 유지됨
		단,프록시기능의 한계로 지연로딩해도 항상 즉시로딩됨
	그래서 주테이블에 넣는게 좋긴함
	
	다대다매핑은 안써서,일대다 다대일로 풀어내서 써야함(중간엔티티를 만들고,걔를 엮어버려야함)
	
	
	
	
8.고급매핑	
	상속관계매핑은,기본적으로 rdb에는 상속이 없어서,db의 서브타입 슈퍼타입을 매핑하는걸 객체의 상속과 맞춰서 쓰는거
	즉 공통적인 속성을 상위에 떼두고,자기만가진걸 하위로 내리는거(슈퍼,서브)
	
	이걸 구현하는 방식은,3가지방법이 있음
		각각테이블로 변환(조인전략),상위테이블과 하위테이블을 직접 만들고,포린키로 조인해가는식,상위에는 타입정보,하위에는 포린키를 두면됨
		통합테이블로 변환(단일테이블 전략),한테이블에 다떄려박고,타입정보 명시한뒤에 필요한값만 넣어두는식
		서브타입테이블로 변환(구현클래스마다 테이블전략,잘안씀),그냥 상위테이블없이 하위에 다때려박는식
	이렇게
	조인일경우 조회하면 자동으로 조인해서 가져옴
	
	jpa에서 하위에서 extends 받고,부모클래스에서
		@Ingeritance(strategy=InheritanceType.XXX) //JOINED,SINGLE_TABLE,TABLE_PER_CLASS중 선택
		@DiscriminatorColumn //조인전략시 추가,하위타입명시컬럼생성,기본값은 DYTPE로 생성됨,바꾸려면 name사용
	로 적용한뒤에,만약 dtype에 들어가는 타입명을 바꾸고싶으면(기본값은 엔티티명),자식클래스에서
		@DiscriminatorValue("A")
	이걸 붙여두면됨
	
	조인전략은
		테이블이 정규화됨
		외래키참조무결성 제약 사용가능
		저장공간효율화
		단,조회시 조인이 많이들어가서 성능저하
		단,조회쿼리가 복잡
		단,저장시 인서트2번호출
	단일테이블전략은
		조인필요없어서 조회가빠름
		조회쿼리단순
		단,자식엔티티매핑컬럼은 전부 널허용
		단,단일테이블에 다때려박으니까 테이블이커져서 조회성능이 오히려 낮아질수있음
	구현클래스마다 테이블전략은 안씀(부모클래스타입으로 조회할시,즉 여러테이블 동시조회시 union all로 다 돌려버려서 조회성능이 낮고 쿼리가 복잡함)
	
	즉 기본은 조인으로 잡고,좀 작고단순하다싶으면 단일테이블써도됨
	
	
	@MappedSuperclass는 공통매핑속성이 존재할때,속성만 상속해서 쓰고싶을때(db랑 상관없이 jpa에서만)사용함
	즉 그냥 똑같은거 계속치는거 귀찮아서 날로먹는거
	
	이건 클래스를 만들고 거기에 @MappedSuperclass붙이고 그걸 extends로 상속받으면됨
	이러면 해당매핑정보들이 들어가게됨
	얘는 당연히 엔티티가 아니니 em.find안되고,추상클래스로 만드는게좋음
	
	
	
	
	
9.프록시와 연관관계 정리	
	프록시는 지연로딩을 사용할때,연계해서 조회해야할거에 대신 밀어넣고 사용함
	프록시를 사용하려면 em.getReference()를 사용하면됨
	이때 em.find()를 사용하면 프록시를 사용하지않고,getReference를 사용하면 프록시를 사용함
	이거의 차이점은,find는 find를 쳤을때 바로 db에 조회를때리고(정확히는 1차캐시보고 없으면 db조회),
	getReference는 실제로 값을 사용할때(getName같은걸 쳤을때)조회를 날림
	
	이떄 프록시객체는 실제객체를 상속받아서 만들어지고,안에 target에 실제객체가 들어가고,
	프록시객체 메소드를 호출하면 프록시객체는 실제객체의 메소드를 호출함
	기본적으론 진짜객체인지 프록시객체인지 신경안써도 되야하는데(겉모양과 값이 같음),
	자바한계상 타입비교시 ==로 비교가 안되고  instance of 사용해야함(실제엔티티로 바뀌는게 아니라 상속받는거니)
	
	프록시객체는 처음사용할때 한번만 초기화됨(조회치면 target에 들어오는거)
	그리고 영속성컨텍스트에 이미 그 엔티티가 있으면,getReference해도 실제엔티티가 반환됨(그러니까 무조건 instance of써야됨 안그러면 원인못찾음)
		jpa는 한 영속성컨텍스트내에서 같은객체를 비교하면 항상 true가 떠야해서,이미 올라간게있으면 그거가져와서 true를 보장해주는거임
		그래서 같은객체를 프록시로 2번들고와도 ==시 true고,
		프록시-find순으로 가져와서 ==해도,find를 강제로 프록시로 생성해버리고 값을밀어넣어서 ==을 보장해줌
		(그래서 프록시든 아니든 신경안쓸수있게 만들어야함)
	그리고 준영속일때 프록시를 초기화하면 예외가 터짐
		프록시생성
		영속성컨텍스트 클로즈나 detach로 영속성컨텍스트에서 제거-준영속
		프록시에 접근시 예외발생(lazyInitializationException)
	이렇게되면 터짐
	보통 트랜잭션하고 영속성컨텍스트를 맞추는데,트랜잭션 끝나고 뭐 조회하거나 그러면 예외터지는거
	
	프록시의 초기화여부확인은
		PersistenceUnitUtil.isLoaded(엔티티)
	클래스확인은
		entity.getClass().getName()
	프록시 강제초기화는(jpa표준엔 없음,그냥 메소드호출해야함)
		org.hibernate.Hibernate.initialize(엔티티)
	
	사실 getReference는 거의사용되지않는데,프록시는 지연로딩때문에 알아야함
	
	지연로딩은,만약 특정객체안에 다른객체가 있을때,다른객체를 나중에 사용할떄(getReference처럼)늦게 조회하는거임(프록시로 뱉음)
	jpa기본값은 즉시로딩이라,무조건 lazy로 넣어줘야함
		@ManyToOne(fetch=FetchType.LAZY)
	가급적이면 지연로딩만 사용해야함,즉시로딩은 jpql에서 n+1(각 쿼리조회물 하나당 select가 하나씩나가서,첫쿼리1+결과물n)이 터질확률이 높음
	그리고 ManyToOne이나 OneToOne은 기본값이 즉시로딩,OneToMany는 기본이 지연로딩
	그래서 ManyToOne이나 OneToOne은 지연로딩으로 바꿔줘야함
	
	그래서 무조건 지연로딩을 사용하고
		페치조인을 사용(동적으로 원하는애들만 선택해서 가져옴) //기본적으로 이거사용함
		엔티티그래프랑 어노테이션사용
		배치사이즈 사용
	으로 쿼리를 줄여서 사용할수있음
	
	케스케이드는 특정 엔티티를 영속으로 만들떄,연관된 엔티티도 같이 영속으로 만들고싶을때 사용함(자동 persist같은느낌)
	부모밑에 자식을 100개넣어두면,persist를 101번 날려야하는데 이걸 부모만 persist하고 해결하고싶다는거
	즉 연관관계매핑이랑은 아무상관없고,그냥 jpa단에서 날로먹으려고 있는기능임,어짜피 쿼리는 똑같이나감
	사용법은
		@OneToMany(cascade=CascadeType.XXX)// ALL,PERSIST(영속만),REMOVE(삭제만)
	하면됨
	
	이건 하나의부모가 자식을 관리할때(첨부파일같은)는 유용함,근데 여러부모가 하나를 공유할땐 사용하면안됨(차일드를 2가지이상의 테이블에서 접근할때)
	즉 단일엔티티에 종속적일때만 사용할수있음
	
	고아객체는 부모엔티티와 연관관계가 끊어진 자식엔티티를 말함
	이걸 자동으로 삭제하는 옵션이 있음
		@OneToMany(onphanRemoval=true)
	이러면 부모객체의 컬렉션에서 자식을 제거하면,자동으로 delete쿼리가 나가는 옵션임
	
	이거도 하나의 부모만 접근할수있을때만 사용해야함,여러군데서 접근가능한데에 이거있으면 머리아파짐
	그리고 부모를 지워버리면,속해있는 모든게 고아가돼서,전부 삭제됨
	
	그리고 cascade.all과 onphanRemoval을 둘다켜두면,부모만 가지고 자식의 생명주기를 관리할수있음
	이건 ddd의 애그리거트루트에서 유용함
	
	
10.값 타입
	jpa에서 데이터타입은,최상위엔 엔티티타입과 값타입이 있음
	엔티티타입은 @Entity가 붙은 객체,이건 데이터가 변해도 식별자(id)로 계속 추적함
	값타입은 int같은거나,단순 값으로 사용하는 객체들,이런건 추적하지않음(id가 없으니 추적하지못함)
	
	jpa에서 값타입은
		기본값타입
		임베디드타입
		컬렉션값타입
	이 있음
	
	여기서 기본값은 int나 double같은 기본타입,integer,Long같은 래퍼클래스,String등이 있음
	이런 기본값타입들은,생명주기를 엔티티에 의존하고(회원을 삭제하면 이름필드도 같이삭제),값타입은 서로 공유가 되면 당연히 안됨
	이때 int나 double같은건 절대 공유가 되지않고(깊은복사를 함),integer이나 String같은건 공유가능한객체이긴한데,변경이 불가능해서 괜찮음
	
	임베디드타입은,새로운 값타입을 정의한거임,
	보통 기본값들을 모아서 만들어서 복합값타입이라고도 함
	이건 int나 string과 같은 값 타입에 속함
	즉,속성들을 모아둔 클래스같은걸 말함(값클래스)
	이걸 jpa에서 사용할땐
		@Embeddable //값타입을 정의하는클래스에 표시(클래스위에 넣으면됨)
		@Embedded //값타입을 사용하는곳에 표시(생성필드에 넣으면됨)
		기본생성자 필수
	이거의 장점은
		재사용가능
		응집도가 높음
		해당값타입만 사용하는 의미있는메소드를 만들수있음
		이런 임베디드타입을 포함한 모든 값타입은,이걸 소유한 엔티티에 생명주기를 의존함
	이걸 테이블에 매핑할땐,임베디드타입안의 필드를 상위클래스에 치환하는느낌으로 동작함(그냥 엔티티꺼 묶어서 밑으로 뽑은거니..)
	즉
		임베디드타입은 엔티티의 값일 뿐이고
		이걸 사용하든 아니든 매핑테이블은 같음
		단,이걸 사용하면 객체와 테이블을 세밀하게 매핑할수있고(모델링할때 추상적으로 쓸수있어서 편함)
		잘설계한 orm은 매핑테이블보다 클래스수가 더 많은게 보통
	임
	
	그리고 한 엔티티안에서 같은값타입을 두번이상 사용하면,이름이 겹치게되는데
	이경우엔
		@AttributeOverrides
		@AttributeOverride
	로 컬럼명을 재정의할수있음
	그리고 임베디드타입이 null이면,안에 들어있는게 전부 null취급임
	
	값타입은 단순하고 안전하게 다룰수있어야함
	그래서 임베디드타입같은걸 여러엔티티에서 공유하면 사이드이펙트가 터짐(addressA를 memberA memberB에서 공유했는데 수정한다던지)
	그래서 같은 인스턴스를 공유하는게 아닌,그걸 복사해서 사용해야함(new address)
	근데 이걸 공유를 못하게 막을방법이 없음
	
	공유를 막을순없으니,객체를 수정하지못하게해야함(불변객체)
	그래서 생성자로만 값을 설정하고,세터를 절대 만들면안됨(없애거나,private로 만들거나)
	
	값타입은,인스턴스가 달라도,그안의 값이 같으면 같은걸로 봐야함(a와 b가 10일떄 a==b ->true)
	이걸 복합값타입도 이렇게 나와야하는데,자바특성상 안되니까 항상 equals()를 사용해서 비교해야함
	(직접 만들어둬야함,기본값으론 ==으로 동작하니까 값긁어와서 필드를 ==비교하는식으로,int같은건 ==먹히니까 그렇게해서 메소드만들어야함)
	그리고 equals구현했으면 당연히 hashCode()도 구현해야 해쉬맵에서 사용할수있음
	이때 알트인서트에 생성있으니까 이거쓰면됨,이떄 getter로 생성 체크하면됨
		
	
	값타입 컬렉션은 list<Address>같은거(set이나 list같은 컬렉션하위클래스들)
	문제는 컬렉션은 db테이블에 매칭시킬때,그대로넣으면 1정규화가 깨짐
	그래서 이런 컬렉션은 따로 테이블로 빠지고,일대다로 구성되게됨
	이걸 만들떈
		@ElementCollection
		@CollectionTable(name="ADDRESS_HISTORY",joinColumns=@JoinColumn(name="MEMBER_ID)) //현재클래스내에서 포린키
		private List<Address> addressHistory=new ArrayList<>();
	이런식으로 하면됨
	그리고 복합타입이 아닌 단일타입(string같은)거는
	@Column으로 컬럼이름바꾸는걸 허용해줌
	이런 값타입컬렉션은,캐스케이드와 고아객체제거기능을 필수로 가지게됨(부모객체의 라이프사이클에 완전히 종속됨)
	
	이런 컬렉션에 값추가할땐
		member.getAddressHistory().add(address1);
		member.getAddressHistory().add(address2);
	이렇게 더하면되고(이경우 그냥 member퍼시스트하면 쟤들테이블에 들어감)
	
	조회할땐 그냥둬도 지연로딩으로 가져옴,기본값이 지연로딩임
	
	수정할땐,삭제하고 삽입해야함(remove후 add)
	이때 복합값타입이면,remove의 동작은 equals로 동작하니,해당값과 똑같은걸 remove안에 넣어서 지우고,새로 add하면됨(그래서 equals를 구현해야함)
	이떄 문제는,이렇게하면 해당테이블의 포린키를 전부삭제하고 리무브한걸 제외한걸 다시 삽입하는식이라서 부하가 큼(식별자가 없어서)
	즉,값타입컬렉션의 제약사항은
		id가 없고
		변경후 추적이 어려움
		이때 변경이 일어나면,주인엔티티와 관련된 모든 데이터를 삭제하고,해당데이터를 제외한 나머지를 다시삽입해야함
		그래서 만약 사용하려면,값타입컬렉션을 매핑하는테이블은,모든 컬럼을 묶어서 기본키를 구성해야함(null사용불가,중복불가)
	같은 문제가 있음
	그래서 값타입컬렉션은 사용하지않는게 좋음
	
	차라리 일대다를 명시적으로 사용하는게 좋음
		일대다 엔티티를 만들고,
		거기서 값타입을 사용하고,
		거기에 캐스케이드에 고아객체제거를 달아서 
	값타입컬렉션처럼 사용하면됨
	이러면 id값이 있으니까 이상하게 동작안함
	
	값타입은 정말 값타입이라 판단될때만(식별자가 필요하지않고,지속해서 추적,변경할일이 없을때)사용해야함
	엔티티를 혼동해서 값타입으로 만들면 안됨
		
11.객체지향쿼리언어1-기본문법		
	jpa는 jpql이나 queryDSL(동적쿼리용),jdbc직접사용,mybatis,SpringJdbcTemplate등으로 쿼리를 날릴수있음(쌩쿼리도 날릴수있음)
	jpql은,가장 단순한 조회방법
	얘는 엔티티객체를 대상으로 검색함(테이블이 아님)
	정확히는 이걸 작성하면 알아서 sql로 바꿔서 돌려서 가져와서 리턴함
	대충
		em.createQuery("select m From Member m where m.name like '%hello%'",Member.class)
		  .getResultList();
	이런식으로,테이블대상이 아닌 엔티티대상으로 쿼리를 날리면,밑단에서 알아서 처리하고 리턴함(밑을 추상화해서 특정 db에 의존하지않음)
	
	queryDSL은 동적쿼리할때 주로사용됨,스트링이 아닌 자바코드인게 장점(자바코드로 jpql을 짜는거)
		list<Member> result=queryFactory
			.select(order)
			.from(order)
			.join(order.member,member)
			.where(statusEq(orderSearch),memberNameEq(orderSearch))
			.fetch() //쿼리끝났다는걸 알림
	이런식으로 짜면됨,거의 sql과 똑같음
	
	그리고 jpql이 아닌 생쿼리나 jdbc템플릿같은걸 사용할땐,persist만이 아닌 플러시까지 생각해야함(얘들은 1차캐시안보니까 db에 밀어넣어야함)
	
	기본적으로 jpql에서 select는
		select
		from
		where
		groupby
		having
		orderby
	순서임(select m from Member m where m.age>18)
	기본적으로 엔티티와 속성은 대소문자구분을 하고,jpql키워드는 대소문자구분을 하지않음
	엔티티를 대상으로 쿼리하는거니,엔티티이름(디폴트값은 클래스명)을 사용하고,별칭은 필수임
	
	그리고 기본펑션들은 다 제공됨
		select
			count(m),
			sum(m.age),
			avg(m.age),
			max(m.age),
			min(m.age)
		from Member m
	이런거
	
	그리고 typeQuery와 query가 있는데,typeQuery는 반환타입이 명확할떄 사용하고,Query는 명확하지않을때 사용
		TypedQuery<Member> query
		Query query
	즉,타입정보를 주면 TypedQuery,안주면 Query(from절에 엔티티 자체가 아닌 특정값을 타입여러개로 가져왔을때 query사용)
	
	그리고 query.getResultList()로 반환을 받을수있고(결과가 하나이상일떄,없으면 빈리스트반환)
	
	결과가 딱 하나이면 query.getSingleResult()로 받을수있음,
	이떄 결과가없으면 noResultExcepiton,
	두개이상이면 nonUniqueResultException
	이건
		Member res=query.getSingleResult()
	이런식으로 엔티티로 바로받을수있는 장점이있는데,결과없을때 예외터지는거떄문에 잘안쓰고,스프링dataJPA에서 비슷한게 있어서 그거씀
	
	파라미터바인딩은
		TypedQuery<Member> query=em.createQuery("select m from Member m where m.age>:userAge",Member.class);
		query.setParameter("userAge",18);
		query.getResultList();
	이렇게 넣고쓰면됨
	
	프로젝션은 select에서 대상을 지정하는거(sql에서 *같은거)
	jpa에선 이 대상이 엔티티,임베디드타입,스칼라타입(인트,스트링같은)이 가능함(rdb는 스칼라만 가능한데,그걸 추상적으로 확장한거)
		select m from member m //엔티티  Member.class
		select m.team from member m //엔티티  Team.class
		select m.address from member m //임베디드 Address.class
		select m.username,m.age from member m //스칼라 오브젝트로 리턴함
	그리고 distinct로 중복을 제거할수있음
		select distinct m.username,m.age from member m	
	그리고 jpql로 쿼리로 가져온값들은 영속성 컨텍스트에 자동으로 들어감(서치된거 전부 다 들어감)
	그래서 수정하면 바로 적용됨
	
	그리고 해당엔티티 안에 속한 하위엔티티만 받을떈,해당엔티티클래스로 받아야하는데,어지간하면 명시적으로 받는게 좋음(나가는sql이랑 비슷하게)
		em.createQuery("select t from member m join m.team t" ,Team.class)
	그리고 단순값(스칼라)의 묶음을 dto로 바로 조회할수있음(제일 많이 쓸듯)
		select new jpabook.jpql.UserDTO(m.username,m.age) from Member m
	이때 패키지명을 포함한 전체클래스명을 입력해줘야하고(queryDSL에서 극복가능),순서와 타입이 일치하는 생성자가 필요함
	
	jpa는 페이징을
		setFirstResult(시작위치) //0부터시작
		setMaxResults(조회데이터수)
	두가지로 해결함
		em.createQuery("select m From Member m where m.name like '%hello% order by m.age desc'",Member.class)
		  .setFirstResult(0)
		  .setMaxResults(10)
		  .getResultList();		
	그냥 이런식으로 던지면됨
	
	jpa에서 조인은
		select m from Member m join m.team t //이너조인(겹치는거만 출력),기본적으로 둘의 id를 비교
		select m from Member m left join m.team t //아우터조인(안겹치는건 null로 출력)
		select count(m) from Member m,Team t where m.username=t.name//세타조인,양쪽을 곱해서 nxm을 만든뒤에 where로 거름
	jpa에서 on으로 조인대상을 필터링하거나,연관관계없는 엔티티 외부조인을 할수있음
		
	조인대상필터링은,조인연산의 코스트를 감소시키려고 사용하는거
		select m,t from member m Left join m.team t on t.name='A'
	이렇게하면 팀이 먼저 필터링돼서,a인거만 남고 그거로 조인을 검
	
	연관관계 없는 엔티티 외부조인은
		select m,t from member m left join team t on m.username=t.name //막조인
	이렇게 연관관계가 없어도 조인을 거는거
		
	
	jpa는 서브쿼리는 똑같이 쓰면됨
		select m from Member m where m.age>(select avg(m2.age) from Member m2)
		select m from Member m where (select count(o) from Order o where m=o.member)>0
	이렇게 메인쿼리에서 값을 가져올수도있고,따로 돌릴수도있음(따로돌리는게 당연히 성능은 잘나옴)
	
	이 서브쿼리 지원 함수가 있는데
		exist (서브쿼리):서브쿼리에 결과가 존재하면 참(앞에 not붙일수있음)
		all(서브쿼리) 모두 만족하면 참
		any(서브쿼리) 조건을 하나라도 만족하면 참
		some(서브쿼리)조건을 하나라도 만족하면 참 //두개는 같음 
		in (서브쿼리) 서브쿼리의 결과중 하나라도 같은게 있으면 참(앞에 not붙일수있음)
	예시로
		select m from Member m
		where exists(select t from m.team t where t.name='teamA') //팀 a 소속인 팀원
		
		select m from Member m
		where m.team=any(select t from team t) //어떤팀이든 팀에 소속된 회원
	jpa에선 where와 having,select 에서만 서브쿼리를 할수있음(from에선 불가능,최신하이버네이트(6)에선 가능),그래서 이경우엔 조인으로 해결해야함	
		
		
		
		
		
		
		
		
		
		
		
	