1.협력하는 객체들의 공동체
	객체지향을 설명할때,현실에 빗대서 설명하는건,특정 딱 한요소만 설명할수있고 나머지는 동시에 설명할수없음
	하지만 그게 각 요소에 대해서 이해하긴 편하기때문에 자주사용함
	
	객체지향에서 가장 중요한건,역할,책임,협력임
	객체들은 자신이 할수없는 일을 만나면,이걸 해결해주길 요청(리퀘스트)함,그리고 요청받은객체도 다시 요청을 할수있으니,요청은 연쇄적으로 발생함
	그리고 요청에 대해 응답하는것도,요청의 연쇄와 반대방향으로 연쇄적으로 전달됨
	
	역할은 어떤 협력에 참여하는 특정사람이 그 안에서 차지하는 책임,의무임
	어떤 역할을 맡았으면,그 역할을 수행할 책임이 생김,즉 역할음 책임을 암시함
	여기서 중요한점은
		여러사람이 동일한 역할을 수행할수 있음:요청자입장에선 누가하든 결과만 나오면됨
		역할은 대체가능성을 의미함:어떤객체든 같은역할을 수행가능하면 신경쓸필요가없음
		책임수행방법은 알아서해도됨:결과만 나오면,수행방법은 캡슐속에있음
		한객체가 동시에 여러역할을 수행할수있음:단,원칙상으로 권장되진않음
	객체지향 설계라는건,적절한 객체에게 적절한 책임을 할당하는것부터 시작됨
	
	역할은 객체의 페르소나고,관련성높은 책임의 집합임
	
	객체의 덕목은
		객체는 충분히 협력적이어야함,외부의 도움을 무시하고 모든걸 스스로처리하려고하면 내부복잡도가 너무올라가서 자멸함
		그리고 이건 객체가 다른객체의 명령에 따라 행동하는 수동적인 존재라는게 아니라,단순히 다른 요청에 응답할뿐임,
		그리고 요청을 수행할지말지도 요청받은객체가 스스로 결정함
		
		객체는 충분히 자율적이어야함,즉 자기스스로의 원칙에 따라 자신의 행동을 스스로 결정하고 책임져야함,즉 결과물만 리턴하는 책임을 가지고,
		그 결과물을 어떻게만들진 지시받지않고 자기가 스스로결정함
		
	
	객체는 상태와 행동을 같이 지닌 실체임
	이말은 객체가 협력에 참여하기위해 어떤 행동을 해야하면,그 행동을 하는데 필요한 상태도 같이 가지고있어야 한다는걸 의미함
	객체의 자율성은,객체의 내부와 외부를 명확히 구분하는것으로 부터 나옴
	객체의 사적인 부분은 객체 스스로 관리하고 외부에서 간섭할수없게 차단해야하고,객체의 외부에선 접근이 허락된수단을 통해서만 객체와 의사소통해야함
	객체는 다른 객체가 무엇을 수행하는진 알수있지만,어떻게 수행하는진 알수없음
	즉 객체는,상태와 행위를 하나의 단위로 묶는 자율적인 존재임
	
	즉 데이터와 프로세스를 객체라는 하나의 틀안에 함께 묶어서 객체의 자율성을 보장하는게 절차지향과 객체지향의 가장 핵심적인 차이임
	
	객체끼리 서로 의사소통을 하는 방법은 메시지임,메시지를 보내는애를 샌더,받는애를 리시버라고 부름
	
	객체가 메시지를 받았으면,이해할수있는지 여부를 판단한후 정해진 자신의 방법에 따라 메시지를 처리함,이 방법을 메서드라고 함
	객체지향에서 메서드는,클래스 안에 포함된 함수나 프로시저를 통해 구현됨,따라서 어떤 객체에 메시지를 전송하면,
	결과적으로 메시지에 대응되는 특정메서드가 실행됨
	
	이 메시지와 메서드의 분리는,객체의 협력에 참여하는 객체들간의 자율성을 증진시킴
	이건 캡슐화와도 깊이 관련되어있음
	
	즉 객체지향이란
		시스템을 상호작용하는 자율적인 객체들의 공동체로 바라보고,객체를 이용해 시스템을 분할하는 방법
		자율적인 객체란 상태와 행위를 함께지니며,스스로를 책임지는 객체
		객체는 시스템의 행위를 구현하기위해 다른객체와 협력함,각 객체는 협력내에서 정해진 역할을 수행하고,역할은 관련책임의 집합
		객체는 다른 객체와 협력하기위해 메시지를 전송하고,메시지수신객체는 메시지를 처리하는데 적합한 메서드를 자율선택함
		
	객체지향에서의 클래스는,중요한 구성요소인건 맞지만,객체지향의 핵심을 이루는 중심개념이라고 하긴어려움
	클래스가 없는 프로토타입계열 언어에서도 객체지향이 가능하고,거긴 상속없이 위임을 기반으로 동작하니까
	
		
2.이상한 나라의 객체		
		
		
		
	