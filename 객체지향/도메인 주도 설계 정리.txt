1.지식탐구
  모든 소프트웨어는 그 소프트웨어를 사용하는 사용자의 활동이나 관심사에 관련되어있고,
  사용자가 프로그램을 사용하는 대상영역이 바로 해당 프로그램의 도메인임
  보통 도메인은 컴퓨터와 거의 관련이 없음
  
  이때 개발을 하려고 하면 도메인 지식의 양에 압도되지않기위해서 사용하는게 모델임
  모델은 지식을 선택적으로 단순화하고 의식적으로 구조화한 형태임
  
  도메인모델은 특정 다이어그램이 아니라,다이어그램이 전달하고자 하는 아이디어임
  도메인모델이란 도메인 전문가의 머릿속에 존재하는 지식을 엄격하게 구성하고 선택적으로 추상화한것
  우리는 다이어그램을 이용해 모델을 표현하고 전달할수있음
  
  도메인 모델링은 가능한 한 사실적인 모델을 만드는게 아니고,단순히 필요한 결과를 내는 소프트웨어를 만드는것도 아님
  전체 도메인중 일부분만을 취합해서 만들어내는것
  
  모델의 쓰임새는
    모델과 핵심설계는 서로 영향을 주며 구체화됨,모델을 의미있게 만들고 모델이 최종산출물에 적용되게 보장하는건 모델과 구현간의 긴밀한 연결임
	  또한 유지보수에도 도움을 줌(모델을 통해 코드를 해석할수있기때문)
	모델은 모든 팀 구성원이 사용하는 언어의 중추임,모델과 구현이 서로 연결되어있으므로 개발자와 도메인전문가 모두 번역없이 이걸 사용해 대화를 나눌수있음
	모델은 지식의 정수만을 뽑아낸것,모델은 도메인지식을 조직화하고 가장 중요한 요소를 구분하는 팀의 합의된 방식임
	  모델에는 용어의 선택이유,개념의 분류,분류된 지식을 연관시킬때의 도메인에 관한 우리의 사고방식이 담겨있음
  임
  
  소프트웨어란 사용자를 위해 도메인에 관련된 문제를 해결하는데 있음
  그밖의 모든 기능도 이런 기본목적을 뒷받침하는데 있고
  도메인이 복잡하면 이같은 문제해결의 난이도는 올라가고 개발자는 도메인연구에 몰두해야하지만
  보통 개발자는 이런걸 좋아하지않음(무질서하고 도움이 안될거같기때문)
  
  그런데 여기서도 얻을수있는게 많고,즉 모델을 만드는데 사용할수있는 체계적인 사고방식과 불규칙한 소프트웨어 어플리케이션에 질서를 부여할수있는 설계기법이 있음
  
  도메인 모델을 만들땐 도메인전문가와 같이 객체 상호작용다이어그램을 그려가면서 하면 좋음
  즉 브레인스토밍과 정제를 반복해가는식
  
  이렇게 코드를 좀 작성해서 예제를 만들수있을수있을정도로 이해가 됐다고 생각하면,매우 간단한(인프라같은거 다 제외한) 예제를 만들어서 같이 돌려보는거임
  이렇게 하면 데모엔 전문가는 모델이 의미하는바와 동작하는  소프트웨어와 모델의 관계를 더 명확하게 이해할수있음
  이러면 소통이 양방향이 되고,내가 새로 알게된 지식을 모델에 통합하고 그걸 소프트웨어에 반영하는걸 도메인전문가가 보고 피드백을 줄수있음
  
  1.효과적인 모델링의 요소
    즉 모델링을 하는 방법은
	  모델과 구현의 연계:초기 프로토타입을 토대로 본질적인 연결고리를 만들고,모든 반복주기 내내 그걸 유지
	  모델을 기반으로 하는 언어 정제:프로젝트에 참여하는 모두가 모델에서 용어를 바로 끄집어내어 모델의 구조와 일관되게 문장을 만들수있게 해야함
	  풍부한 지식이 담긴 모델 개발:객체는 행위를 지니고 규칙을 이행함,또한 모델에는 다양한 지식이 포함되어있음
	  모델의 정제:모델이 점차 완전해지면서 중요한 개념이 더해지고,쓸모없거나 중요하지않다고 판명된 개념이 제거됐다는거도 중요함
	  브레인스토밍과 실험:스케치를 비롯해 결합된 언어를 바탕으로 토의를 모델에 대한 실험실로 변모시켜,수백가지 변종을 연습하고 시도하고 평가해봐야함
	이런식의 요소들이 있어야함
	
  2.지식탐구
    도메인 모델링을 수행할때도 지식을 면밀히 탐구하고,
	많은양의 정보속에서 아주 미미한 관련성을 찾아내서 전체를 이해할수있는 간결한 관점을 찾아 체계적인 아이디어를 차례로 시도해봄
	이과정에서 수많은 모델이 시도,거부,변형되고,모든 세부사항에 맞는 일련의 추상적 개념이 나타나면 성공임
	이렇게 해서 뽑아낸 정수는 가장 적절한것으로 밝혀진 특정지식을 엄밀하게 표현한것
	
	지식탐구는 혼자하는활동이 아니고,개발자와 도메인전문가로 구성된팀은 대체로 개발자가 이끄는가운데 협업함
	그들은 함께 정보를 받아들여 그걸 유용한 형태로 만듬
	원재료가 되는 지식은 도메인 전문가의 머릿속이나 기존 시스템 사용자,동일한 도메인에 관련된 레거시팀의 기술팀,다른프로젝트에서 얻은 경험에서 나옴
	이런 지식은 프로젝트나 업무에 활용할 용도로 작성된 문서의 형태를 띄고,대화의 형태로 존재할때가 훨씬 더 많음
	
	이런방식은 워터폴에서는 하기힘들었고,또한 지식의 축적또한 일어나지않음(특히 도메인전문가에게)
	또한 추상화를 하지않으면 지식을 축적하기 힘듬
	물론 결과를 도메인전문가에게 보여주고,전문가가 원하는대로만 하면 만들수는 있는데,대단한건 만들기힘듬
	
	애초에 추상화를 시작해서 더 많은 일을 해낼수있는 모델로 발전시키는게 좋고,
	이 과정은 도메인 전문가와의 협업을 통해 기술적인 측면 뿐 아니라 개념적인 측면에서도 발전되어야함
	
	즉 개발자는 기능만을 기계적으로 만들지않고,자신이 보조하는 업무의 중요원칙을 배우고,
	도메인전문가는 자신의 지식의 정수를 추출하는법을 배우고 소프트웨어에서 중요한 개념적 엄밀함을 이해하게됨
	
	이런식으로 만들어진 모델은,프로젝트 내내 흘러가는 정보들을 조직화하는 도구로 자리잡음
	모델은 요구사항 분석에 초점을 맞추고,이건 프로그래밍과 설계와 밀접한 관계를맺음
	모델은 도메인을 이해하는데 실용적이고 유용해야하고,쉽게 구현하고 이해하기에 충분할만큼 엄밀해야함

  3.지속적인 학습
    소프트웨어를 작성하기 시작할때,우리는 충분히 알지 못한 상태에서 시작함
	또한 모든 프로젝트에서는 지식이 새어나감(이직등)
	그래서 이것이상으로 의식적으로 지식을 함양해야하는데,이건 기술적인것과 도메인모델링 모두를 포함하고,해당 프로젝트의 도메인도 포함됨
	
	개발자가 필요로하는건 도메인전문가가 되는길이 아님,
	중요한건 도메인 전문가와 대화할수있고,그걸 어플리케이션에 관련되게 번역하고,내가 만든 어플리케이션이 정상동작하는지 점검할수있게되는거임

  4.풍부한 지식이 담긴 설계
    모델에 포함된 지식은 단순한 명사찾기 이상임
	도메인에 관련된 엔티티만큼 업무활동과 규칙도 도메인에 중요한데,도메인엔 다양한 범주의 개념이 존재하고,지식탐구는 이런 통찰력을 반영하는 모델을 만들어냄
	개발자는 모델의 변경에 맞춰 구현을 리팩터링해서 모델의 변경된사항을 표현하고,어플리케이션에서는 그런 지식을 활용함
	
	이땐 엔티티와 값을 너머 이런 활동들이 이뤄져야함
	이건 여러 업무규칙간 모순이 있을수있기때문(특정 화물은 10%만큼 오버부킹해도된다던가)
	도메인전문가는 보통 이런걸 무의식적으로 처리하기때문에 이걸 의식적으로 끌어내야함
	
	즉 감춰진 개념을 추출할수있어야함
	또한 이렇게 생긴 규칙을 도메인전문가가 해당부분의 코드를 보고 이해할수있게 해야함(메서드추출이나 클래스추출을 사용해서 패턴의 사용등) 
	
	즉 이런 명시적인 설계는 
	  프로그래머와 그밖의 모든이가 규칙의 특성을 불분명한 계산이 아니라 중요한 업무규칙임을 알아야하고
	  프로그래머는 도메인전문가에게 그들이 이해할수있는 수준에서의 기술적 산출물,심지어 코드까지 보여주고(안내해주면서) 피드백을 받을수있어야함
	
  5.심층 모델
    유용한 모델은 겉으로 드러나있는 경우가 거의없음
	보통 처음에 중요하게 생각했던 피상적인 모델요소를 버리거나 관점을 바꾸게됨 
	그래서 처음엔 나타나기 힘들지만 문제의 핵심을 관통하는 포착하기 힘든 추상화가 서서히 드러나게됨
	
  
2.의사소통과 언어 사용 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  