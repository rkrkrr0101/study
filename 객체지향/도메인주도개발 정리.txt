1.도메인모델 시작하기
*1.도메인이란?
  소프트웨어의 대상은 필요로하는 기능을 제공해야함
  이때 해결하고자 하는 문제영역이 도메인에 해당하게됨
  
  한 도메인은 여러 하위도메인으로 나뉠수있음
  
*2.도메인전문가와 개발자간 지식공유
  개발자는 요구사항을 분석하고 설계해서 코드를 만듬
  이떄 요구사항은 첫단추라서,요구사항을 잘못 분석하면 엉뚱한 기능을 만들게됨
  
  즉 코딩에 앞서 요구사항을 올바르게 이해하는게 제일 중요함
  이때 가장 간단한 방법은 개발자와 전문가가 직접 대화하는것
  
  개발자와 이해관계자,도메인전문가가 같은 지식을 공유하고 직접 소통할수록 도메인전문가가 원하는 제품을 만들 가능성이 높아짐
  단,도메인전문가라고해서 항상 올바른 요구사항을 주는게 아님
  도메인전문가가 말하는 기능을 듣고,왜 필요한지까지 듣고나서 더 합리적인 방향이 있다면 제안하는것도 좋음
  
*3.도메인모델
  도메인모델은 특정 도메인을 개념적으로 표현한것
  도메인모델을 사용하면 여러 관계자들이 동일한모습으로 도메인을 이해하고 지식을 공유할수있음
  
  도메인모델은 객체로만 만들어야하는건 아님,그냥 상태전이로 모델링할수도있음
  근데 객체가 제일 쓰기 편하긴함
  
  도메인모델은 도메인 자체를 이해하기위한개념모델이라,구현할땐 구현기술에 맞는 구현모델이 따로 필요함
  이때 구현모델이 개념모델을 최대한 따르게 하는게 좋은데,그래서 객체모델로 개념모델을 잡으면 편하긴함(물론 개념모델은 트랜잭션등의 고려가 없어서 직접꽂을순없음)
  
*4.도메인모델 패턴
  도메인계층은 도메인의 핵심규칙을 구현함(서비스레이어 밑의 도메인층)
  도메인규칙을 객체지향기법으로 구현하는게 도메인모델패턴임
  
  이때 도메인로직을 위치시킬때,해당 객체가 그일을 가장 잘 처리할수있는 지식이 있는곳에 두는게 좋음
  다떠나서 도메인모델에만 핵심로직이 있다는게 변경시 영향을 덜줄수있어서 좋음
    
*5.도메인모델 도출
  도메인을 모델링할때 기본이 되는 작업은,핵심구성요소,규칙,기능을 찾는것
  이건 요구사항에서 출발함
  
  요구사항을 가지고 상세구현을 할순없지만,관련기능을 해당객체에 메서드로 추가할순있음
  또한 해당 요구사항에서 필요한 정보들을 필드로 추가할수있음
  또한 제약조건을 가지고 메서드에 예외처리를 하는식으로 도메인규칙을 구현할수있음
  
  이런식으로 일부는 구현수준까지,일부는 이름정도만 결정한후 이걸 공유해서 논의하면됨
  
6.엔티티와 밸류
    
  
  
  
  
  
  
  
  
  
  
  
  