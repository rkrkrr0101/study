1.리팩터링 예시
	프로그램이 새기능을 추가하기에 편한구조가 아니면,먼저 기능을 추가하기 쉬운형태로 리팩터링한다음 원하는기능을 추가해야함
	
	리팩터링을 할때 제일먼저해야할건 테스트코드임
	테스트코드가 있어야 변경할때 믿고 변경할수있음
	
	긴 함수를 리팩터링할때는 보통 중복이 발생할 부분에서 중복부분을 빼내는게 잘 사용됨
	case문처럼 분기처리가 일어나는 부분을 뽑아내는게 가장 쉬운 리팩터링임(컨트롤알트m)
	그래서 추가가 일어날때 거기내에서만 수정을 하면되게하는게 효과적
	
	수정을 했으면 바로 테스트코드를 돌려보면됨,아무리 작은수정이라도 테스트를 켜는게좋음(그래야 문제찾기기쉬움)
	그리고 테스트가 성공했으면 바로 깃에 커밋해서 기록하는식(하나의 리팩터링마다 커밋)
	
	함수추출을 하고 테스트가 성공했으면,해당함수의 표현이 명확하지않은부분(함수명이나 변수명,파라미터등)을 수정하는게좋음
	
	그리고 동적타입언어를 쓸땐 타입명이 이름에 드러나면 좋고,매개변수의 역할이 뚜렷하지않을땐 앞에 a나 an을 붙이면 좋음
	그리고 다른 매개변수에서 값을 받아올수있어서 필요없어진 매개변수가 있으면 제거하는게좋음(임시변수를 질의변수로 바꾸기)
	그리고 인라인이 가능하다면 인라인하는게 더 깔끔해짐
	
	지역변수를 제거하는건,추출작업이 훨씬 쉬워지기때문에 가치가있음
	
	그리고 함수내부에서 작업을 단위로 쪼갤수있다면,다 쪼개서 추출해내는게 좋음
	각 함수는 하나의 일만 하고,메인함수에서는 결합만 하게 만드는게좋음
	
	임시변수는 자신의 루틴내부에서만 의미가있어서 루틴이 길고 복잡해지기쉬움
	그래서 임시변수를 제거하고 함수화시키는게좋음
	
	함수이름지을때는 일단 떠오르는걸 붙이고,나중에 더 적절한이름이 떠오르면 바꾸면됨
	
	그리고 반복문을 쪼개는건 그렇게 큰 성능이슈를 내지못해서 막 쪼개도됨(컴파일러가 알아서 최적화함)
	그리고 문제가 생기더라도 수정하기가 더 쉬움
	즉 리팩터링성능문제는 특별한경우가 아니면 일단 무시하고,리팩터링후에 다시 손대는게나음
	
	만약 리팩터링중간에 테스트가 실패하고 원인을 못찾았다면,가장 최근커밋으로 돌아간다음 리팩터링 단계를 더 잘게 쪼개서 다시 시도하면 찾기쉬움
	
	
	리팩터링은
		코드를 각 논리적인 요소로 쪼개고(최소단위근처로)
		쪼개진 함수들을 의미있는단위로 묶어서 함수를 만들고,메인함수에서 조립
	하는식으로 접근하는게좋음
	이때 의미있는단위로 묶인 함수끼리 서로 연계가 되어야하니,입출력에는 신경써줘야함
	
	가변데이터는 쉽게 상하니까,불변데이터를 사용하는게좋음
	
	조건부로직은 다형성으로 바꿀수있음,즉 case문을 사용하는곳은 상속을 사용해서 처리하는게 깔끔함
	케이스문은 팩터리쪽으로 이동시켜서 거기서 하위클래스를 뽑아내는식
	
	리팩터링은 수정할때 얼마나 쉽게 수정할수있냐를 기준으로 접근하는게좋음
	그리고 제일 중요한건,단계를 잘게 나누고 매번 컴파일-테스트를 하는것
	
2.리팩터링 원칙
  1.리팩터링 정의
	리팩터링은 소프트웨어의 겉보기동작은 유지한채 내부만 수정하는것
	그래서 리팩터링을 할때 작동결과가 바뀌면안됨
	리팩터링하다가 코드가 깨짐->리팩터링이 아님
	
	리팩터링과 성능최적화는 비슷하지만 목적이 다름
	리팩터링은 코드를 이해하기쉽고 수정하기 쉽게 만드는것,성능최적화는 단순히 성능에만 신경쓰는것
	그래서 성능이 빡빡하게 제한걸리면 코드가 어려워지기쉬움
	
  2.두개의 모자	
	소프트웨어를 개발할때는 기능추가만 하거나,리팩터링만 하거나 둘중 하나만 해야함
	기능추가때문 기존코드는 전혀 건드리지않고 기능추가만 하고,리팩터링때는 기능추가는 전혀하지않고 리팩터링만 해야함
	리팩터링시에는 놓친테스트케이스를 발견하지않는한 테스트추가도 하지않음(인터페이스를 부득이하게 변경해야할때만 기존테스트를 수정)
	
	소프트웨어를 개발하면서 이 두가지 모자를 바꿔가면서 하는게 좋음(기능추가하려고 각잡으면서 리팩터링하면 더 쉬울거같으면 리팩터링만 하고 이후 기능추가)
	즉 짧게 치더라도 내가 뭘하려고하는지를 항상 신경쓰면서 작업을 해야함
	
  3.리팩터링하는 이유	
	리팩터링을 하면 코드를 건강한상태로 유지하는걸 도와줌(기능추가를 쉽게해줌)
	그리고 중복코드는 수정할때 여러군데를 수정해야하고,빼먹을수도 있음,이걸 밖으로 빼서 유일하게만드는게 바람직한설계의 핵심임
	또한 소프트웨어를 이해하기 쉬워짐,코드는 다른사람(혹은 미래의 나)이 수정해야할수있고,그사람이 이해하기쉬워야 수정이 쉬워짐
	이때 컴퓨터에게 시키려는일과 이를 표현한 코드의 차이를 최대한 줄여야함
	그리고 코드를 이해하기쉬우면 버그를 찾기도 쉬움
	
	즉,리팩터링을 하면 코드개발속도가 올라감
	
  4.언제 리팩터링을 해야할까
	리팩터링은
		1.처음에는 그냥 기능만듬
		2.비슷한일을 두번째하면 그냥 기능만듬
		3.비슷한일을 세번째하면 리팩터링
	이렇게 3번반복되면 리팩터링하면됨
	리팩터링을 하기 가장 좋은시점은,기능추가직전임
	어짜피 기능추가하려면 코드를 이해해야하고,
	구조를 건드려서 기능추가작업을 하기 쉽게만들면,기능추가도 하면서 싼가격에 리팩터링을 할수있음
	이때 중복이날거같으면 해당부분을 추출해서 함수화시킨후 그걸호출해서 쓰는식
	버그를 잡을떄도 오류를 일으키는코드가 여러군데 복제되어 퍼져있으면,일단 그걸 한곳으로 합친다음 작업하는게 훨씬편함
	또한 질의코드에 섞여있는 갱신로직을 분리하면,각 단계별로 처리할수있어서 꼬일확률을 줄일수있음
	
	이처럼 준비를 위한 리팩터링이 가장 하기편하고 좋음
	
	코드를 이해할때도 리팩터링모자를 쓰고 하면 좀 더 이해가 쉬움
	이해가 안되는부분을 좀 더 의도가 명확히 드러나게 수정하는식으로 접근하는거임
	리팩터링은 머리가 이해한걸 코드로 옮겨담을수있고,그걸 테스트돌려보면 그게 맞았는지도 확인할수있음
	즉 어떤역할을 하는지 이해됐지만 이름이 직관적이지않은 변수는 적절한이름으로 바꿔주고,긴함수를 잘게 나누고있으면,
	코드가 깔끔하게 정리되어 설계가 눈에 들어오기시작함
	
	그리고 코드를 파악하던중 이상한부분을 찾으면(로직이 쓸데없이 복잡하거나,매개변수하나면되는데 여러개쓸때),간단한일이면 즉시 고치고
	복잡한일이면 메모만 남기고 하던거 끝내고나서 처리하는식(쓰레기줍기 리팩터링)
	리팩터링은 어짜피 코드가 깨지면안되니까,조금씩해도 코드에 영향을 안주고 할수있음
	
	리팩터링을 날잡고 하는게 아닌(물론 안했으면 이렇게해야할수도있음,그래도 최대한줄여야함),
	평상시에 기능을 추가하거나 버그를 잡는동안 리팩터링도 같이 하는게좋음
	잘 작성된 코드도,다른코드가 추가되면서 리팩터링해야할수도 있게되고 그럼
	이때도 잘 작성되면 리팩터링도 쉬워짐
	
	라이브러리를 교체하는등 큰규모의 리팩터링을 할떈,기존것과 새것을 모두 포용하는 추상인터페이스부터 만들고,
	기존코드가 추상인터페이스를 호출하게하고나면 라이브러리교체가 훨씬 쉬워짐(추상화로 갈아타기)
	
	코드리뷰할때도 리팩터링하는게 도움이됨,실제로 코드가 더 나아지기도하고 더 명확한 결과로 보이니까
	
	그리고 굳이 수정할필요가 없다면 리팩터링하지않아도됨
	외부api호출하는거처럼 쓰는 코드면 걍 둬도되고,내부동작을 이해해야할때 리팩터링하면됨
	그리고 리팩터링보다 처음부터만드는게 쉬워보이면 걍 새로만드는게나음
	
  5.리팩터링시 고려할문제
    리팩터링이 필요해보이지만,추가하려는 기능이 매우작을땐,그냥 각보고 하는게 맞는데,이럴때도 보통은 리팩터링하는게 맞는선택일 확률이 높음
	새기능을 추가해넣는게 더 쉬워지는 리팩터링이 보이면 리팩터링하는게 나음
	반면 건드리지않아도 기능추가랑 상관없거나,그렇게 불편하지않으면 걍 기능추가함	
	리팩터링은 단순히 기능추가를 더 쉽게하기위해서+처음볼때 이해하기쉽게 하기위해서 하는거임
	
	코드소유권은 빡빡하게 관리하는게 아닌 팀단위로 느슨하게 관리하는게 리팩터링하기쉬움(함수명변경같은거 귀찮아짐)
	
	브랜치따서 작업할때도 계속 풀한뒤에 푸시하는,ci를 반복해야 나중에 합치기가 쉬움
	이걸 각자 최소 하루한번은 해야함
	이렇게하면 머지도 쉬워지지만 리팩터링과 궁합도 좋음(익스트림프로그래밍)
	
	리팩터링의 가장 큰 특성은 겉보기동작이 똑같이 유지된다는것
	만약 실수를 저질렀는데 해결이 안된다면 이전커밋으로 돌아가면됨
	이떄 가장 중요한건,테스트스위트가 잘되어있어야 검사를 믿을수있고,버그를 걱정하지않게됨
	
	레거시시스템을 파악할떄도 리팩터링이 도움됨,근데 이때도 테스트가없으면 리팩터링을 할수없음
	이때는 테스트를 보강해서 리팩터링을 하면서 이해해야하는데,어려운문제임 그래서 테스트를 잘 적어둬야함
	테스트가 있어도 복잡한애들은 어려운데,이때는 한부분씩 나눠서 하나씩 처리하는게 그나마쉬움
	그리고 이때는 자주 보게되는부분을 더 많이 리팩터링하는게 효율적임
	
	db를 리팩터링할때는 데이터마이그레이션스크립트를 작성하고,모든 변경을 이거로 처리하는식으로 하면 할수있음
  
  6.리팩터링,아키택처,애그니
	리팩터링은 미래의 요구사항을 추측하지않고,현재 필요한거만 처리하면서 확장성을 남겨둬서 미래에 확장을 쉽게만듬
	호출할때 항상 같은값을 넘기는 매개변수는 매개변수에서 제거하는식(애그니)
  
  7.리팩터링과 개발프로세스
	팀으로 개발할때 리팩터링을 하려면,각 팀원이 다른사람의 작업을 방해하지않으면서 언제든 리팩터링할수있어야함
	그래서 ci가 필요하고,팀원 각자가 수행한 리팩터링결과를 빠르게 동료와 공유할수있음
	즉 테스트코드,ci,리팩터링 3가지를 같이쓰면 상승효과가 있음
	이 3개를 쓰면 애그니방식으로 개발할수있고,애그니는 또한 리팩터링을 더 쉽게만들어줌(추측보단 단순한시스템이 변경이 쉬움)

  8.리팩터링과 성능
	프로그램의 케이스마다 이건 선택을 다르게해야함
	일반적으론 리팩터링하고,성능이 필요할때 성능최적화를 하는게 효율적임
	성능최적화를 할땐 항상 검증하고 검증결과를 바탕으로 어디서 성능을 많이쓰는지를 확인한후에 변경을 해야함(컴파일러동작을 예측하기어려우니)
	
3.코드에서 나는 악취	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	