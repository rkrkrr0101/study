1.리팩터링 예시
	프로그램이 새기능을 추가하기에 편한구조가 아니면,먼저 기능을 추가하기 쉬운형태로 리팩터링한다음 원하는기능을 추가해야함
	
	리팩터링을 할때 제일먼저해야할건 테스트코드임
	테스트코드가 있어야 변경할때 믿고 변경할수있음
	
	긴 함수를 리팩터링할때는 보통 중복이 발생할 부분에서 중복부분을 빼내는게 잘 사용됨
	case문처럼 분기처리가 일어나는 부분을 뽑아내는게 가장 쉬운 리팩터링임(컨트롤알트m)
	그래서 추가가 일어날때 거기내에서만 수정을 하면되게하는게 효과적
	
	수정을 했으면 바로 테스트코드를 돌려보면됨,아무리 작은수정이라도 테스트를 켜는게좋음(그래야 문제찾기기쉬움)
	그리고 테스트가 성공했으면 바로 깃에 커밋해서 기록하는식(하나의 리팩터링마다 커밋)
	
	함수추출을 하고 테스트가 성공했으면,해당함수의 표현이 명확하지않은부분(함수명이나 변수명,파라미터등)을 수정하는게좋음
	
	그리고 동적타입언어를 쓸땐 타입명이 이름에 드러나면 좋고,매개변수의 역할이 뚜렷하지않을땐 앞에 a나 an을 붙이면 좋음
	그리고 다른 매개변수에서 값을 받아올수있어서 필요없어진 매개변수가 있으면 제거하는게좋음(임시변수를 질의변수로 바꾸기)
	그리고 인라인이 가능하다면 인라인하는게 더 깔끔해짐
	
	지역변수를 제거하는건,추출작업이 훨씬 쉬워지기때문에 가치가있음
	
	그리고 함수내부에서 작업을 단위로 쪼갤수있다면,다 쪼개서 추출해내는게 좋음
	각 함수는 하나의 일만 하고,메인함수에서는 결합만 하게 만드는게좋음
	
	임시변수는 자신의 루틴내부에서만 의미가있어서 루틴이 길고 복잡해지기쉬움
	그래서 임시변수를 제거하고 함수화시키는게좋음
	
	함수이름지을때는 일단 떠오르는걸 붙이고,나중에 더 적절한이름이 떠오르면 바꾸면됨
	
	그리고 반복문을 쪼개는건 그렇게 큰 성능이슈를 내지못해서 막 쪼개도됨(컴파일러가 알아서 최적화함)
	그리고 문제가 생기더라도 수정하기가 더 쉬움
	즉 리팩터링성능문제는 특별한경우가 아니면 일단 무시하고,리팩터링후에 다시 손대는게나음
	
	만약 리팩터링중간에 테스트가 실패하고 원인을 못찾았다면,가장 최근커밋으로 돌아간다음 리팩터링 단계를 더 잘게 쪼개서 다시 시도하면 찾기쉬움
	
	
	리팩터링은
		코드를 각 논리적인 요소로 쪼개고(최소단위근처로)
		쪼개진 함수들을 의미있는단위로 묶어서 함수를 만들고,메인함수에서 조립
	하는식으로 접근하는게좋음
	이때 의미있는단위로 묶인 함수끼리 서로 연계가 되어야하니,입출력에는 신경써줘야함
	
	가변데이터는 쉽게 상하니까,불변데이터를 사용하는게좋음
	
	조건부로직은 다형성으로 바꿀수있음,즉 case문을 사용하는곳은 상속을 사용해서 처리하는게 깔끔함
	케이스문은 팩터리쪽으로 이동시켜서 거기서 하위클래스를 뽑아내는식
	
	리팩터링은 수정할때 얼마나 쉽게 수정할수있냐를 기준으로 접근하는게좋음
	그리고 제일 중요한건,단계를 잘게 나누고 매번 컴파일-테스트를 하는것
	
2.리팩터링 원칙	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	