1.계층형 아키텍처의 문제는 무엇일까?
  1.계층형 아키텍처는 db주도설계를 유도한다
	레이어드의 토대는 db임
	웹계층은 도메인(서비스+도메인)계층에 의존하고,도메인은 영속성계층에 의존하기때문에 자연스럽게 db에 의존하게됨
	문제는,우리는 상태가 아닌 행동을 중심으로 모델링해야하는데,
	db를 토대로 아키텍처를 만들게되면 상태중심이 되고 도메인보다 영속성계층을 먼저 만들게됨
	도메인부터 만들어야 로직을 제대로 이해했는지 확인할수있고,그걸 확인한후에 그걸기반으로 영속성계층과 웹계층을 붙여야하기때문
	
	특히 orm을 사용할경우,엔티티는 영속성계층에 위치하고,영속성모델을 비즈니스모델처럼 사용하게 되는경우가 흔함
	이러면 영속성코드가 도메인코드에 녹아들어가서 둘중 하나만 변경하기가 힘들어짐

  2.지름길을 택하기 쉬워진다
	기본적으로 레이어드아키텍처는 같은계층이나 아래의 계층에만 접근가능함
	문제는 상위계층에 위치한 컴포넌트를 아래로 내려버리는거에 대해 제한이 없다는게 문제임
	그래서 모든게 영속성계층으로 내려가게되고,영속성계층이 엄청나게 커지게됨

  3.테스트하기 어려워짐
	계층을 건너뛰는게 발생하면(웹에서 영속성계층으로 직접접근),도메인계층이 웹계층에 계속 책임이 섞이고,핵심도메인로직이 퍼저나갈수 있고,
	제일 큰 문제는,웹 테스트에서 도메인뿐아니라 영속성계층도 모킹해야한다는것
	이러면 단위테스트의 복잡도가 올라감

  4.유스케이스를 숨긴다
	레이어드는 도메인서비스의 너비에 대해 강제하지않기때문에,엄청나게 큰 유스케이스 하나가 모든걸 다 처리하게될수있음
	이러면 넓은 서비스는 영속성에 많은 의존성을 갖게되고,웹계층의 많은 컴포넌트가 여기에 의존하게됨
	이러면 테스트도 어려워지고,유스케이스를 책임지는 서비스를 찾기도 어려워짐
	
	그래서 특화된 좁은 도메인서비스가 유스케이스 하나씩만 담당하는게 좋음

  5.동시작업이 어려워짐
	영속성이 나와야 도메인이 나오고,도메인이 나와야 웹이 나오기때문에 레이어드에서는 동시작업이 매우힘듬
	물론 인터페이스를 먼저 정의하고 하면 되지만,이건 db주도설계를 하지 않아야 가능함,db주도설계는 영속성로직과 도메인로직이 뒤섞이기때문

  6.유지보수가능한 소프트웨어를 만드는데 어떻게 도움이 될까?
	레이어드도 잘쓰면(여러 추가규칙을 붙이면)괜찮지만,잘못된 방향으로 흘러가는걸 막지못한다는게 문제임
	
2.의존성 역전하기	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	