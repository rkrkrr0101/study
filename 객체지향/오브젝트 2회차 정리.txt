1.객체,설계
  1.티켓판매 구현
	스킵
  2.무엇이 문제인가
	시키지않고 직접 일을 처리하는거는,결합도가 매우올라가는 주요 원인임
	소프트웨어 모듈은 3가지 기능을 가져야하는데
		실행중에 제대로 동작하는것
		변경을 위해 동작하는것
		코드를 읽는사람과 의사소통하는것
	임
	
	시키지않고 직접 일을 처리하는거는,변경에도 취약하고,다른사람이 읽을때도 불편함
	모든 객체들은 자기의 데이터내에서는 모두 능동적으로 일을 처리할수있어야함
	이래야 보는사람이 이해하기도 쉽고,구현에 의존하지않고 api에 의존할수있기때문에 결합도도 낮아짐
	
	그냥 메서드를 호출하는거는,메서드명만 봐도 무슨일인지 알수있지만,직접 처리하는거는 신경써서 봐야하기때문에 이해하는데 코스트가 더 들어가고
	가장 큰 문제는,하위객체를 변경하는데(필드명을 바꾼다던지),상위객체의 코드도 같이 변경되어야하게 됨
	즉 변경에 취약해짐,그래서 강의존이 아닌 약의존,구현에 의존하지말고 인터페이스에 의존해서 결합도를 낮춰야한다는것

  3.설계 개선하기
	그래서 객체들은 가급적이면,자신이 의존하는 대상의 필드가 아닌 메서드에 의존하는게 좋고,
	대상의 대상같이 체인타고 내려가는건 삼가는게 좋음,또한 합성한 필드들은 프라이빗으로 잠궈두는게 좋고(캡슐화)
	
	이렇게 캡슐화가 잘 되면,의존성이 내려가고 인터페이스에만 의존하기때문에 변경이 쉬워짐
	또한 코드를 다른사람이 봐도 api명에 다 나와있으니 이해도 쉬움
	
	즉 핵심은 객체내부의 상태를 캡슐화하고,객체간에 메시지(api)를 통해서만 상호작용하는것
	이러면 자기가 쓰는 객체 내부가 어떻게 되어있건 전혀 신경쓰지않아도 됨
	
	이게 객체지향의 핵심임
	
	절차지향의 경우,데이터와 프로세스(처리로직)이 서로 별개로 위치함(도메인은 데이터홀더역할만 수행함)
	이거의 가장 큰 문제는,데이터의 변경으로 인한 영향을 지역적으로 고립시키기가 힘듬,
	데이터와 로직이 서로 떨어져있고,다른 해당 데이터를 사용하는데서는 디깅해서 사용해버리니까
	이러면 변경이 어려워짐
	
	변경하기 쉬운 설계는,한번에 하나의 클래스만 변경할수 있는 설계임
	그래서 자신이 가진 데이터를 처리하는건 자신이 하는,즉 데이터와 프로세스를 같은 모듈에 위치하게 하는방식이 객체지향임
	즉 책임(기능)을 묶어서,가능한 객체들이 하나의 책임만 가지게 하는것,하위로직이면 하위로직,하위로직묶음이면 호출하는책임만 받는식으로

	객체지향에서는 독재자가 존재하지않고 각 객체에 책임이 적절하게 분배됨
	그래서 각 객체는 자신을 스스로 책임짐
	
	객체지향의 핵심은 불필요한 의존성을 제거해서 객체사이의 결합도를 낮추는것,이걸위해 캡슐화,dip,합성등을 사용할수있음
	
	그리고 이렇게 캡슐화를 하다보면 결합도와 응집도를 트레이드오프해야 하는 경우도 있음

  4.객체지향 설계
	설계는 코드를 배치하는것
	변경을 수용할수있는 설계가 중요한 이유는,요구사항이 항상 변경되기 때문임
	그래서 좋은설계란 오늘 완성해야하는 기능을 구현하는 동시에 내일 쉽게 변경할수있는 코드를 짜는것
	또한 변경을 수용할수 있는 설계는,코드를 변경할때 버그가 추가될 가능성이 높은데,이렇게 코드를 수정하려는 의지가 꺾이는게 위험해서임
	
	그래서 의존성을 효율적으로 통제해서 변경에 좀 더 수월하게 대응할수있는 가능성을 높이는것
	
	또한 변경가능한 코드는 이해하기쉬운코드임
	객체지향은 우리가 생각한대로 돌아가는경우가 많아서 예상가능한 코드를 짜기가 쉬워짐
	

2.객체지향 프로그래밍
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	