1.객체,설계
	소프트웨어는,동작해야하고,간단히 변경되어야하고,코드를 읽는사람이 읽기쉬워야함
	
	객체는 항상 능동적이어야함
	즉,자신의 데이터를 사용해서 발생하는 행위는,객체 자기자신이 메서드로 가지고있고,
	외부는 단지 그 인터페이스를 가지고 메서드를 사용할수있을뿐이어야함(로직의 책임은 객체가 가지고,로직을 콜하는 책임만 외부가 가짐)
	이렇게되면,콜하는쪽(mvc에선 서비스)의 부담이 엄청나게 줄어들고,하위도메인의 변경점이 있더라도,상위까지 전파되지않음
	즉 세부사항에 의존하게되면,변경에 취약해지고,그냥 선언적으로 시킬수있어야함
	
	즉,알필요없는건 다 캡슐화해서 객체안에 밀어넣고,공개된 인터페이스만 사용해라,
	객체가 할수있는일까지 도맡아서 하지마라
	구현에 의존하지말고,인터페이스에 의존하라는것(강의존이 아닌 약의존으로 만들어라)
	이러려면,게터세터를 생성하지 않는것으로 좀 더 쉽게할수있음(제약을통해)
	
	이렇게,데이터와 행위를 묶어두는걸 일반적으로 객체지향이라고 하고,데이터와 행위가 다른모듈로 나눠진걸 절차지향이라고 함
	
	설계를 어렵게 만드는건 의존성이고,이걸 쉽게만드는법은 불필요한 의존성을 제거해서,객체사이의 결합도를 낮추는것
	이 방법으로 세부사항을 캡슐화하는것이 있음
	이러면 객체의 자율성을 높이고,객체의 응집도도 올라감
	훌륭한 객체지향은,불필요한 세부사항을  캡슐화하는 자율적인 객체들이,낮은결합도와 높은 응집도로 협력하게 최소한의 의존성만 남기는거
	
	근데 이렇게 세부사항을 캡슐화하다보면,의존성을 추가해야하는경우가 있음(보통 매개변수로 대상을 받아야할때,자율성을 높이고,결합도가 상승함)
	이런건 트레이드오프로 선택해야함

2.객체지향 프로그래밍	
	
	
	




























