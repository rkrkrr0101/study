1.소개
  1.설계와 아키텍처란?
	소프트웨어 아키텍처의 목표는 필요한시스템을 만들고 유지보수하는데 투입되는 인력을 최소화하는것
  2.두가지 가치에 대한 이야기
	소프트웨어는 기계가 수익을 창출하거나 비용을 절약하게 만들어줌
	이떄 소프트웨어는 변경하기쉬워야하고,이해관계자가 생각을 바꾸면 이 변경사항을 간단하고 쉽게 적용할수있어야함
	그리고 변경사항을 적용할때의 어려움은 범위에 비례해야하고,형태와는 연관이 없어야함
	
	긴급함과 중요함을 잘 생각해야함
		긴급하고 중요한
		긴급하지않지만 중요한
		긴급하지만 중요하지않은
		긴급하지도 중요하지도 않은
	이 순서대로 일을 처리해야지,3번째인 긴급하지만 중요하지않은게 위로 올라가면안됨
	
	
2.프로그래밍 패러타임
	프로그래밍 패러다임은 모두 프로그래밍을 할때 제약을 부과함
		구조적프로그래밍:goto(직접문맥전환)의 금지
		객체지향프로그래밍:간접문맥전환에 대한 규칙부과
		함수형 프로그래밍:할당에 대한 규칙을 부과(가변성)
	즉 무언가를 쓰기 힘들게 만드는게 목적임,즉 너무 많은 권한을 제거해서 생각할걸 줄여주는것
  1.구조적 프로그래밍
	모든 프로그램은 순차,분기,반복 3가지만으로도 표현할수있음
	구조적프로그래밍의 핵심은,모듈을 증명가능한 더 작은단위로 재귀적으로 쪼갤수있다는것
	즉 요구사항을 고수준의 기능들로 쪼개고,기능을 더 작은 함수들로 쪼갤수있다는것임
	또한 수학적이 아닌 과학적증명으로,서술이 참임을 증명하는게 아닌 거짓임을 증명하는식(테스트)로 진행됨
	
	구조적 프로그래밍의 기능적분해가 아키텍처관점에서는 최고의 실천법중 하나임
  2.객체지향 프로그래밍
	객체지향의 핵심은 다형성임
	캡슐화와 상속은 객체지향이 아니라도 구현할수있는데,다형성의 경우 구현할수없고 객체지향에서 제일 메인이 되는 규칙임
	절차지향에서도 가능하긴하지만(포인터를 통해),특정관례를 수동으로 따르는방식이라 좀 위험하고,이런식으로 생긴 버그는 찾기가 어려움
	
	다형성을 사용하면 dip를 만들수있고 이게 객체지향의 핵심임
	즉 상위가 하위의 구현에 대해 직접적으로 얽매이지않고,상위가 생성한 인터페이스에 대해 하위가 의존하는식으로 의존성을 역전시킬수있다는게 핵심임
	이러면 하위의 구현의 수정이 일어나도,인터페이스가 바뀌지않으니 상위코드에 수정이 필요없는식
	또한 상위에 수정이 일어나도 인터페이스를 바꾸지않으면 하위도 신경쓸필요없음
	
	이러면 아키텍트는 소스코드의존성의 방향에 대한 절대적인 권한을 가지게됨
	이러면 상위든 하위든 db든 ui든 전부 인터페이스의 플러그인처럼 동작하게되고,전부 독립적으로 배포할수있어지고,그러면 전부 독립적으로 개발할수있어짐

  3.함수형 프로그래밍
	함수형의 핵심은 람다와 재할당불가(val)임
	함수형 프로그래밍 언어에선 변수의 재할당을 할수없음
	이걸로 인해 얻는게 많은데,이러면 동시성문제들의 거의 대부분이 사라짐
	
	이를 통해 얻을수있는 교훈은,어플리케이션을 구조화할땐 변수를 변경하는 컴포넌트와 변경하지않는 컴포넌트를 분리하고,
	가능한 많은 처리를 불변컴포넌트로 옮겨야함
	
	함수형처리의 다른방식으로는 이벤트소싱이 있음
	저장공간과 처리능력의 한계가 매우커지니,그냥 상태를 저장하지않고 모든 트랜잭션을 저장하고,
	필요할때 모든트랜잭션을 실행하는식으로 상태를 가져오는거임
	이러면 가변변수가 하나도 필요없고,중간에 스냅샷을 만들어서 최적화도 가능함
	이러면 crud가 아닌 cr만 수행하면됨 또한 그래서 변경과 삭제가 발생하지않으니 동시업데이트문제도 발생하지않음
	즉 이방식은 git와 같은방식임
	

3.설계원칙



































































































	
	
	
	
	
	
	