로그는 반드시 단계별로 나눠서 던져야함

debug는 
	println대용인데,이거쓰는거보다 디버거쓰는게 좋음
	운영레벨에서 남기기싫은 로그메세지를 위한레벨
Info는
	정상작동에 대한 정보로그레벨
	인증시스템에서 인증이 성공했을때 남기는정도
	어플리케이션 시작이나 종료,중요한작업(배치등)의 시작종료시에 이거로 남기면됨
	무의미한 정보를 남길필요는없음(시스템을 파악할때 유의미해야함)
	운영환경에서도 표시됨
warn은
	잠재적으로 문제가 될수있을때 남기는 레벨
	사용자가 로그인실패하는건 warn이고,이게 일정횟수를 넘어가면 error로 잡는식임
	유사하게 예상치못한입력,리소스제한등에 유저가 걸렸을때 이걸쓰면됨
	이때는 사용자에게 설명하는걸 상세히해야지,로그는 그냥 찍기만하고,나중에 몰아서 확인해도됨
error는
	앱의 심각한 오류나 예외상황을 나타냄
	기능 자체가 제대로 작동하지 못할때 남겨야하고,즉시 조치가 필요할떄를 의미함
	즉 db연결실패,내부시스템문제로 결제실패할때등임
여기서 가장 중요한건,warn과 error를 구분하는것

모든 예외가 터진 상황에 error을 찍으면 안됨
개발자가 뭘 할수없는상황이라면 warn을 찍는게 좋음
특히 외부api연동의 경우엔,호출이 100%성공할순없고,일정부분 실패한다고 생각해야함
그러니 이건 warn을 찍어야함
단 이떄도
	결제같은 치명적인 api인경우(이때도 잔고부족,인증실패등은 warn),바로 확인하고 해당결제사가 정상이 될떄까지 미노출시키는등 처리를 빨리해야함
	재시도전략이 없으면서,하루한번,한달한번씩만 실행하는경우,즉시 재시도해야하기때문에 error을 찍어서 바로 대응을 해야함
이런것들을 생각해야함

사용자의 입력(로그인)등도 횟수를 받아서 error과 warn으로 분리하는게 좋음


이때 로그레벨의 모니터링기준은
	info:기존대비 +-50%일경우
	warn:분당 20개이상일경우
	error:분당 5개이상일경우
정도로 잡을수있음
	













