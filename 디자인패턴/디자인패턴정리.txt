팩토리:객체생성을 따로 떼서 유지보수할때 고쳐야하는 수를 줄임


직접 메인코드에서 new로 만들면 그걸 한번에 고칠수없으니까 불러올 클래스속에 생성하는메소드를 만들어서 처리 

오버로딩을 추가해서 분화시키고싶을떄도 그냥 생성메서드에서 if문추가하고 매개변수받아서 처리하면됨
ex)AsiaCarDoor->KoreaCarDoor,ChinaCarDoor 일떄 생성자를 따로 메소드로 만들면
매개변수받고(ch,ko) 메소드속에 if문넣어서 매개변수로 확인해서 리턴

싱글턴:객체 생성을 다 막아버리고 자기호출도 다막아버리고 정적메소드 하나 만든담에 그거로만 생성시키고
생성시키는거 감시하면서(참조체) 하나이상 생성 이미 됐으면 그거 주소값 리턴
주의점:멀티쓰레드같은데서 동시에 생성요청했으면 어디서 만들어질지 모름 해결법:프로세스 생성될때 만듬 단,메모리 고정량손해봄
(정적클래스:따로 객체를 만들수없고 프로세스 시작부터 메모리에 상주되고 그냥 그거 가져다쓸수만있음 맨날쓰던 함수들같은거 라이브러리기본제공  
당연하지만 안에있는 정적 변수는 값고정이니까 쓸수있지만 안에서 동적변수같은거 만들수는없고 매개변수로 입력값바꿔야함  )

팩토리 메서드:추상클래스(인터페이스같은거)를 만들고 거기서 상속받아서 실제 클래스를 만듬
미리 무조건 필요한 메소드는 선언만 해두고 밑에서 오버라이드해서 만들고 사용
완성결과값,제작의뢰같이 무조건 필요한걸 미리 선언해서 통일시키고 과정을 무시하고 결과값을 통일시킴
 재료가 뭐가올지 모르거나
저쪽에서 파일을 집어넣는다던가(zip,7z뭐 이렇게 랜덤으로)앞으로 선택지가 늘어날수있을떄 쓰는듯?(alz추가)

결국 원청->하청으로 올라갈수록 행위에 따라 세부내용이 다르든말든 원청에선 신경끄고 결과값만 받아먹음
PizzaStore nyStore = new NYPizzaStore();
PizzaStore chicagoStore = new ChicagoPizzaStore();

Pizza pizza = nyStore.orderPizza("cheese");
Pizza pizza1 = chicagoStore.orderPizza("pepperoni");
이런식
ex) pizzastore(추상클래스) ->pizzahutpizzastore
					   ㄴ>dominopizzastore
					   ㄴ>papazonspizzastore	
추상 팩토리:팩토리 메서드를 겹쳐서 사용(병렬적으로) 서로 의존적인 여러객체를 만드는데 씀

추상팩토리는 그룹을 하나 늘리는데는(미국,한국->미국한국중국) 일이 그렇게 안많아지는데,중간쯤에서 부품이 하나추가되는식으로 할게 늘어나면 
아래리프에있는거 전부 건드려줘야해서 엄청귀찮아짐(타이어,문->타이어,문,핸들)
ex) 피자가게와 피자원재료공장 추상클래스
 ab피자가게와 ab피자원재료공장
 ab피자가게에 치즈피자 요청들어오면(abpizza.order('cheese')
 피자가게에서 원재료공장에 재료를 요청하고(뭔지몰라도됨 치즈피자라고 말하면 알아서 줌)
 그거로 지지고볶고 만들어서 리턴
ex2)
	kiafac(kokiafac,jpkiafac,chkiafac)이게 최종
	kiafac안에 여러 공장들이 병렬적으로 있는거 여기서 하나 선택해서 뽑으면됨

빌더:빌더는 추상팩토리와 다르게  완성품을 뽑아내기때문에(최종원청)빌더 자체에서의 책임은 생성요청을 받아서 밑에 하청에 전달하고
(포장은 안뜯어봤지만)완성됐다고 하청에서 주장하는걸 소비자에 전달하는거밖에 없음
빌더는 빌더,디렉터,제품으로 구성되는데
빌더가 제작하는 코드를 가지고있고(하청을 주든말든 빌더가 할일)
디렉터는 빌더가 제작하는 품목을 가지고 제품으로 조립해서 리턴
 

추상팩토리쪽에서는 자기가 필요한 제일 큰 범주에서(핸들 바퀴 사이드미러) 이것중 하나를 선택하는식이고(매개변수가 작음) 
빌더는 자기가 만들 것을 정해놓고(자동차 비행기 자전거) 이것중에서 매개변수를 추가로 넣어서 (자동차에서 옵션추가하는느낌으로) 뽑아냄
추상팩토리는 압축된 하나의 파일(중간에 하나가 빌수 없음 자동차의 핸들,바퀴) 
빌더는 파일 여러가지의 집합(자동차에서 휠을 비싼휠쓸수도잇고 아예 빼고주문할수도있음)


프로토타입:그냥 객체를 깡으로 만들면 코스트가 많이들어가니까 객체를 복사해서 쓰면 싸다!이건데 그냥 하나만들고 그거 매개변수 수정할수있는
매서드같은거 만들어서 넣거나 하는식으로 쓰는건가봄
그리고 뭐 그냥 매개변수 조금달라지고마는데 그 가짓수가 엄청많으면 그냥 원본복사해준담에 알아서고쳐쓰세요~하면 편하다고함

어댑터:이미 있던 클래스를 사용하고싶은데 리턴값이나 매개변수가 안맞을떄 중간에 끼워서 컨버터시켜서 사용

브리지:인터페이스 만들고 그인터페이스를 기반으로 약간씩 다른개체 만들어서 횡적으로 늘릴떄 사용
	
복합체:복합객체속에 뭐가있든간에(단일객체든 복합객체든) 같은급에 있으면 전부 똑같이 사용
	결국 뭐든간에 공통메소드기준으로 사용하고(과자면 먹기 이런거 단일과자든 과자선물세트든) 추가적으로 내부복합객체 건드릴이유생길때만
	(내부에 과자추가한다거나)불러오고 보통떄는 그냥 똑같이사용하고싶어서 만든패턴
	
장식자:기존 클래스를 확장하고싶을떄 기존클래스를 건드리면 원칙에 어긋나고,정적인 확장말고(내가 정적코드로 일일히 다적어주는)
	적당히 여러개 소품 던져주고 알아서 조합해쓰라고 하고싶을때 사용
	기본 부모클래스를 의존적으로받든 어쩌든 받고 내부에 부모클래스변수하나 만들어두고 매개변수로 부모클래스받아서 재귀타면서
	여자
	귀걸이(여자)
	목걸이(귀걸이(여자))
	이런식으로 돌려서 동적으로 뽑아내면서 nxn개 만들필요없이 n개만 만들면 알아서 조합해서쓸수있음
	
파사드:중간 메인 인터페이스를 둬서 요청을 전부 중간인터페이스를 거쳐 처리하게 해서 정보최소화시킴
	 다른클래스는 자기가 원하는 클래스 인터페이스명령어만 알면되니까 서로 캡슐화도 됨
	 예로 커피자판기에서 커피가 만들어지는방법은 몰라도되고 동전넣고 커피버튼만 누르면 알아서만들어줌
	 빌더랑 비슷한데 빌더는 최종결과물 뽑아내는거고 이거는 그냥 중간관리자역할이라는느낌
	 보통 api같은게 다 이방식 우리는 내부몰라도되고 명령어만 알면됨
	 
플라이웨이트:객체를 직접 생성하면 코스트가 많이드니까 하나있으면 그거 같이쓰자는 컨셉인듯
		스트링같은거 한번 선언하면 다른데서 똑같이해도 주소값 같은거처럼 
		최대한 작게만든다음에 내부건드릴일없게하고 그거 공유해서쓰자인거같음
		
프록시:실제객체랑 완전히 똑같은 메서드로 만들고 실제객체는 폐쇄시켜둔다음에 프록시통해서 요청들어오면 요청 전달하는식으로 사용하고
	프록시를 쓰면 진짜로 그 객체호출이 들어왔을떄까지 객체생성을 미룰수있고(객체생성비용이 비싼거)객체에서 따로 권한체크같은거 안해도
	프록시에서 권한체크한다음에 빠꾸먹일수도 있고(실제객체 보안책임을 프록시로 넘길수있음) 
	적당히 메서드 커스터마이징하거나(리턴값이 1.0실수인데 1정수로 보낸다던가) 
	메서드 묶어서 실행시킨다던가 편하게쓸수있음
	
반복자:foreach가 대표적으로 이런식으로 씀
	뭐 조건따라서 반복문에서 인덱스값 하나늘리고 한세월처리하고 이렇게 해야할떄 인덱스랑 next(다음으로 넘어가는함수 값리턴)
	isnext(다음값있는지확인)넣어두고 인덱스 하나씩 늘려가면서 처리
	마지막에 null넣어두고 널 오면 끝이라고 알려주고 이런식으로도 쓴다고함
	
명령:실제내용이 들어있는건 다 exec로 행위하게 만든다음에 그거 처리하는 클래스 만들어서 거기서만 명령실행
	리모콘에 명령들어있는 블록 넣어서 누른다는느낌
	동작 자체를 exec딱하나에 몰빵시킨다음에 리모콘에 커맨드객체만들고 세터로 거기로 커맨드 받아와서 그거 exec시킴
	뭐 좀 나가면 커맨드들 다 모아두는 클래스같은거 만들어서 리모콘에 커맨드넣을때 거기서 받아와서 넣고 그런식으로도 하나봄
	필요하면 exec말고 undo같은거도 넣어서 명령 취소할수도있게 하고 그렇게쓰는듯
방문자:그냥 데이터가 반복적으로 클래스에 나오고 나중에 통합해야할떄 데이터클래스 만들어두고 메서드는 자기꺼 알아서 만들어서 원래잇던거 수정하고
	하는방식인듯 예전에 뭐 싱글톤인가 그거 데이터만 만들어두고 여러객체들이 그거 겟터세터하면서 총합결과값 가져오고 그렇게쓰는듯 
	새로필요한 메서드가 생겨도 원래 잇던 데이터클래스랑 메서드클래스는 그대로두고 데이터클래스 가져오는 메서드클래스 추가로만들거나
	원래잇던 메서드클래스 추가해서 만들거나 뭐 이렇게쓰나봄
체인:인트 플롯 더블 스트링 처리하는 클래스가있을때 머리에 스트링 던지면 알아서 인트-플롯-더블-스트링으로 연쇄해서 확인해서 답주는식
	if문타서 자기꺼 맞는지 아닌지확인하고 맞으면 리턴 아니면 체인
	그리고 하나하나 넣기 귀찮으니까 추상클래스 써서 다음넘어가는메서드 넣어두고 추상메서드로 exec넣어두고 알아서 체인타게만듬
옵저버:안드로이드 브로드캐스트처럼 무슨 상황 발생하면 옵저버객체 업데이트시켜서 상황전달해주고 옵저버객체가 그상황 필요하다고 했던애들
	다시 불러서 업데이트시키고 함 이거쓰면 상시감시할필요가 없이 업데이트되서 자기한테 노티왔을때만 처리해주면됨
	주의점:만약 옵저버가 통지줬는데 걔가 다시 자기자신한테 영향가는거 옵저버에 업데이트해서 무한루프돌수있음

중재자:중간에 객체끼리 통신을위한 클래스를 만들어서 모든 통신을 중재자를 거쳐서 처리
	파사드랑 엄청비슷한데 파사드와의 차이는 파사드는 클라이언트와의 통신을하고 중재자는 외부로 노출안되고 안에서만 통신을 도와준다
	뭐 파사드는 단방향 중재자는 양방향이다 소리 있긴한데 그냥보면 인터페이스 크기차이같음 외부통신을 할거냐안할거냐
	양방향이라는 소리는 통신할떄 두번이상 왔다갔다 할수있다는 소리같음(A-M-B-M-A return)
	근데필요하면 파사드에도 넣을수잇을거같음
상태:if else로 계속 줄줄히 조건걸어가면서 하나 선택하는상황일떄 스테이스 인터페이스 상속받으면
	변수에 그인터페이스객체(무적,변이,cc면역 중 하나만선택될때) 다 넣을수잇으니까 그냥 그
	바뀐 객체 들고오면서 ifelse로 알아보기힘들게 안적고 그 상태 선택하는식으로 하겠다는거
	현재 상태 기억하는거 하나랑 그거로 들어가는거 두개만들고 나머지는 안에서 처리
	그냥 ifelse랑똑같음 좀알아보기편한거지 유지보수편하고
메멘토:컨트롤z하려고 만든패턴
	일일히 바뀐거 다 체크해서 바꿀라면너무 힘드니까 객체를 통째로 스냅샷떠서 수틀리면 그냥 그거 덮어씌워서 복구하겠다는패턴

템플릿 메소드: 그냥말그대로 메소드의 템플릿을 만들어두고 그거상속받아서 쓰겠다는거
		 무조건 들어가는 겹치는 메소드면 그냥 이름통일시켜서 가져다쓰고 거기에 몇개만 들어가는거면 옵션으로 넣어두고
		 그거 오버라이드하는식으로 코드짜는방식(공이라는 객체가 있으면 그거로 마사지할수도있고 던질수도 있으니 공은 두고 using이라는
		 매소드만들어서 그거로 알아서 쓰게만드는패턴)

전략:사용 객체에 세터넣어서 사용할 알고리즘을 바꾸는패턴
	캐릭터에 무기 갈아끼면서 공격방식바꾸는느낌
	사용방식에 따라서 인챈트하는느낌으로 검(물) 검(불) 이렇게 섞어서 던져줄수도있을듯
	
인터프리터:그냥 언어 하나 만드는식으로 토큰이랑 그런거 세팅해놓고 해석해서 쓰자라는소린데 말도안대는소리같음
		언제 그거만들고있어 그거만드는시간에 다짜고 밥먹고 영화도보고왔음
	
