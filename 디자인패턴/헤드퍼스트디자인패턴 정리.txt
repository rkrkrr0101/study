1.전략패턴
	그냥 단순히 상속의 슈퍼클래스에 새로운 메소드를 추가하면,거기에 하위 모든 피상속대상(서브클래스)이 영향을 받으니까 하나하나 일일히 봐야하고,
	하나하나 다 일일히 오버라이드해서 지워주던가 해야함
	그래서 소스의 중복이 생기고,미처 확인하지못한 서브클래스가 있으면 그대로 버그행,그리고 실행시에 특징변화도 힘듬(setter가 없으니)
	
	그래서 인터페이스를 만들고,거기에 해당하는 추상메소드를 선언해두고(캡슐화),
	거기에 맞춰서 인터페이스를 구현하고,자기가 쓸 옵션을 붙여서 객체를 생성하는식으로 할수있음
	이게 전략패턴임
	
	이때,바뀌지 않을부분은 그대로 두고,바뀌는 부분만 캡슐화해서 바꿔가면서 사용하면됨
	이떄 세터를 둬서 세터로 적용하는식으로 하고,생성자를 둬서 그떄 매개변수받아서 생성하는식으로 동작하면될듯
	이때는 원래 슈퍼클래스와,그 슈퍼클래스의 추상메소드인터페이스들,슈퍼클래스의 메소드로 구성이 되고,추상메소드인터페이스를 구현하고,
	객체를 만들때 필요한 구현된 인터페이스를 가져다 세팅하는식으로 하면됨
	
	이렇게 사용하면,이 추상메서드들은 단순히 특정 행동을 표현하는거니까 이걸 또 다른데서 가져다쓸수도있음
	(서로 의존성이 올라갈거같긴하지만 메소드가 딱 그행동만 표현할수있으면 상관없을거같긴함)


2.옵저버 패턴