섬의 갯수를 반환해라
bfs나 dfs써서 같은덩어리인거 다 0으로만들고 res+=1

타임아웃
import java.util.*

class Solution {
    fun numIslands(grid: Array<CharArray>): Int {
        var res=0
        val queue: Queue<Pair<Int,Int>> = LinkedList()
        for (i in grid.indices) {
            for (j in grid[0].indices) {
                if (grid[i][j] == '1') {
                    res+=1
                    queue.add(Pair(i,j))
                    while (!queue.isEmpty()) {
                        val (pointX, pointY) = queue.poll()
                        grid[pointX][pointY] = '0'
                        
                        if (pointX+1<grid.size&&grid[pointX+1][pointY] == '1') {
                            queue.add(Pair(pointX+1,pointY))
                        }
                        if (pointX-1>=0&&grid[pointX-1][pointY] == '1') {
                            queue.add(Pair(pointX-1,pointY))
                        }
                        if (pointY+1<grid[0].size&&grid[pointX][pointY+1] == '1') {
                            queue.add(Pair(pointX,pointY+1))
                        }
                        if (pointY-1>=0&&grid[pointX][pointY-1] == '1') {
                            queue.add(Pair(pointX,pointY-1))
                        }
                    }

                }

            }

        }
        return res

    }
}
정답
class Solution {
    fun numIslands(grid: Array<CharArray>): Int {
        val rowSize = grid.size
        val colSize = grid[0].size
        var noOfIslands = 0

        for(row in 0 until rowSize) {
            for(col in 0 until colSize) {
                if(grid[row][col] == '1') {
                    //At least island found, hence
                    noOfIslands++
                    doDFSIn4Direction(row, col, grid)
                }		
            }
        }
        return noOfIslands
    }

    private fun doDFSIn4Direction(rowIndex: Int, colIndex: Int, grid: Array<CharArray>) {

        val startBoundryofMatrix = (rowIndex >= 0 && colIndex >= 0)
        val endBoundryOfMatrix = (rowIndex < grid.size && colIndex < grid[0].size)
        if(startBoundryofMatrix && endBoundryOfMatrix && grid[rowIndex][colIndex] == '1' ) {
           
		    //Update value at give row to avoid repeatation on same index, lets say 'x'
            grid[rowIndex][colIndex] = 'x'

            //Now, we have to Traverse in all 4 direction (Next, Bottom, Left, Top)

            //Direction 1 :  Next position of Element
            //Suppose we are at [1][1] position in matrix so next position will be [1][2], so 
            doDFSIn4Direction(rowIndex = rowIndex, colIndex = colIndex+1, grid = grid)

            //Direction 2 : Bottom position of Element
            //Supppose we are at [1][1] position in matrix, so bottom position will be [2][1], so
            doDFSIn4Direction(rowIndex = rowIndex+1, colIndex = colIndex, grid = grid)

            //Direction 3 : Left Position of Element
            //Suppose we are at [1][1] position in matrix, so left position will be [1][0], so
            doDFSIn4Direction(rowIndex = rowIndex, colIndex = colIndex-1, grid = grid)

            //Direction 4 : Top Postion of Element
            //Suppose we are at [1][1] position in matrix, so top position will be [0][1]
            doDFSIn4Direction(rowIndex = rowIndex-1, colIndex = colIndex, grid = grid)
        }
    }
}