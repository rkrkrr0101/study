회의를 시간으로 정렬하고,셋 하나 만들어서 둘중 하나라도 감염되면 전부 셋에 박고,마지막에 셋 리턴
회의시간별로 모든 참가자를 맵에 넣고,셋 하나 만들어서 전체중 하나라도 감염되면 전부 셋에 박고,마지막에 셋 리턴




class Solution {
    fun findAllPeople(n: Int, meetings: Array<IntArray>, firstPerson: Int): List<Int> {
        val persons = Array(n) { Person(it) }
        persons[0].hasSecret = true
        persons[firstPerson].hasSecret = true

        val timeslots = TimeslotRegistry()
        for ((a, b, time) in meetings) {
            timeslots.get(time).addContact(persons[a], persons[b])
        }

        for (t in timeslots) {
            t.exchange()
        }

        val result = ArrayList<Int>()
        for (p in persons) {
            if (p.hasSecret) result.add(p.number)
        }
        return result
    }
}

class TimeslotRegistry: Iterable<Timeslot> {
    private val map = TreeMap<Int, Timeslot>()

    fun get(time: Int): Timeslot {
        val oldSlot = map[time]
        if (oldSlot != null) return oldSlot
        val newSlot = Timeslot()
        map[time] = newSlot
        return newSlot
    }

    override fun iterator(): Iterator<Timeslot> {
        return map.values.iterator()
    }
}

class Timeslot {
    private val contacts = ArrayList<Pair<Person, Person>>()

    fun addContact(a: Person, b: Person) {
        contacts.add(Pair(a, b))
    }

    fun exchange() {
        var oldGeneration = contacts
        var newGeneration = ArrayList<Pair<Person, Person>>()

        while (true) {
            for (contact in oldGeneration) {
                if (contact.first.exchangeSecret(contact.second)) {
                    continue
                }
                newGeneration.add(contact)
            }
            if (oldGeneration.size == newGeneration.size) {
                break
            }
            val temp = oldGeneration
            oldGeneration = newGeneration
            newGeneration = temp
            newGeneration.clear()
        }
    }
}

class Person(val number: Int, var hasSecret: Boolean = false) {

    fun exchangeSecret(person: Person): Boolean {
        val commonSecret = this.hasSecret || person.hasSecret
        if (commonSecret) {
            this.hasSecret = true
            person.hasSecret = true
        }
        return commonSecret
    }
}