릿코드 트리노드
class TreeNode(var `val`: Int) {
    var left: TreeNode? = null
    var right: TreeNode? = null
}

모든 트리노드에서 작업할때
        while (queue.isNotEmpty()){
            val tempNode=queue.poll()
            if (tempNode.right!=null) {
                queue.add(tempNode.right)
            }
            if (tempNode.left!=null) {
                queue.add(tempNode.left)
            }
			//여기서 작업하면됨
            //maxValue=max(maxValue,maxValueNodeCal(tempNode,tempNode.`val`))
        }
트리 전체순회후  리프만 리턴(왼쪽우선)
    fun leftFirstTreeLeafSearch(root1: TreeNode?):List<Int>{
        val tempList = mutableListOf<Int>()
        if (root1==null){
            throw IllegalArgumentException()
        }
        if (root1.left==null && root1.right==null){
            tempList.add(root1.`val`)
        }
        if(root1.left!=null){
            tempList.addAll( leftFirstTreeLeafSearch(root1.left))
        }
        if(root1.right!=null){
            tempList.addAll( leftFirstTreeLeafSearch(root1.right))
        }
        return tempList
    }
트리 전체순회후 모든 노드값 리턴(왼쪽우선)
    fun leftFirstTreeAllNodeSearch(root1: TreeNode?):List<Int>{
        val tempList = mutableListOf<Int>()
        if (root1==null){
            throw IllegalArgumentException()
        }
            tempList.add(root1.`val`)
        if(root1.left!=null){
            tempList.addAll( leftFirstTreeAllNodeSearch(root1.left))
        }
        if(root1.right!=null){
            tempList.addAll( leftFirstTreeAllNodeSearch(root1.right))
        }
        return tempList
    }
트리 전체순회후 모든 노드값 리턴,널도 포함(왼쪽우선)	
	    fun leftFirstTreeAllNodeSearch(root1: TreeNode?):List<Int?>{
        val tempList = mutableListOf<Int?>()
        if (root1==null){
            throw IllegalArgumentException()
        }
        tempList.add(root1.`val`)
        if(root1.left!=null){
            tempList.addAll( leftFirstTreeAllNodeSearch(root1.left))
        }else{
            tempList.add(null)
        }
        if(root1.right!=null){
            tempList.addAll( leftFirstTreeAllNodeSearch(root1.right))
        }else{
            tempList.add(null)
        }
        return tempList
    }
	
트리 루트부터 타겟까지 층수 리턴
    fun treeLayerCount(root: TreeNode?,target: Int,count:Int):Int{
        var res=count
        var leftRes=1000000001
        var rightRes=1000000001
        if (root==null){
            throw IllegalArgumentException()
        }
        if(root.`val`==target){
            return res
        }
        if (root.left!=null){
            leftRes=treeLayerCount(root.left,target,res+1)
        }
        if (root.right!=null){
            rightRes=treeLayerCount(root.right,target,res+1)
        }
        return min(leftRes,rightRes)
    }
트리 루트부터 리프까지 층수 리턴
    fun treeLayerCount(root: TreeNode?,count:Int):Int{
        var res=count
        var leftRes=-1
        var rightRes=-1
        if (root==null){
            throw IllegalArgumentException()
        }
        if(root.left==null && root.right==null){
            return res
        }
        if (root.left!=null){
            leftRes=treeLayerCount(root.left,res+1)
        }
        if (root.right!=null){
            rightRes=treeLayerCount(root.right,res+1)
        }
        return max(leftRes,rightRes)
    }
해당 트리객체 리턴
    fun treeValueFind(root: TreeNode?,target:Int):TreeNode?{
        var resNode:TreeNode?=null
        if (root==null){
            throw IllegalArgumentException()
        }
        if(root.`val`==target){
            return root
        }
        if (root.left!=null){
            val leftFindTree=treeValueFind(root.left,target)
            if (leftFindTree!=null){
                resNode=leftFindTree
            }
        }
        if (root.right!=null){
            val rightFindTree=treeValueFind(root.right,target)
            if (rightFindTree!=null){
                resNode=rightFindTree
            }
        }
        return resNode
    }