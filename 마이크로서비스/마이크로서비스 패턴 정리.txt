-1.모놀리지옥에서 벗어나라
1.모놀리의 장점과 단점
	모놀리의 장점은,작은크기일땐
		개발이 간단함
		앱변경이 쉬움
		테스트가 쉬움
		배포가 쉬움
		확장이 쉬움
	이라는 장점이 있지만,커졌을때 문제가 됨
	커졌을때의 단점으로는
		전부 이해할수가 없을정도로 커짐
		한군데 건드렸을때의 사이드이펙트 상상이 안감
		ide실행시간이 너무길어짐
		테스트가 오래걸리고 신뢰성이 부족해짐(유닛테스트 안되는부분때문에 수동테스트해야하는영역이 많아짐)
		커밋부터 배포까지 너무오래걸림 (ci/cd파이프라인이 불가능함)
		확장이 어려움(각 모듈마다 필요한 리소스요건이 달라서 확장이 어려워짐)
		기술스택 변경이 어려움
		
2.마이크로서비스
	마이크로서비스아키텍쳐는,모놀리의 확장방식(파드복제해서 확장,데이터분할해서 확장)에 추가로 앱을 나누는 차원이 추가되는거임
	기본적인 모놀리식 확장방식을 사용하면,앱능력과 가용성은 확장되지만,앱의 복잡도증가는 해결되지않음
	그래서 기능분해가 필요해지는것
	이때 분해된 기능은,미니 앱이라고 보면 됨,서비스에 따라 복제확장등도 똑같이 가능함
	즉,msa는 고수준에서 바라보면,하나의 앱을 여러 서비스로 분해하는 스타일임
	여기서 중요한건 크기가 아니라,각 서비스가 응집된 책임을 가지고 있다는것
	
	마이크로서비스는 서비스를 모듈성의 단위로,그 선을 다른서비스가 들어오지 못하고,api를 통해서만 통신함
	그래서 독립성을 유지하기가 편하고,독립적으로 배포/확장할수있음
	
	그리고 각 서비스들은 각자 자신의 db테이블을 가지고있음,그래서 외부와 협의하지않고 자신의 스키마를 바꿀수있고,
	다른 서비스가 락을걸어서 나를 블로킹하는일이 없음
	만약 여러서비스가 한 db를 봐야한다면,그 db의 입출력을 담당하는 서비스를 만들고,api로 통신하면됨
	
	기본적으로 퍼사드패턴으로 api게이트웨이를 만들고,걔가 각 서비스의 api로 통신하는식으로 구성되게됨
	그리고 서비스에서 외부어댑터가 필요하면,자기껀 자기가 알아서 만들고,외부에 알리지만 않고 리턴값만 주면됨
	
3.마이크로서비스의 장단점
	마이크로서비스의 장점은
		크고 복잡한 앱을 지속적으로 전달/배포할수있음
		서비스규모가 작아 관리가 쉬움 
		서비스를 독립적으로 배포/확장할수있음
		팀들이 자율적으로 움직일수있음
		결함격리가 잘됨(한곳에서 메모리누수가 나도,그 서비스만 죽고끝남)
		새로운기술실험과 도입이 쉬움(서비스별로 따로니까,모든스택을 한번에바꿀필요가없음)
	
	마이크로서비스는 모놀리에 비해,유닛테스트등 자동화테스트가 쉽고(크기가 작아서),사이드이펙트가 적어서 버그도 적음
	그리고 배포도 독립적으로 할수있어서,개발자가 자신이 담당한 서비스변경분을 배포할때 다른개발자와 협의할필요가 없음
	작은팀이 여럿 결합된 식으로,가장 효율적인 크기로 기술조직을 굴릴수있음,즉 팀별로 서비스를 담당해서,외부영향을 안줄수있음
	
	즉 이래서 ci/cd가 가능해짐
	
	단점은
		딱맞는 서비스찾기가 어려움
		분산시스템을 공부해야함
		여러 서비스에 걸친 기능을 배포할땐 잘 조정해야함
		msa도입시점 결정이 어려움
	
	
4.마이크로서비스 패턴언어
	ms패턴언어는,전체 앱을 마이크로서비스로 구성할때 유용한 패턴의 모음집임
	패턴언어는 구조와 장단점을 기술하기때문에,무엇보다 지금 msa를 사용하는게 옳은일인지 결정할때 요긴함
	
	이 패턴들의 분류로는
		앱을 여러서비스로 분해하는 패턴
		통신패턴
		트랜잭션관리를 위한 데이터 일관성 패턴(사가)
		데이터쿼리패턴
		서비스배포패턴
		관측패턴
		서비스테스트자동화패턴
		횡단관심사처리패턴(공통관심사처리패턴)
		보안패턴
	
5.마이크로서비스 프로세스와 조직
		마이크로서비스는 8~12명정도에 애자일방식으로 스크럼같은걸 도입해서 하는게 좋음
	
	
	
	
	
	
-2.분해전략	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	