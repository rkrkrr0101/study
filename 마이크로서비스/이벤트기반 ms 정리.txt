1.왜 이벤트기반 마이크로서비스인가
	이벤트기반ms는 시스템이 이벤트를 생산/소비하는식으로 서로 통신함
	이벤트를 소비해도 바로사라지진않고,같은 메세지를 필요로하는 다른 소비자들도 가져갈수있게 보존됨
	이거로인해 여러 패턴들이가능해짐
	
	서비스자체는 개발기간이 2주안에 끝나게,개념적으론 머리속에 한번에 들어갈정도
	서비스는 입력이벤트스트림에서 이벤트를 받아서,
	특정 비즈니스로직을 적용하고 출력이벤트를 내보내서 요청응답접근에 필요한데이터를 제공,혹은 서드파티api와 통신함
	
	서비스는 스테이트풀과 스테이트리스로 분류됨
	
	도메인주도 설계와 경계콘텍스트는
	하위도메인에 경계선을 최대한 비슷하게 잘라서,내부에서만 동작하고 외부로 영향을 주는걸 막는걸 말함
	경계콘텍스트는 비즈니스요건 중심으로 만들어져야함,그래야 변경사항이 있을때 변경점이 내부에만 영향을주고,
	한팀만 특정 ms를 소유해서,책임이 분산되지않음
	즉,비슷한 코드가 있어도 그냥 중복을 감수하고 서비스마다 따로 만듬(그냥복사해서 넣어도됨,서로 영향만안주면되니까)
	
	서비스의 통신은,실제 비즈니스통신과 어쩔수없이 비슷하게 나가게됨
	ms전까진,실제로 전화해서 정보전달하는거와,진짜 데이터를 넣는것과는 별개로(두개를 동시에)처리했음
	기본적으로 모놀리스식으로,db에서 정보를 다 받고,거기서 계속 받아가는식으로 처리하는경우가 많았음
	이거의 문제는,모든 서비스들이 하나의 db를 직접 접근하니까 db에 변경점이 있으면 모든 서비스들이 영향을 받게됨
	즉,접근은 쉬운데 변경은 어려움
	
	그래서 나온 패턴이 db에 어댑터붙이는패턴임
	db와 관련된 통신은 전부 한 서비스에서 맡고,그 서비스에 접촉해서 자기가 받을 데이터를 받는것
	이러면 올바른 통신을 할 책임은,db서비스에만 있고 다른서비스들은 처음에 했던인터페이스대로 그냥 받기만하면됨
	이게 이벤트 기반 통신임
	
	모든 데이터는 하나의 db안에 있는,단일 진실 공급원이고,각 이벤트는 사실진술서임
	즉 받은이벤트는 어디서 받아도 똑같은시간에 넣었으면 똑같이나옴
	
	그리고 소비자가 스스로 모델링과 쿼리를 수행함(자기가 필요한 인터페이스 만들어서 줘야함)
	이렇게되면 직접적으로 db접근하는건 서비스하나밖에 없고,다른데서도 동시에 필요한 이벤트는 공용이벤트로 발행해서
	데이터의 생산과 소유를 완전히 분리할수있음
		
	이벤트기반ms의 장점은
		세분성:서비스가 경계콘텍스트에 맞게 매핑되고,비즈니스요건이 바뀌어도 쉽게 재작성가능
		확장성:필요시 규모를 늘리거나 줄일수있음
		기술유연성:서비스마다 다른언어써도됨
		비즈니스요건유연성:소유권을 쉽게 넘겨줄수있음(인수인계에 들어가는게작음)
		느슨한결합:외부에 영향을 받지않음
		cd지원:쉽게 업데이트할수있음(외부에 영향을 안주고 안받아서)
		우수한시험성:테스트하기가 쉬움(의존성이 낮아서)
	
	그리고 또 중요한건,여기서의 통신은 비동기식이라는것
	동기식으로도 ms를 구현할수 있긴한데
	단점은 대규모환경에선 문제가 많음
		점대점결합이라 자신이 할일을 다른서비스에 의존해서 할수밖에 없고,이러면 어느 서비스가 어떤 비즈니스로직을 담당하는지 파악이 매우 어려워짐
		그리고 한 서비스의 확장 여부는 다른 서비스가 확장가능한지에 따라 달렸음
		서비스실패할때 처리하는거 생각하기가 힘듬,여러개가꼬리물려있어서
		api버저닝하기힘듬
		데이터접근이 구현체에 종속됨
	장점은 
		사용자인증,a/b테스트같은 데이터접근패턴은 이게더 쉽긴하고
		로그로 추적하기도 쉬움 
		그리고 사람들이 많이써봐서 접근이쉬움
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	