다리길이만큼 큐 빈칸채워두고
다리길이큐로 루프돌려서 웨이트보다 티웨이트가 작으면 큐에 트럭추가

1초당 하나씩 빼고 트럭들어가면 거기 삽입
트럭 안들어가면 0삽입
만약 큐전체 0이면 탈출후 리턴


큐채우기 반복

루프 다리길이큐
	시간+1
	큐-1
	트럭이 남아있으면
	웨이트 티웨이트+다리길이 비교
		웨이트 트럭 추가
	엘스 0추가
리턴

def solution(bridge_length, weight, truck_weights):
    answer = 0
    hbri=[0]*bridge_length
    
    while hbri:
        answer=answer+1
        hbri.pop(0)
        if truck_weights:
            if sum(hbri)+truck_weights[0]<=weight:
                hbri.append( truck_weights.pop(0))
            else: hbri.append(0)
        if (sum(hbri))==0:
            break
            
            
    return answer










def solution(bridge_length, weight, truck_weights):
    answer = 0
    hbri=[0]*bridge_length
    
    while hbri:
        answer=answer+1
        hbri.pop(0)
        if sum(hbri)+truck_weights[0]<=weight:
            hbri.append( truck_weights.pop(0))
        else: hbri.append(0)
            
    return answer









import queue
def solution(b_l, wei, t_wei):
    answer = 0
    bqu=queue.Queue()#
    timequ=queue.Queue()#시간큐
    bwi=0#현재 다리위 차무게
    t_wei.sort(reverse=True)
    for t in t_wei:
        bqu.put(t)

    
    
    while True:
        if wei>bwi:
            a=bqu.get()
            bwi=bwi+a
            for i in range(b_l):
                timequ.put(0)
            
            timequ.put(1)
            answer=answer+1
            if timequ.get()==1:
                bqu.get()
            print(a)
        if bqu.qsize()==0:    
            break;
    print(t_wei)
    
    
    
    return answer