우선순위큐에 음식갯수랑 번호랑 적어서 넣은다음에 음식갯수 젤많은거x음식전체갯수 k에서 빼고 만약 k가 -이면 빼던거 취소하고 
현재 큐배열가지고 루프돌려서 k뺀다음 k0되면 그거 번호 리턴

음식배열랭스로 반복문 돌려서
	큐에 크기번호 넣고
음식 썸이 더작으면 리턴
무한반복:
	now=큐하나뺴고
	if k> nowx랭스:
		큐에 now만큼 전부 빼주고(반복문)
		k-=now
	else:
		break
return q[k mod len(q)][1]
실패
import heapq
fk=[3, 1, 2]
k=5
q=[]
countnum=0
countfood=0
for i in range(len(fk)):
    heapq.heappush(q,(fk[i],i))
a=True    
while a:
    now=heapq.heappop(q)
    if now[0]<=countnum:continue
    if k>(now[0]-countnum)*(len(q)+1):
        countfood=now[1]
        k+=-((now[0]-countnum)*(len(q)+1))
        countnum=now[0]-countnum
        
        
        
    else:
        heapq.heappush(q,now)
        break
q.sort(key=lambda x:x[1])
print(q)
for i in range(k):
    abc=i % len(q)
    res=q[i % len(q)][1]
    



성공(다시풀기)
import heapq
def solution(fk, k):
    q=[]
    countnum=0
    countfood=0
    sumfood=0
    if sum(fk)<=k:return-1
    length=len(fk)
    for i in range(len(fk)):
        heapq.heappush(q,(fk[i],i))
    a=True    
    while sumfood+((q[0][0]-countnum)*length)<=k :
        now=heapq.heappop(q)
        sumfood+=(now[0]-countnum)*length
        length+=-1
        countnum=now[0]




    q.sort(key=lambda x:x[1])
    res=q[(k-sumfood)%length][1]

    return res+1

	
	
		