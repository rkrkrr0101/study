bfs써서 큐만들고 큐로 루프돌리고 큐에서하나뺴고 그거로 상하좌우 체크한다음에 갈수있거나 간적이없으면 큐에삽입

	bfs(배열,방문,시작점):
		큐만들고 시작점넣고
		시작점 방문처리
		
		와일 큐:
			큐하나뺴고 
			그거기준 상하좌우 반복
				0이나 nm안넘기는지 체크하고
					방문안했으면
						방문처리하고(현재좌표 삽입)
						그좌표 큐에삽입
		트레이스(도착점,카운트,경로):
			만약 시작점이면:
				리턴 카운트경로
			아니면 
				카운트+1
				경로++
				트레이스(현재좌표의값,카운트,경로)#현재좌표에다가 전에왔던좌표 새겨서 스택처럼따라가게만듬
				리턴 카운트경로
			
[(0, 0), 0     , [1, 2], 0     , [1, 4], 0     ]
[[0, 0], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4]]
[0     , 0     , 0     , 0     , 0     , [1, 5]]
[[3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [2, 5]]
[[3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5]]


from collections import deque
n,m=5,6
array=[[1,0,1,0,1,0],
      [1,1,1,1,1,1],
      [0,0,0,0,0,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1]]
trace=[[0] * m for _ in range(n)]
cott=[[1] * m for _ in range(n)]
di=(0,0,1,-1)
dj=(1,-1,0,0)

def bfs(start):
    global count
    quere=deque([start])
    trace[start[0]][start[1]]=[-1,-1]
    while quere:
        v=quere.popleft()
        
        for k in range(4):
            if v[0]+di[k]>=0 and v[0]+di[k]<n and v[1]+dj[k]>=0 and v[1]+dj[k]<m:
                if trace[v[0]+di[k]][v[1]+dj[k]]==0:
                    if array[v[0]+di[k]][v[1]+dj[k]]==1:
                        trace[v[0]+di[k]][v[1]+dj[k]]=[v[0],v[1]]
                        quere.append([v[0]+di[k],v[1]+dj[k]])
                        cott[v[0]+di[k]][v[1]+dj[k]]=cott[v[0]][v[1]]+1
def tracer(v,cou,stri):
    if v==[-1,-1]:
        return [cou,stri]
    else:
        cou=cou+1
        
        stri=stri+str(v)
        cou,stri=tracer(trace[v[0]][v[1]],cou,stri)
        return [cou,stri]

bfs([0,0])
temp=tracer([4,5],0,'')