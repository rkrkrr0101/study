var sayn=function(){
	console.log('node')
}
var es='ES'
var oldObject={
	sayJS:function(){
		console.log('js')
	},
	sayn:sayn
}
oldObject[es+6]='fa'
o

const newo={
	sayJS(){
		console.log('js')
	},
	sayn,
	[es+6]:'ffa'
	
}

function add1(x,y){
	return x+y
}
const add2=(x,y)=>{
	return x+y
}
const add3=(x,y)=>x+y

const add4=(x,y)=>(x+y)

function not1(x){
	return !x
}

const not2=x=>!x


var rel1={
	name:'zero',
	friends:['nero','hero','xero'],
	logF:function(){
		var that=this;
		this.friends.forEach(function(friend){
			console.log(that.name,friend)
		})
	}
	
}
rel1.logF()


var rel2={
	name:'zero',
	friends:['nero','hero','xero'],
	logF(){
		this.friends.forEach(friend=>{
			console.log(this.name,friend)
		})
	}
	
}
rel2.logF()


var candym={
	status:{
		name:'node',
		count:5,
	},
	getCandy(){
		this.status.count--
		return this.status.count
	}
}

const{getCandy,status:{count}}=candym

var arr=['nodejs',{},10,true]
var node=arr[2]
const [node,obj,,bool]=arr



var Human=function(type){
	this.type=type||'human'
}
Human.ishuman=function(human){
	return human instanceof Human
}
Human.prototype.breathe=function(){
	alert('h-a-a-a-m')
}
var zero=function(type,firstname,lastname){
	Human.apply(this,arguments)
	this.firstname=firstname
	this.lastname=lastname
}
zero.prototype=Object.create(Human.prototype)
zero.prototype.constructor=zero
zero.prototype.sayname=function(){
	alert(this.firstname+' '+this.lastname)
}
var oldzero=new zero('human','Zero','cho')
Human.ishuman(oldzero)

class Human{
	constructor(type='human'){
		this.type=type
	}
	static ishuman(human){
		return human instanceof Human
	}
	breathe(){
		alert('h-a-a-a-m')
	}
}
class zero extends Human{
	constructor(type,fir,last){
		super(type)
		this.fir=fir
		this.last=last
	}
	sayn(){
		super.breathe()
		alert(this.fir+' '+this.last)
	}
}

const cond=true
const pro=new Promise((res,rej)=>{
	if(cond){
		res('tt')
	}else{
		rej('ff')
	}

})
pro
	.then((message)=>{
		return new Promise((res,rej)=>{
			res(message)
		})
	})
	.then((message2)=>{
		console.log(message2)
		return new Promise((res,rej)=>{
			res(message2)
		})
	})
	.then((message3)=>{
		console.log(message3)
	})
	.catch((error)=>{
		console.error(error)
	})

function findandsaveuser(users){
	users.findOne({})
	.then((user)=>{
		user.name='zero'
		return user.save()
	})
	.then((user)=>{
		return users.findOne({gender:'m'})
	})
}

const pro1=Promise.resolve('성공1')
const pro2=Promise.resolve('성공2')
Promise.all([pro1,pro2])
	.then((res)=>{
		console.log(res)
	})
	.catch((error)=>{
		console.error(error)
	})

async function findandsaveuser(users){
	try{
		let user=await users.findone({})
		user.name='zero'
		user=await user.save()
		user=await users.findOne({gender:'m'})
	}catch(error){
		console.error(error)
	}
}
async fasu=async(users)=>{
	...
}

const pro1=Promise.resolve('성공1')
const pro2=Promise.resolve('성공2')
(async()=>{
	for await (promise of [promise1,promise2]){
		console.log(promise)
	}

})()

const fd=new FormData()
fd.a

(async()=>{
	try{
		const fd=new FormData()
		fd.append('name','zerocho')
		fd.append('birth',1994)
		const result= await axios.post('https://www.zerocho.com/api/post/formdata',fd)
		console.log(result)
		console.log(result.data)
	}catch(error){
		console.error(error)
	}

})()





























