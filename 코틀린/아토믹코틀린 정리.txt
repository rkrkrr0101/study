1부.프로그래밍 기초중 특이한거
	함수가 한줄로만 이뤄졌을경우
		fun abc(x:Int):Int=x*3
	이런식으로 쓰고
		abc(3)
	이런식으로 사용할수도있음
	
	int를 나누기하면 기본적으론 버림처리하고,이게싫으면 double로 변환해서 처리해야함
	그리고 코틀린은 오버플로우를 잡아주지않으므로(잡아줄떄도있지만 확실한건아님),항상 신경써야함,이때 Long를 쓸수있음
	Long도 모자라면 BigDecimal을사용해야함
	
	do-while을 사용하면 무조건 한번은 실행하는 while을 만들수있음
	
	for를 쓸때 
		until로 마지막값을 제외한값을 돌릴수있고(0 until 3 ->0,1,2)
		downTo로 역순진행(5,4,3,2,1)을 할수있고,
		step으로 n개씩 건너띌수있음(0..9 step 3)
	등이 있음

	in으로 어떤 값이 해당범위안에 존재하는지 확인할수있음(bool)
		32 in 1..100 -> true
		3233 in 1..100 -> false
	반열림범위도 있음(코틀린 1.8부터)
		32 in 1 ..<100 -> true
		100 in 1 ..<100 -> false
	string도 적용됨
		"ab" in "aa".."az" -> true
		"bb" in "aa".."az" -> false
	이렇게

	문은 상태를 변경하고,식은 값을 짜냄
	즉 문은 사이드이팩트를 일으키기위해서 사용되고(for),식은 값을 뽑아내기위해서 사용됨(함수)
	그래서 식은 값을 돌려주기때문에 다른식의 하위요소나 변수에 대입할수있지만,문은 변수로 대입할수없음
	if는 식을 반환하기때문에,변수에 대입할수있음(if의 결과가 대입됨,즉 if문을 돌리고 결과값만 대입해서 해당타입이 대입됨)
	i++도 문이 아니라 식임
2부.객체소개중 특이한거
	코틀린에서는 자바와 달리,패키지의 구조가 폴더를 따라가지않아도됨(하지만 따라가게하는게 편함)
	
	vararg로 생성자에서 파라미터를 여러개받을수있음
		fun abc(val a:String,vararg ints:Int){}
	이때 array로 들어옴
	그리고 저자리에 array를 넣어서 호출할수있음(이때 그냥 array<Int>가 아닌 타입이 지정된 array를 사용해야함)
		abc("aqq",intArrayOf(1,2,3))
	이런식
	
	프로퍼티에 get,set을 설정할수있음(프로퍼티 선언뒤에 바로 적으면됨)
		var i:Int=0
			get(){
				return i+30
			}
	이렇게	
3부.사용성
  1.확장함수
	확장함수는 해당 클래스에 멤버변수를 추가하는거처럼 동작하게할수있음
	즉
		fun String.abc()="abc"
	이런식으로 해당클래스의 함수를 추가할수있는데,일단 이 확장함수는 해당 패키지에서만 사용할수있고,다른패키지에서 사용하려면 임포트를 해야함
	그리고 this를 사용하지않아도 자기자신(즉 String)의 프로퍼티나 메서드에 접근할수있음
		fun String.abcTwin()=this.abc()+this.abc()
		fun String.abcTwin()=abc()+abc()
	두개다 똑같이동작
	그리고 확장함수는,실제로 해당 클래스에 들어가는게 아닌 데코레이터패턴을 구현한거라서,퍼블릭원소에만 접근할수있고,밖에서 접근가능한곳에만 접근할수있음
	즉 신택틱슈가임(ide사용할떄는 편해지고,구분도 안해도되니)
  2.이름붙은 인자와 디폴트인자
	함수를 콜할때 이름을 명확히 지정해서 부를수있음
		val a=aqq(red=255,blue=240)
	그리고 메서드를 만들때도 디폴트값을 설정할수있음	
  3.오버로딩
	오버로딩은 같은동작인데 약간다른 타입을 같은방식으로 처리할때 사용됨(int와 double같은)
	만약 어떤 클래스안에 확장함수와 시그니처가 똑같은 멤버함수가 있으면 멤버함수를 우선시하는데,이걸가지고 오버로딩을 할수있음
	그래서,확장함수+오버로딩을 디폴트인자를 흉내내기위해 사용하면안됨
	즉 진짜 오버로딩을 하기위해 확장함수를 사용하는건 괜찮은데,디폴트인자처럼 동작시키기위해 사용하면안됨(애초에 디폴트쪽으로 접근이 불가능하기때문)
  4.when
	when은 case문임
	when에서 ,로 여러값들을 한 분기로 묶어처리할수있음
	when에서 {}를 두면 해당값으로 아무처리도 안하겠다는거(그냥 빈거임)
	when에서 return을 하면 해당 함수자체가 끝이나니 조심
	when에서 값이 아닌 조건(age<20)도 조건에 넣을수있음,단 boolean타입이어야함
  5.이넘
	이넘은 이름을 모아둔 클래스임
	이걸 사용하면 오타걱정이 없어지고,when을 사용할떄도 편하게 사용할수있음(분기가 정확히 나눠지니 else가 필요없음)
	이넘에서도 멤버함수를 추가할수있는데,이때는 마지막이넘값 다음에 세미콜론을 꼭 붙이고,함수나 프로퍼티를 추가하면됨
	보통 프로퍼티나 함수만들고,자기자신클래스를 가공해서 리턴하는걸 자주사용함
  6.데이터클래스
	데이터클래스는 toString(),hashCode()등을 자동으로 생성해주는 클래스임,즉 데이터저장만 하는 클래스면 이걸쓰면 편함
	이떄 해당클래스는,생성자의 모든 파라미터를 val이나 var로 선언해야함
  7.구조분해선언
	pair이나 triple같은 클래스들을 한번에 분해할수있음
		val (a,b)=페어값
	data클래스는 자동으로 구조분해선언을 지원함,이때 그냥 프로퍼티순서대로 넣으니,데이터클래스에 값추가할떄는 조심해야함	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		