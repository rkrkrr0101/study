1.코틀린이 무엇인가
	스킵
2.코틀린 기초
	코틀린에선 if가 문이 아닌 식임
	그래서 자체적으로 값을 만들어낼수있음
		if(a>b) a else b
	이런식으로 if안에서 값을 뽑을수있음 삼항연산자처럼
	
	변수는
		val abc:자료형=값
		val abc=값
	이렇게 할수있음,자료형생략하면 타입추론해서 넣음,이땐 값이 무조건있어야함
	val은 변경불가능한 변수,var은 변경가능한 변수
	이때 변경불가능은 단순참조값을 변경못한다는거라,리스트를 대입했을경우 리스트를 통째로 바꾸진못하고,리스트값을 추가삭제하는건 가능
	val은 단 한번만 초기화가 가능함,이 초기화는 선언할때말고 뒤에서 해도됨(if문으로 여러값중 하나로 초기화가능)
	
	${변수명}으로 문자열내에서 변수를 편하게삽입할수있음
	
	코틀린에서 클래스접근자의 디폴트는 퍼블릭임,그리고 기본적으로 필드와 게터,혹은 세터까지도 자동으로 묶어서 선언됨(프로퍼티)
	val일경우 게터까지,var일경우 세터까지 자동으로 선언됨,이 세터를 지울방법은 없음
		class Person(
			val name:String,
			var isMarried:boolean
		)
	이런식으로 선언함
	이게 자바코드로 바뀔때 자동으로 getter를 생성하고 사용하는식으로 바뀌는거고,getName()같은 메서드가 숨어있다고 봐도됨
	그리고 추가적으로,프로퍼티의 이름의 시작이 is로 시작하는경우 getisMarried가 아닌,isMarried()로 getter를 만듬
	
	이 접근자는 커스텀으로 만들수있는데,즉 식을 넣을수도있음
		class Rectangle(val height:Int,val width:Int){
			val isSquare:Boolean
				get(){
				return height==width
				}
		}		
	이런식으로 해당 필드의 게터를 커스텀할수있음
	줄여서
		get()=height==width
	이렇게도 가능(어짜피 두개는 같으니까)
	
	코틀린에선 한파일안에 여러클래스를 넣는일이 자주있고,이걸 주저해서는안됨(크기가 작을경우)
	
	enum클래스는 기본적으로
		enum class Color{
			RED,GREEN
		}
	이런식이고,여기에서 필드를 추가하고,해당값마다 생성자를 추가하고,함수를 추가할수있음
		enum class Color(val r:Int,val g:Int,val b:Int){
			RED(255,0,0),GREEN(0,255,0); //이땐 무조건 세미콜론을 찍어야함
			fun rgb()=(r*256+g)*256+b
		}
	이렇게
	
	스위치문은 when을 사용하면됨
	여기선 break를 안써도되고,여러값을 묶어서 분기처럼 사용할수도있음
	그리고 when의 인자로 아무객체나 사용할수있음
		when(setOf(a1,a2))
			setOf(RED,GREEN)->ORANGE
			else->throw Exception("error")
	이렇게 집합으로 받아서 순서상관없이 그값이 있나 확인하는거도 가능
	뭐 스위치문쓸일이 많진않지만
	단 이렇게 객체를 사용하면,객체를 만들고 비교하기때문에,메모리에서 약간 손해보긴함,그래서 메모리가 중요하면 풀어서 or로 써야함
		
	코틀린에선 is을 사용해서 변수타입을 검사함,이때 저걸 통과하면,자동으로 해당타입으로 캐스팅을 해서 밑에서 사용할수있음
	즉 as써서 명시적으로 타입캐스팅할필요가 없음
	그리고 블록의 마지막값은 자동으로 해당값이 출력됨
	즉 블록의 마지막에 a가 있을경우 해당식의 출력으로 a가 나감
		a=a+b
	이거 축약된게,그 if문 삼항연산자임,값만 나열했는데 출력되는거
	
	반복문은 while와 for가 있는데,
	while는 똑같고,
	do-while는 1번실행을 강제하는 while
	for는 기본적으로 foreach라고 보면됨
	그래서 n번 반복할땐
		for(i in 1..100){}
	이렇게사용하면됨 파이썬이랑 같음
	그리고 역순으로 내려갈땐
		for (i in 100 downTo 1 step 2){}
	이러면 100부터 2씩 깍임
	
	맵에 대해 for 돌릴때도
		for((key,value) in abcMap){}
	이렇게 쌍으로 받으면됨//구조분해
	맵에 값 넣을때도
		abcMap[키값]=넣을값
	이렇게 하면 됨,put안써도됨
	그리고 리스트에서 인덱스도 같이돌리고싶으면
		for((index,element) in abcList.withIndex())
	하면됨
	
	in을 사용해 컬렉션안에 해당값이 있는지,!in을 사용해 컬렉션안에 해당값이 속하지않는지 검사할수있음 
		return 'c' in 'a'..'z'
	이건 comparable인터페이스를 구현한 모든클래스에서 가능함


	코틀린에서 예외처리도 try catch finally를 사용함
	자바와의 차이점은,모든체크예외는 언체크예외로 변환되서 따로 명시적으로 throws해줄필요가 없음 
	그리고 trycatch를 식으로 사용할수있음
		val q3:Int?=
			try{q1+q2}catch(e:Exception){null}
	이렇게 예외를 무시하는식으로도 사용할수있고 그럼
	이때 try를 반드시 중괄호로 감싸야하고,블럭내의 마지막값이 리턴값임
		
		
		
		
		
		
		
		
		