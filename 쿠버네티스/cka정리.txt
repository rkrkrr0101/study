kubectl get pods
kubectl get pods --namespace=네임스페이스명
kubectl get pods --all-namespace
kubectl get all
kubectl get pods --selector 키=벨류
kubectl get pods --show-labels 레이블표시
kubectl get pods --no-headers | wc -l  갯수만 표시
kubectl describe pod123
kubectl get event
kubectl top node  리소스사용량보기
kubectl logs -f 파드명 컨테이너명(컨테이너가 2개이상일떄,이거안붙이면 무조건 첫번째컨테이너 출력)

kubectl run 파드명 --image=nginx   (파드는 런임 크리에이트안됨)
kubectl run 파드명 --image=nginx --labels=tiers=db 이런식으로 레이블은 넣으면됨
kubectl expose deployment 디플로이먼트명 --name=서비스 이름   기타등등(서비스 특정디플로이먼트에 생성할때)
,포드도 가능,이러면 셀렉터에 포드나 디플로이먼트가 가지고있던 레이블 전부가 들어감
kubectl run 파드명 --image=nginx --port=80 --expose 이런식으로 바로 서비스생성도 가능

당연하지만 yaml에서 위에메타데이터레이블은 디플로이먼트레이블이고 밑에 템플릿밑에 레이블은 파드레이블임

kubectl describe 머시기 | grep -i image나 뭐 찾을거





kubectl run nginx --image=nginx
kubectl run nginx --image=nginx --dry-run=client -o yaml
kubectl create namespace dev
kubectl create ResourceQuota
kubectl create deployment --image=nginx nginx
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml
kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deployment.yaml
kubectl run 파드명 --image=이미지 --dry-run -o yaml > bee.yaml

kubectl run  --image=busybox sbox --dry-run -o yaml --command -- sleep 1000 > /etc/kubernetes/manifests/static-busybox.yaml    스태틱파드생성

kubectl apply -f .   현재폴더내 전부 크리에이트


데몬셋은 크리에이트안됨,디플로이먼트로 야믈뽑고 수정해야함

kubectl scale deployment --replicas=5 디플로이먼트명

servicename.namespace.svc.cluster.local

kubectl config set-context $(kubectl config current context) --namespace=dev

노드접근시 curl ip or dns(노드 ssh접근):포트(그노드의 포트접근)

서비스도 셀렉터넣어서 선택

kubectl taint nodes 노드명 key=value:tainteffect(noSchedule(노스케쥴),preferNoSchedule(가능하면),NoExecute(톨러없이실행x))
spec:
	tolerations:
	- key:테인트키값
	  operator: equal(연산자넣는거)
	  value:테인트밸류값
	  effect:테인트이펙트값

테인트 삭제시엔,테인트넣는거 똑같이넣고 마지막에 -붙여서 한번더 날리면됨
그리고 특정노드 배치하는거할땐,톨러레이션은 일반노드에도 배정될수있기때문에 노드어피니티와 같이써야함(노드어피니티만 쓰면 다른애들이 여기들어올수있음)

kubectl label nodes 노드명 키=밸류    노드에 레이블추가

노드어피니티에서 키만 일치시키려면 오퍼레이터에 Exists줘야함

파드 변경시엔,이미지와 액티브데드라인세컨드,톨러레이션말곤 수정할수없어서,yaml로 뽑아서 원본을 삭제시키고 다시넣어야됨
디플로이먼트야 바꾸면 바로 자기가 다삭제하고 다시만듬

메모리 리소스 초과시엔 describe로 보면 last state-reason에 나옴,이벤트에 표시안됨

스태틱파드는 워커노드의 /etc/kubernetes/mainifests 에 yaml을 두면 알아서 읽고 만듬,이건 삭제되도 yaml이 폴더에 남아있으면,계속 유지시킴
이건 기본값이고,kubelet.service에서 pod-manifest-path를 바꾸면 경로바꿀수있음
이거파일 찾을때는 ps -aux | grep kubelet로 config.yaml 경로찾고,거기접속해서(vi)경로보면됨(staticpodpath)
만약 다른노드면 ssh ip 로 거기 접속해서하면됨
그리고 스태틱파드볼땐,api서버가 없으면 docker ps로 볼수있음
api서버가 있으면 get할수는있지만 수정할순없음(파일이 노드에있기때문)
그리고 파드뒤에 노드이름붙어있으면 스태틱파드

커스텀스케줄러할때 스케줄러파드 배포할떈,원본(디폴트)복사해다가 이름만바꾸면됨,그리고 leader-elect=true한애가 리더임(얘가 우선)
즉,스케줄러 추가할때
커맨드밑에
	- --leader-elect=false
	- --scheduler-name=스케줄러이름
	이거넣고 파드 이름 바꿔주면됨
그리고 스태틱파드폴더에 넣으면됨
그리고 파드 스펙밑에(컨테이너랑 같은라인에) schedulerName:스케줄러파드이름 으로 자기가 스케줄링당할 스케줄러를 고를수있음
그리고 k get events 로 어떤스케줄러가 어떤파드를 어떻게했는지 볼수있음
그리고 이전기록은 k logs 스케줄러이름 --name-space=네임스페이스이름  으로 볼수있음  
커스텀스케줄러 디렉토리는 /etc/kubernetes/manifests/(스케줄러는 스태틱파드로 실행됨 )커스텀스케줄러는 자신없으니까 한번더보자

메트릭서버 모니터링은,시험범위 내에선 저장을 못함(프로메테우스같은거있어야함),그래서 k top node,pod같은거로 현재값검색밖에 못함
메트릭서버 설치할땐   git clone 깃주소     하면됨




















yaml로 생성시 api버전
	pod:v1
	service:v1
	replicaset:apps/v1
	deployment:apps/v1
	
	
apiVersion: v1
kind: Pod
metadata:
	name: pod123
	namespace: dev
	labels:
		app: myapp
spec:
	containers:
		- name: con123
		  image: nginx   //여기까지 기본
		  ports:
			- containersPort: 8080
		resources:                  //파드에서 직접쓸땐,그 네임스페이스에 LimitRange를 만들어둬야 쓸수있음
			requests:
			  memory: '1gi'
			  cpu: 0.5
			limits:                   //cpu는 초과시 쓰로틀,메모리는 초과시 재시작
			  memory: '3gi'          
			  cpu: 1.5

apiVersion: apps/v1
kind: ReplicaSet
metadata:
	name: repl123
	labels:
		app: repl
spec:
	replicas: 3
	selector:
		matchLabels:
			app: podre1
	template:
		metadata:
			name: pod123
			labels:
				apps: podre1
		spec:
			containers:
				- name: pod123
				  image: nginx

apiVersion: v1
kind: Service
metadata:
	name: pod123
	namespace: dev
	labels:
		app: myapp
spec:
	type:LoadBalancer
	ports:
		- targetPort: 80
		  port: 80
		  nodePort: 30008		  
		  
For Windows: Ctrl+Insert to copy and Shift+Insert to