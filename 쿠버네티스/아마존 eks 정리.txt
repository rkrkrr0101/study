1.컨테이너와 쿠버네티스
	스킵
2.쿠버네티스환경구축과 예제앱
1.예제앱과 aws기본
	아마존의 서비스들
		S3:aws의 클라우드 스토리지 서비스,버킷이라는 영역을 생성하고(최소단위) 거기에 파일을 저장
		cloudFront:aws의 컨텐츠전송네트워크,웹,이미지,동영상등을 빠르게 전송함,홈페이지를 여기를통해서 접속하면됨
		rds:aws의 관계형 db,여러종류가 있음(오라클,마이sql등)
		ecr:aws의 컨테이너 레지스트리 관리서비스
		ec2:aws의 가상머신서비스,배스천 호스트(외부와 유일하게연결된 호스트)로 주로사용,eks의 워커노드도 이거로 동작
		elb:aws의 로드밸런서,l7로드밸런서(애플리케이션로드밸런서),l4로드밸런서(네트워크로드밸런서),게이트웨이로드밸런서(다른회사거 같이쓰는용도)
			클래식로드밸런서(기본로드밸런서,http,https,tcp로 분산가능하고,기본적인 로드밸런서를수행)가 있음
		iam:aws에 접속하는 사용자와 권한을 관리하는 서비스
	eks설치법
		보통 eksctl로 설치함
		이러면 vpc(가상내부클라우드),서브넷,보안그룹등을 한번에 구성할수있음
		
	vpc는 서버등의 리소스를 논리적으로 분리된 영역으로 나눠둔거
	하나의 aws계정에 여러 vpc를 생성할수있지만,각각 전부 독립된 환경이고 명시적으로 vpc를 연결하지않으면(피어링)서로 통신할수없음
	aws는 모두 리전을 정해서 리소스를 생성함
	vpc는 서브넷을 사용해 네트워크를 분할해 관리함,서브넷은 가용영역 여러개를 할당받을수없고,받은거에서 나눠서 여러vpc에 나눠줘야함
	라우팅설정은 서브넷단위로 할수있음,즉 퍼블릭서브넷(인터넷접속가능)과 프라이빗서브넷을 생성할수있음
	
	aws에서 리소스를 구축할땐 클라우드포메이션이나 테라폼을 사용함
	여기선 yaml이나 json을 써서 리소스구성을 정의함
	
	aws관리콘솔은 aws서비스를 관리하는 웹인터페이스
	awscli는 aws의 터미널
	
2.eks클러스터 구축
	설치는 필요해지면 보자
	대충 클라우드포메이션으로 템플릿을 만들거나 불러와서 그대로 함
	리소스확인은 서비스의 네트워크및 콘텐츠전송의 vpc를 하면됨
	
	eks클러스터 설치는
	워커서브넷값을 복사하고
		$ eksctl create cluster \   # 아래의 인수를 설정하여 eksctl 실행
		> --vpc-public-subnets <WorkerSubnets값> \ # 워커 노드용 서브넷
		> --name eks-work-cluster \   # 클러스터 이름
		> --region ap-northeast-2 \   # 리전(서울 리전을 설정)
		> --version 1.19 \   # EKS 클러스터 버전
		> --nodegroup-name eks-work-nodegroup \   # 노드 그룹 이름
		> --node-type t2.small \   # 워커 노드 인스턴스 타입
		> --nodes 2 \   # 워커 노드 수
		> --nodes-min 2 \   # 워커 노드의 최소 노드 수
		> --nodes-max       # 워커 노드의 최대 노드 수
	이걸쓰면됨
	워커노드서브넷값을 넣고,클러스터이름지정하고 리전지정하고 버전지정하고 노드그룹이름넣고 워커노드인스턴스타입 넣고 노드수,최대최소노드수 넣으면됨
	이러면 커맨드로도 출력되지만,현재진행상태가 클라우드포메이션에서도 출력됨
	그리고 eksctl을 쓰면 클러스터구축중에 kubeconfig파일(C:\User\사용자명\.kune\config)을 자동으로 업데이트함
	얘의 설정값으로 쿠버네티스클러스터에 접속함(마스터노드url,인증정보,네임스페이스)
	eks 클러스터에 접속하기위한 인증정보는 awscli로 확인할수있고,eksctl로 awscli를 호출하여 인증하기위한 설정을 kubeconfig파일에 추가할수있음
	
	이제 eks에 접속되니까 
		k config get-contexts
	로 현재컨텍스트 확인할수있음
	
	여기서부턴 쿠버네티스 쓰면됨
3.db설정
	db는 rds를 사용함
	rds는 db가 설치된 os에 로그인할수없는등의 제약이 있어서,베스천호스트로 ec2를 만들어서 사용함
	이때도 클라우드포메이션쓰면됨
	db생성은 스킵하고(필요하면보자)
	
	db에 베스천호스트로 세션을 연결하면됨
	관리및 거버넌스의 aws systems manager로 들어가서 세션매니저를 고르고 세션시작하면됨
	그러면 만들어둔 db베스턴호스트가 보이고 거기로 시작하면됨
	
	거기에 깃과 db클라이언트를 설치하고(sudo amazon-linux-extras install -y db명   으로 설치가능)
	
	클라우드포메이션으로 데이터베이스엔드포인트(클라우드포메이션에서 스택을선택하고 출력을보면 키값이있음),
	어드민비번(보안자격증명 secrets manager에 있음),
	사용자비번(보안자격증명 secrets manager에 있음,단 아이디는없는데,아이디를 만들때 이비밀번호를 사용하면됨)을 확인하면됨
	db에 접속할떈 엔드포인트로 접속하면됨
	
	그리고 세션관리자의 콘솔에서
		createuser -d -U 유저명 -P -h <RDS 엔드포인트 주소> mywork
	로 유저를 생성할수있음,이거치면 비밀번호를 3번입력하는데 앞에2번은 거기에 아까 그사용자비번 넣으면되고 마지막엔 어드민비번넣으면됨
	
	그리고
		createdb -U mywork -h <RDS 엔드포인트 주소> -E UTF8 myworkdb
	로 db를 생성할수있음
		psql -U mywork -h <RDS 엔드포인트 주소> myworkdb
	로 db에 접속가능
	그리고 테이블설정하고 할거하면됨
	
4.앱빌드와 배포
	컨테이너 이미지를 빌드할떈
		docker build
	로 빌드하면되고
		
		$ sudo docker build -t k8sbook/backend-app:1.0.0 --build-arg \
		> JAR_FILE=build/libs/backend-app-1.0.0.jar . //도커데스크톱 자바예제
	이 이미지를 ecr에 푸시하고 거기서 풀받아서 쿠버네티스에서 사용하면됨
	이때 ecr을 사용할땐,
	서비스-컨테이너-elastic container registry에서 리포지터리를 생성하고(이때 네임스페이스/레포이름 구조임,즉 네임스페이스사용가능)
	레포이름을 적으면,
		<AWS_ACCOUNT_ID>.dkr.ecr.ap-northeast-2.amazonaws.com/네임스페이스/레포이름
	구조의 url이 생기고,저기로 푸시풀하면됨
	
	ecr에 로그인할떈
		$ aws ecr get-login-password --region ap-northeast-2  | \
		pipe> docker login --username AWS --password-stdin \
		pipe> <AWS_ACCOUNT_ID>.dkr.ecr.ap-northeast-2.amazonaws.com
	하면 로그인되고
	그상태에서
		docker tag 네임스페이스/앱이름:태그 \
		<AWS_ACCOUNT_ID>.dkr.ecr.ap-northeast-2.amazonaws.com/k8sbook/backend-app:1.0.0
	로 설정함(이건 ecr에 가기전에 이름을 매칭해두는거)
	이건 처음에 네임스페이스/앱이름:태그 를 aws링크로 매핑하는것
	
	그리고 
		$ docker push <AWS_ACCOUNT_ID>.dkr.ecr.ap-northeast-2.amazonaws.com/k8sbook/backend-app:1.0.0
	하면 푸시됨
	
	그리고 이걸 쿠버네티스에서 받아가면되는거
	
	그리고 db에 접속할 시크릿을 쿠버네티스에 등록하고
	그걸받는 디플로이먼트를 배포하고 서비스를 만들면됨,서비스는 로드밸런서를 쓰면됨
	로드밸런서확인은 서비스의 ec2를 누르고 왼쪽에서 로드밸런서를 누르면됨
	
5.프론트앤드 앱 빌드와 배포
	먼저 코드를 빌드하고 결과물을 생성(자바면 jar파일같은 출력물)
	그리고 s3버킷과 cloudFront를 생성하고(cloudformation으로)
	s3버킷에 결과물을 업로드하고
		$ aws s3 sync dist s3://eks-work-frontend-<BucketSuffix값> \
		> --delete --include "*" --acl public-read
	클라우드프론트의 캐시를 제거(클라우드프론트는 12시간동안 캐시를 기억해서 파일이 바뀌어도 바로 적용이 안되니까 캐시를 지워줘야함)
		$ aws cloudfront create-invalidation --distribution-id <DistributionID값> \
		> --paths "/*"
		
	그리고 클라우드포메이션의 스택출력탭의 url을 보면 결과물이 나옴
	이게 모든리전에 배포될때까진 24시간이 걸림
	
6.배치앱빌드와 배포
	이거도 똑같이 코드를빌드해서 결과물을 생성하고
	도커로 이미지를 생성
		$ sudo docker build -t k8sbook/batch-app:1.0.0(이미지명) --build-arg \
		> JAR_FILE=jar파일 .
	그리고 ecr리포지터리를 생성하고
	ecr에 로그인(지속시간12시간)
		$ aws ecr get-login-password --region ap-northeast-2 | \
		pipe> docker login --username AWS --password-stdin \
		pipe> <AWS_ACCOUNT_ID>.dkr.ecr.ap-northeast-2.amazonaws.com
	그리고 ecr에 이미지태그를 생성하고 푸시
		$ docker tag k8sbook/batch-app:1.0.0 \
		> <AWS_ACCOUNT_ID>.dkr.ecr.ap-northeast-2.amazonaws.com/ \
		> k8sbook/batch-app:1.0.0
	태그생성
		$ docker push <AWS_ACCOUNT_ID>.dkr.ecr.ap-northeast-2.amazonaws.com/ \
		> k8sbook/batch-app:1.0.0
	그리고 버킷을 생성하고,버킷이름과 s3의 디렉토리이름이 담긴 컨피그맵을 생성(쿠버네티스)
	
	그리고 s3버킷을 프라이빗으로 설정하면,거기 접속하기위한 정보를 전달해야하는데 이때 시크릿을 사용함
	인증정보는 aws systems manager의 파라미터스토어에 있는데 거기의 유저키와 유저시크릿액세스키를 복사해서 시크릿을 생성
	그리고 db와 버킷이 잘생성됐나 확인해보고 디플로이먼트 배포(ecr이미지를 써서)
7.삭제
	aws는 걍두면 돈나가니까 다했으면 지워야함
	이건 만들때보자
	이거도 순서대로 지우면됨(생성의 역순)
8.클라우드포메이션 정보들
	나중에보자
	
	
	
	
	
	
3.쿠버네티스(반이상스킵)
1.이장 설명
	스킵
2.쿠버네티스 리소스
	사이드카패턴은 공용볼륨으로(엠프티볼륨) 컨테이너간 통신하며 로그같은일을 서브컨테이너가 처리하는것
	앰버서더패턴은 외부와 통신할때,통신전용 컨테이너를 둬서,메인컨테이너가 거길 거쳐서 통신하게하는것(리버스프록시라고 보면됨)
	크론잡은 잡을 시간별로 실행하는거,여기서 주의할점은 크론잡은 가끔 실행이 안되거나,2개이상이 실행되는 경우가 있어서,멱등성이 지켜지는일만 시켜야함
	그리고 스테이트풀은 어지간하면 추천하지않음,이와 같은이유로 퍼시스턴트볼륨도 별로 추천되진않고,파드는 스테이트리스로 돌아가는게 제일좋음
3.서비스
	eks를 쓸거면,아마존 로드밸런서를 쓸수있음
	이떄 기본값을쓰면 클래식로드밸런서가 되고,설정하면 네트워크로드밸런서로 생성할순있음
	이렇게 생성하면,ec2의 로드밸런서메뉴의 인스턴스탭에서 등록이 됨,이게 inservice면 돌아가는거
	이때 노드포트타입이 생성되는데,이건 랜덤으로 나오고,여기를 통해서 접속경로로 설정함 로드밸런서가
	즉,로드밸런서 서비스는,노드포트+외부 로드밸런싱장치 라고 보면됨
	
	그리고 여기의 리스너탭에서 패스워드와 인증서를 볼수있음
	
	로드밸런서를 해서 외부와 공개할수있지만,이러면 서비스단위로 elb가 생성되어서 돈이많이나오고,어플리케이션 로드밸런서를 사용할수 없음
	그래서 인그레스를 사용함
	
	그리고 인증서를 사용하는건 180페이지에 인증서생성하고 어노테이션에 인증서 등록하는게 있음
	그리고 dns등록을 하고 접속테스트하면됨
	
4.설정저장(시크릿과 컨피그맵)
	설정저장은,비밀번호같은 민감한건 시크릿,아니면 컨피그맵을 사용함
	시크릿을 쓸땐,단순base64인코딩이고,암호화되지않았기때문에 주의해서사용해야함
	둘다 키:값 저장방식임
	
	그리고 퍼시스턴트볼륨을 쓸땐,ebs로 동적프로비저닝을 할수있긴함
	근데 이러면 rwo밖에 사용불가능해서 rwm이 필요할경우엔 s3을 쓰거나 nfs를 쓰는게 좋음
	
	
5.헬스체크(프로비)
	readinessprobe는 앱이 동작가능한상태인지 체크,이게 ok나야 서비스에 연결됨
	이건 일정주기로 날리는데(기본값 30초)이게 실패하면 다음 30초뒤에 성공할때까지 서비스요청을 거부하고,성공하면 그때부터 다시받음
	서비스연결푸는거말곤 딱히하는건없음
	
	livenessprobe는 파드의 상태를 체크함,얘가 실패하면 파드를 재생성함
	그래서 init가 긴파드의경우,무한루프 돌수있어서 주의해야함(initialdelayseconds로 첫프로비를 파드시작 몇초후에할지 설정가능)
	얘도 똑같이 일정주기로 날림
6.파드 안전종료시 유의점
	파드는 어떤식으로 종료가 오든 비동기적으로 종료를 하는데,
	이떄 이미 서비스에서 요청을 받았는데 종료될수도 있음(종료처리시간과 서비스분리가 같지않기도하고)
	그래서 prestop로 sleep커맨드를 줘서,몇초동안 대기하게 할수있음
	
7.리소스관리
	파드에 request와 limit로 리소스관리를 할수있고,노드에 파드 스케줄링할땐 리퀘스트만 보고 하니까,
	시간대별로 활성화정도가 다른건 좀 오버해서 넣을수있음(리퀘스트는 적게넣고 리미트를 빡빡하게)
	안정적으로 해야하면 리퀘스트와 리미트를 똑같이 넣으면 안정적으로 돌아감
	리퀘스트 리미트는 상용에선 무조건 넣어줘야함,안그럼 하나가 오버해서 서버터지는수가있음
	
	그리고 서버에 리밋레인지를 설정해서,실수로 안적은파드도 자동으로 들어가게해야함(이거설정하면 이범위밖으로 설정된걸 거부할수도있음)
	이건 네임스페이스단위로도 설정가능함
	
	리소스쿼터는 네임스페이스단위로 사용가능한 총량을 지정할수있음
	
	
	
	
	
	
	
4.서비스환경	
1.모니터링
	aws에서 모니터링은 기본적인값은 aws페이지에서 볼수있음
	좀 더 자세히보려면 cloudwatch에서 확인할수있음
	
	클라우드와치는,데몬셋으로 모든노드에 파드를 뿌리고 그거로 메트릭을 수집함
	이 데몬셋과 클라우드와치를 연결하려면
		서비스-컴퓨팅-ec2에 들어가서
		인스턴스메뉴에서 eks클러스터의 데이터노드에 해당하는 id 2개중 하나를 클릭하고 중간의 iam역할밑 링크를 누르고
		정책연결을 누르고
		정책이름목록에서 클라우드와치에이전트서버폴리시를 선택하고 연결하면됨
		
	그리고 eks클러스터에 클라우드와치용 네임스페이스를 생성하고,
	클라우드와치용 서비스어카운트를 생성하고,
	컨피그맵을 생성하고,
	에이전트를 데몬셋으로 돌리면됨
	이러면 컨테이너인사이트에 메트릭을 보내고,클라우드와치로그에도 보냄
	
	이제 컨테이너인사이트에서 확인할수있음(이건 키바나같은 모니터링프로그램이라고 보면됨)
	여기엔 기본프리셋으로 자주쓰는 메트릭집합대시보드를 제공하니까,이거가져다가 커스텀하자
	
	그리고 클라우드와치경보를 이용해서,특정메트릭값을 읽어서 경고메세지를 날릴수있음
	
2.로그관리와 운영
	로그가 쌓이는 구조는
		플루언트디데몬셋으로 로그를 수집하고 클라우드와치에 전송
		클라우드와치에 로그저장
		클라우드와치 로그를 읽어서 메트릭경보를 생성
		클라우드와치 로그를 읽어서 로그를 분석하고 시각화
	원래의 쿠버네티스 로그는 var/logs에 쌓임 (k logs pod container, k logs 레이블이름=레이블밸류)
	
	로그의 저장기간은 기본값은 기간제한 없는데,이거도 다 돈이니까 대충 3개월쯤으로 잘라서 저장하면됨
	그리고 메트릭경보는 하나 생성할때마다 돈이니까,이거도 적절히 잘 나눠야함,그렇다고 error같은거로 묶어버리면 무슨앱에서 문제생겼나 알기힘드니까
	적당히 나눠야함
	
	그리고 로그검색은
		{ $.log != "[*" && $.kubernetes.container_name = "backend-app" &&
		( $.log = "*WARN*" || $.log = "*error*" ) }
	이런식으로 클라우드와치의 서치로그그룹에서 하면됨
	
	로그를 시각화하고 분석할땐,클라우드와치의 로그그룹목록에서 원하는 그룹을 선택하고 로그인사이트에서 보기 누르면됨
	이때 기본적인 쿼리는
		# 예제애플리케이션에어느정도의접속이있었는지 확인
		stats count(*) as ACCESS_COUNT
		| filter ( kubernetes.container_name = "backend-app")
		| filter ( log not like /^\[/ and (log like /Health GET API called./ or log like /
		REGION GET ALL API/ or log like /LOCATION LIST BY REGION ID API/ )
		# 어떤애플리케이션에서얼마만큼의에러가발생하고있는지 확인
		stats count(*) as ERROR_COUNT by kubernetes.container_name as APP
		| filter ( log not like /^\[/ and (log like /WARN/ or log like /error/) )
		
	이 쿼리결과는 대시보드에 저장할수있음

3.오토스케일링
	오토스케일링은 노드단위(aws)와 파드단위(쿠버네티스)가 각각있음 
	노드단위 오토스케일링은,노드가 넘치거나(pending가 있거나) 사용자가 지정한 기준(cpu 80%)를 넘겼을때 자동으로 스케일아웃을 시킴
	
	이때 방법은
		서비스-컴퓨팅-ec2에서
		인스턴스id선택후 iam역할을 누르고,정책연결을 한다음
		autoscalingfullaccess를 선택하고 정책연결을 누름
		
		서비스-컴퓨팅-ec2에서
		auto scaling그룹을 선택하고
		eksctl...nodeGroud-xxxxx를 선택하고 이름을 메모함
		클러스터 오토스케일러 디플로이먼트 yaml에서 커맨드밑에 이름을 적음
		
	이건 리퀘스트기준으로 스케일링을 판단함
	
	그리고 일정기준넘겼을때 스케일아웃 하려면
	컨테이너 인사이트를 활성화하고 aws문서보면서 만들면됨(https://docs.aws.amazon.com/ko_kr/autoscaling/ec2/userguide/asg-capacity-limits.html)
	

	파드단위 오토스케일링하려면 hpa를 쓰면됨(쿠버네티스기능)
	이거쓰려면 메트릭서버를 설치해야함(그냥 디플로이먼트설치하면됨)
	그리고 hpa를 만들고,설정하면 끝임,그러면 자동으로 파드갯수가 늘었다줄었다함
	hpa의 스케일아웃은 30초마다 한번씩,스케일인은 5분마다 한번씩 동작함(기본값)
	
4.보안
	awscli에서 aws eks update-kubeconfig를 사용하면 kubectl을 연결하는거도 가능함(254페이지참고)
	이러면 kubeconfig파일을 읽어서 인증값을 가져다가 씀
	
	그리고나선 이 인증서에 대한 역할(rbac)가 있어야함,이건 롤과 롤바인딩을 통해 구현하고 인증서랑 매핑시키면됨
	
	노드단위 보안에선,파드에 부여하는 호스트권한을 제어해야함
	그래서 pod security policy로 파드보안정책을 설정할수있음,이건 롤과 연계해서 특정 사용자에게 수퍼유저컨테이너를 실행할권한을 주는것
	
	파드단위 보안에선,컨테이너 이미지에 대한 보안이 필요함
	컨테이너 이미지를 스캔해서 문제있는레이어가 있는지 확인해주는 오픈소스소프트웨어를 사용하고
	컨테이너가 이상한짓을 하면(이상한배시명령을 하거나,피싱사이트에 들어간다거나) 관리자에게 통지하는식
	
	보통 각각구현하긴 힘드니까 트리비나 마이크로스캐너(이미지스캔),팔코(동작감시),시그디그,아쿠아(둘다)를 사용함
	
	네트워크단위 보안은 클러스터 내부와 외부에서 내부진입 두개로 나눠짐
	만약 특정ip에서만 클러스터내부에 진입가능해야하면,aws단에서 ip주소를 제한할수있음(eks에서 설정)
	아니면 특정 awscli에서만(특정 아이디) 접근가능하게 할수도 있음
	
	내부에서 파드끼리의 통신은,networkpolicy로 통제가능함
	일단 모든 통신을 거부한다음에,특정 서비스(특정레이블을 가진 파드)끼리만 통신을 허용하는 네트워크폴리시를 추가하는식으로 구현하면됨
	
5.ci/cd
	ci/cd를 하려면,깃기반으로 ci파이프라인을 만들고,거기의 변화를 감지해 cd파이프라인을 만들면됨
	aws에선 codepipeline이라는 ci/cd구현서비스를 제공함
	얘는 소스작성,빌드,배포라는 단계를 정의하고 설정을해서 ci/cd파이프라인을 구성할수 있는 서비스임
	
	이거도 클라우드포메이션으로 환경을 구축하고 적용하면됨
	그리고 eks클러스터 권한에 codebuild iam을 추가하고
	
	그리고 codecommit랑 git를 연동하고 하면됨
	그리고 kustomization에 뉴태그와 뉴네임을 적고 푸시하면 자동으로 디플로이먼트업데이트를 함
	
	그리고 동적으로 버전같은걸 적히게하고싶으면 kustomize를 사용하면됨
	베이스코드에 test의 kustomization.yaml을 덮어씌우는식
	
	그리고 시크릿 안전하게 가져올땐,실드시크릿같은거 사용할수있음
	
6.버전관리	
	쿠버네티스 버전 업그레이드는 eksctl명령어로 하면됨,필요해지면 따라하자
	아니면 아예 클러스터를 블루/그린배포할수도있음
7.파게이트
	파게이트는 각 파드마다 노드하나씩을 배정해서 그냥 생성만하면 나머진 aws가 알아서 해주는식임
	기본적으로 eks를 운영하면서,특정 파드들만 파게이트로 사용할수도 있음
	이렇게되면 오토스케일링을 신경쓸필요도없고(노드마다 파드1대1이니까)
	편하긴한데,제약조건이 좀있음
	그 노드들엔 데몬셋이 들어갈수없고,호스트권한도 쓸수없고,호스트패스도 쓸수없음
	
	얘들을 모니터링하는덴 정석인 방법이 없고,상황맞춰서 알아서해야함
	그리고 네트워크폴리시도 사용할수없음(데몬셋을 쓰기때문)
	
	그렇지만 얘는 실제 사용한시간만 과금이 되기떄문에,작업에 따라서 이게 더 이득일수가 있음(짧은시간만 동작하는것들)
	보통 배치처리등 일시적이거나 정기적으로 많은리소스가 사용되거나,
	병렬처리로 많은파드를 동시에 동작해야할때 사용함
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	