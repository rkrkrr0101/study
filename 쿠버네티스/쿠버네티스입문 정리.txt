1.소개
	스킵
2.설치
	스킵

3.쿠버네티스로 컨테이너 실행	
1.kubectl
	kubectl의 기본 구조는
		kubectl 커맨드 타입or이름 (플래그)  플래그는 옵션
	임
	만약 kubectl get pod 를 하면 포드 전체를 겟(표시)하고
	   kubectl get abcd를 하면 abcd라는 이름을 가진걸 겟함
	   
	   
	여기서 커맨드에는
		get:명시된 데이터를 받아옴
		run:명시된 이름으로 명시된 이미지의 파드를 생성함
		apply:명시된 위치의 yaml파일을 기반으로 선언적으로 디플로이먼트를 생성해서 파드를 생성함
		scale:파드의 갯수를 늘이거나 줄임
		expose:명시된이름으로 명시된 타입의 서비스를 생성함
		port-forward:명시된 이름의 객체를 뒤에 포트(8080:25500)의 외부포트로 매핑함
		logs -f:명시된이름의 객체의 로그를 수집함
		exec:명시된 이름의 객체에 뒤에 나올 명령을 실행하라고 함
		  (kubectl (-n default) (exec) ((my-pod) (-c my-container)) (-- ls /) )
		          디폴트 네임스페이스에서 실행해라 마이포드를    마이컨테이너에 있는걸    쿠버네티스관련옵션을 전부 종료시키는
			마이컨테이너에 있는 마이포드의 쿠버네티스관련옵션을 전부 종료시키는 명령을 실행해라
		api-resources:사용할수 있는 자원들을 표시함	
			
	2.kubeconfig환경변수
		kubectl의 환경변수는 home/.kube/config에 있음
		여기서 클러스터에서 사용할수 있는 자원을 확인하는건 kubectl api-resources로 확인할수있음
		
		도커 데스크톱으로 쿠버네티스를 쓰면 자동으로 kubeconfig가 생성되고,
		--kubeconfig옵션으로 다른 설정파일을 지정할수 있음
		다중 클러스터에 다른 인증정보로 접근할때 사용함
		
	3.다양한 사용 예
		단순히 명령실행말고,파이프라인으로 현재값의 출력을 다음명령의 입력으로 넣을수도 있고 그런식으로 스크립트식 사용도 가능함
		
			
			
			
			
2.디플로이먼트를 이용해 컨테이너 실행
	앞에서 run으로 생성한건 직접 파드를 하나 추가한거고,보통은 apply로 디플로이먼트를 생성함
	이렇게해야 선언적으로 생성할수있어서 관리하기가 편함
			
3.클러스터 외부에서 클러스터 안 앱에 접근하기
	쿠버네티스 외부에서 쿠버네티스 내부에 접근하려면,직접 접근하면 안되고 쿠버네티스의 서비스를 통해서 접근해야함
	그래서 서비스를 생성해서 그쪽을 통해서 접근해야함
		kubectl expose deployment 이름 --type=NodePort
	하면 노드포트타입의 디플로이먼트를 생성하고(노드포트는 모든 노드의 포트를 할당함,즉 전체를 다받음 )
		kubectl get service로 포트를 확인하고 그 포트로 접속하면됨
		좀더 자세히 보려면
			kubectl describe service 이름
		으로 상세하게 볼수있음
			
			
			
			
			
			
4.쿠버네티스 아키텍쳐
1.쿠버네티스 클러스터 전체 구조
	쿠버네티스 클러스터는 클러스터를 관리하는 마스터와 실제컨테이너를 실행시키는 노드로 구성됨
	마스터에는 etcd(모든 설정등 적는건 여기다들어있음),apiserver(모든건 여기통해서 입출력을 함) 등이 들어있음
	
	노드는 kubelet,kube-porxy,docker등 컴포넌트가 실행되고,실제 사용하는 컨테이너의 대부분은 노드에서 실행됨
	
	구조는
		쿠버네티스에 명령을 주면 리버스프록시로 마스터api에 명령을 전달하고 걔가 노드랑 etc등으로 명령을 전달하고 실행시킴
	
	
	쿠버네티스의 관리용 컴포넌트들도 다 컨테이너로 실행됨
	
2.쿠버네티스의 주요 컴포넌트
	쿠버네티스는 기본적으로 클러스터를 관리함
	클러스터는 단일컴퓨터뿐만 아니라 여러대컴퓨터를 묶음으로 다루는걸 뜻하므로 여러가지의 컴포넌트를 포함함
	
	쿠버네티스의 컴포넌트는 관리에 필수인 마스터컴포넌트,노드컴포넌트와 추가로 붙인 애드온컴포넌트로 나눠짐
	
	1.마스터컴포넌트
		etcd:etcd는 키밸류 저장소임
			분산시스템에서 노드 사이의 상태를 공유하는,데이터베이스 역할을 함
			etcd는 서버 하나당 프로세스 하나만(즉 전체에서 하나밖에없음,클러스터링등으로 같은걸 복사할순있지만)존재함
			
		kube-apiserver:얘는 쿠버네티스의 api를 사용할수 있도록하는 컴포넌트임
						얘는 클러스터로 온 명령이 유효한지 검증하고(문법과 권한)그걸 실행해서 돌려줌
						얘는 수평적으로 확장 가능하니까(어짜피 api서버라서 유일성같은거없음)서버여러대에 여러개설치가능
		
		kube-scheduler:얘는 클러스터 안에 자원 할당이 가능한 노드중 알맞은 노드를 선택해서 파드를 생성하는 컨포넌트
						파드는 여러 요구조건을 받을수있으며,거기에 맞는 노드를 선택해서 생성함
		
		kube-controller-manager:얘는 파드들을 관리하는 컨트롤러를 실행하는 컴포넌트임
								클러스터에서 새로운 컨트롤러를 생성하고 실행할때 컨트롤러 매니저의 큐에 넣어서 실행하는식으로 동작함
		
		cloud-controller-manager:얘는 쿠버네티스의 컨트롤러를 클라우드와 연결해서 관리하는 컴포넌트임,필요해지면보자
		
	2.노드용 컴포넌트
		kubelet:얘는 클러스터 안의 모든 노드에서 실행하는 컴포넌트,파드컨테이너들의 실행을 직접 관리함,파드스펙이라는 조건설정을 전달받아서 실행하고
				컨테이너가 정상적으로 실행되는지 헬스체크를 진행함,단 노드안에 있는 컨테이너라도 쿠버네티스가 안만들었으면 관리하지않음
				(컨테이너안 파드 지웠을때 바로재시작거는게 얘인듯)
				
		kube-proxy:클러스터안에 별도의 가상 네트워크를 설정하고 관리하는 컴포넌트
		
		컨테이너 런타임:실제로 컨테이너를 실행시키는 컴포넌트,대표적으로 도커가 있음
		
	3.애드온
		네트워킹 애드온:클러스터 안에 가상네트워크를 구성해 사용할떄 프록시이외에 네트워킹 애드온을 사용함,얘가 직접 서버구성할때 가장 까다로움
		
		dns애드온:클러스터 안에서 동작하는 dns서버,쿠버네티스 서비스에 dns레코드를 제공함,쿠버네티스 안에 실행된 컨테이너들은 자동으로 dns서버에 등록됨
				주로 coreDNS를 사용함 
				
		대시보드 애드온:kubectl로 명령 주지만,gui로 볼때 대시보드애드온으로 사용할수있음
		
		컨테이너 자원 모니터링:컨테이너들의 자원사용량등을 시계열형식으로 저장해서 볼수있음
		
		클러스터 로깅:클러스터 안 개별 컨테이너의 로그와 구성요소의 로그를 모아서 보는 애드온
		
			
3.오브젝트와 컨트롤러			
	쿠버네티스는 오브젝트와 오브젝트를 관리하는 컨트롤러로 나눠짐
	사용자는 템플릿등으로 쿠버네티스에 자원의 바라는 상태를 정의하고,컨트롤러는 바라는상태와 현재상태가 일치하도록 오브젝트를 생성/삭제함
	오브젝트에는 파드,서비스,볼륨,네임스페이스 등이 있고 컨트롤러에는 레플리카셋,디플로이먼트,스테이트풀셋,데몬셋,잡등이 있음
	
	1.네임스페이스
		네임스페이스는 클러스터 하나를 논리적인 단위로 나눠서 실행하는것,
		이해하자면,컴퓨터 하나에 특정 폴더에 프로그램 바로가기로 싹 몰아두고 이름붙이는느낌임,그래서 그폴더를 전부 실행하거나 실행에 제한걸거나 하는식
		
		네임스페이스를 지정할때는 
			--namespace=붙일이름 
		으로 하나하나붙여도되는데
		
		그냥 디폴트값을 바꿀수도있음
			kubectl config current-context
		로 현재 컨텍스트 이름를 확인하고
			kubectl config set-context 컨텍스트이름 --namespace=붙일이름
		으로 디폴트값을 바꾸면 새로생성한값의 네임스페이스가 바뀜
		
		네임스페이스 전체검색하려면
			kubectl get pod --all-namespaces
		하면됨
		
		바꾼값 다시 디폴트로 바꾸려면 
			--namespace=""
		하면됨
		
	2.템플릿
		쿠버네티스 클러스터의 오브젝트나 컨트롤러가 어떤 상태여야 하는지 적용할떈 yaml형식의 템플릿을 적용함
		템플릿은 들여쓰기로 구조가 바뀌고(파이썬처럼),
		scalars(스트링,넘버),sequences(어레이,리스트),mappings(해시,딕셔너리) 3기초요소로 표현됨
		
		템플릿의 기본형식은
			apiversion:v1
			kind:Pod(생성종류)
			metadata:
			spec:
		로 구성됨
		apiversion은 api버전이고(쿠버네티스버전과 관련된)
		kind는 어떤 오브젝트나 컨트롤러의 작업인지를 명시하고
		metadata는 해당 오브젝트의 이름이나 레이블등을 설정하고
		spec는 파드가 어떤 컨테이너를 가지고 실행하며,실행할때 어떻게 동작해야할지를 명시함
		
		kubectl explain 생성종류  로 현재 생성할거에 무슨 하위필드가 있는지 출력해서 볼수있음
		
		하위필드를 포함해 특정필드를 커맨드라인에서 지정할때는 .metadata.anno이런식으로 .으로 이어가면됨,맨앞에도 .붙이는거에 주의
		필드설명없이 그 아래에 속한 모든필드를 보려면 --recursive옵션을 쓰면됨
		
		
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			