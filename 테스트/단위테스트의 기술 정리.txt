1.단위테스트의 기초
  1.단위테스트 정의
    단위테스트의 단위는 작업단위,혹은 유즈케이스를 의미함
	작업단위는 또 진입점과 종료점사이를 말하는데,진입점은 호출될떄 시작하는지점이고 종료점은 어떤 한 출력이나 리턴이 일어나는걸 말함
	
  2.진입점과 종료점	
    작업단위에는 하나의 진입점과 여러개의 종료점이 있을수있고,종료점은 한 함수실행에서 여러개가 한번에 실행될수있음
	또한 한 작업단위가 함수 하나일수도있지만,여러함수일수도 있고,모듈이나 컴포넌트단위일수도있음
	어떻게 자르든 외부에서 접근하는 시작점이 진입점임(보통 파사드나 서비스로 묶어서 실행하면 그 실행메서드가 진입점인것)
	
	종료점에는 함수의 리턴값,특정 상태값의 변경,db의 변경이나 카프카 통신,로깅같은 사이드이펙트 출력(의존성 호출),예외 리턴등이 있을수있음
	
	종료점은 작업단위의 최종 결과를 의미하고,각 종료점마다 테스트를 만드는느낌으로 접근하면 쉬움
	종료점이 새로 생긴다는건 추가적인 요구사항이나,결과에 영향을 미치는 무언가가 생겼다는것

  3.다른종료점,다른 기법
    종료점을 분류하는 이유는,각 종료점마다 테스트방법이 다르기때문
	반환값은 그냥 바로 테스트를 만들면되고
	상태값변경은 좀 귀찮음,함수호출후에 다시 상태를 확인해서 체크해야함
	의존성 호출은 외부에 실행주도권이 있어서 모킹하던지 해야해서 제일 귀찮음
	
	그래서 의존성호출은 최대한 줄이고,꼭 필요한데서만 쓰는게 좋음

  4.좋은 단위테스트의 특징
    좋은 테스트는
	  테스트 작성자의 의도를 이해하기 쉬워야함
	  읽고쓰기 쉬워야함
	  테스트자동화가 가능해야함
	  같은 조건에서 실행결과는 항상 같아야함
	  의미있는테스트여야하고,구체적 결과를 제공하여 문제를 쉽게 파악하고 해결할수있어야함
	  누구나 쉽게 실행할수 있어야함
	  실패할때 뭐가 문제인지 쉽게 알수있어야함
	이걸 만족시켜야함
	
	좋은 단위테스트는
	  빠르게 실행되어야함
	  테스트환경을 일관되게 유지하고,테스트결과가 항상 예측가능해야함
	  다른테스트와 완전히 독립적으로 실행되어야함
	  외부의존성(db등)이 없어도 메모리내에서 실행되어야함
	  가능한 동기적인 흐름으로  실행되어야함(가능하면 스레드를 사용하지 않아야함)
	임
	모든 테스트가 좋은 단위테스트일 필요는 없고,그런건 그냥 통합테스트로 만들어도됨
	
	또한 외부의존성을 메모리로 실행시킬때는 스텁을 사용할수도 있음
	대표적으로 db를 인메모리 db로 바꾸는건데,이건 쓰기편하긴한데 위치가 애매하다는건 알고써야함
	실제 db만큼 신뢰성과 정확성을 보장하지못하고,스텁만큼 설정이 쉽지않고,안시 sql만 사용할수있음
	만약 안시sql만 사용하지않는다면 스텁을 쓰고,통합테스트에선 실제db를 사용하는게 좋음
	
	단위테스트 체크리스트는
	  2년전에 만든 테스트가 여전히 잘 돌아가는가?(회귀테스트)
	  내가 2달전에 만든 테스트를 팀 내 다른동료가 실행했을때 문제가없나?(회귀테스트)
	  내가 만든 테스트가 수분내로 전부 실행되는가?(단위테스트의 속도)
	  버튼 하나만 눌러서 모든 테스트실행이 가능한가?(테스트의 속도)
	  기본적인 테스트를 몇분내로 만들수있나?(테스트 작성시 내외부 의존성의 존재여부)
	  다른 팀 코드에 버그가있어도 내 테스트는 통과하나?(테스트가 외부의존성에서 독립적인지 여부)
	  내 테스트는 다른 실행환경에서 실행해도 같은결과를 보장하나?(테스트가 외부의존성에서 독립적인지 여부)
	  db,네트워크,배포없이 내 테스트는 동작하나?(테스트가 외부의존성에서 독립적인지 여부)
	  하나의 테스트를 삭제,이동,변경해도 다른테스트는 영향을 받지않나?(테스트간 의존성이 없는지 여부)
	이것들을 다 만족해야함,하나라도 틀리면 통합테스트거나 할수있음

  5.통합 테스트
    통합테스트는 단위테스트의 조건을 하나라도 만족시키지 못한 모든 테스트임
	예를들어 실제 의존성(db등)을 사용한다거나
	
	통합테스트의 문제는 한번에 너무 많은걸 테스트한다는데 있음
	자동차의 엔진만 테스트하는게 아닌,자동차가 움직이는지를 테스트하면 정상동작일땐 괜찮은데 이상동작일땐 어디서 문젠지를 찾기어려움
	
	가장 중요한건
	  가독성:읽기쉬워야 유지보수,디버깅도 쉽고 뭐가 문제인지도 알기쉬움
	  유지보수성:테스트코드떄문에 기존테스트나 프로덕션코드관리가 어려우면 문제가 있을확률이 높음
	  신뢰성:테스트가 실패했을때 그 결과를 믿을수없으면 테스트의미가 없음
	임

  6.단위테스트
    단위테스트란 진입점을 통해 작업단위를 호출하고,그 종료점을 확인하는 자동화된 코드임
	잘 작성된 단위테스트는 신뢰성이 높고 가독성이 좋아서 유지보수가 용이함
	해당 코드가 직접 변경되지않는한 동일한 결과를 보장해야함
	
	게터와 세터같은건 조건문이나 논리가 없어서 테스트를 만들 가치가 없음
	조건이나 논리가 들어가면 이 논리가 제대로 동작하는지를 테스트해야함

  7.테스트 주도 개발
    기능을 만들기 전에 테스트를 먼저 만드는게 tdd임
	이거의 순서는
	  어떤 기능이 필요할지 요구사항정리
	  목표하는 기능구현을 검증하는 테스트코드작성
	  테스트 실행 후 테스트코드 실패 확인
	  테스트가 통과하게 코드 수정
	  테스트 실행 후 테스트코드 성공 확인
	  리팩터링으로 코드 다듬기(맘에들때까지반복)
	  테스트 실행 후 테스트코드 성공 확인
	이렇게 하는방식임

    즉 테스트가 일부러 실패하게 테스트를 작성하거나,기능자체를 비워서 테스트가 실패하게 하고,해당 테스트가 성공하게 코드를 수정하는방식임
	강타입언어의 경우엔 인터페이스나 클래스까지만 만들고 테스트를 만듬
	구현은 테스트가 일단 통과되게 만드는걸 가장 먼저 신경쓰고,테스트가 통과한 뒤에 리팩터링함
	
	tdd의 가장 큰 장점은,테스트 자체를 검증할수있어서 테스트를 수정하지않아도됨
	  
2.첫번째 단위테스트	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  