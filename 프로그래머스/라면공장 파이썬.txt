서플라이 기준으로 데이트서플 묶어서 힙에 넣고 
스톡으로 끝까지 갈수 있는지 확인하고 안되면
힙에서 하나뽑아서 그때까지 갈수있는지 확인하고
갈수있으면 스톡에 더하고 앤서+1
갈수없으면 템프에 뽑은거 다시넣고 힙에서 하나 더뽑아서 루프 
만약 스톡이 k-1이랑 같아지면 앤서 리턴

	데이트서플 묶어서 힙에 넣는 루프 (힙넣을떄 서플라이에 -붙여서 최대큐로 작동)
	무한루프돌리고
		스톡이 k-1보다 크면 앤서 리턴		
		작으면 힙에서 하나 뽑아서 데이트-1보다 스톡이 큰지 확인하고
		
			맞으면 받아오고(스톡에 더할때 최대큐작동떔에 -붙엿으니까 빼기해야함)
			앤서+1
			템프 다시 힙에 넣고 루프반복
			아니면 뽑은거 템프에 넣고 루프반복
		
		
실패
import heapq
def solution(stock, dates, supplies, k):
    answer = 0
    supdate=[]
    temp=[]
    datelen=len(dates)
    for i in range(datelen):#데이트서플 묶어서 힙에 넣는 루프
        heapq.heappush(supdate,(-supplies[i],dates[i]) )# (힙넣을떄 서플라이에 -붙여서 최대큐로 작동)
    while True:
        if stock>k-1: return answer #스톡이 k-1보다 크면 앤서 리턴	
        else:
            a=heapq.heappop(supdate) #작으면 힙에서 하나 뽑아서
            if stock>=a[1]-1: #데이트-1보다 스톡이 큰지 확인하고
                stock=stock-a[0]#맞으면 받아오고(스톡에 더할때 최대큐작동떔에 -붙엿으니까 빼기해야함)
                answer+=1     #앤서+1
                supdate.extend(temp)
                heapq.heapify(supdate)
                
            else:
                temp.append(a) #아니면 뽑은거 템프에 넣고 루프반복
    
    

    return answer